<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Node无法执行使用import关键字的源文件</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/Node%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E4%BD%BF%E7%94%A8import%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/Node%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8C%E4%BD%BF%E7%94%A8import%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有时为了测试代码，我们会用VS Code在Node环境下调试js文件。当代码中使用了<strong>import</strong>关键字，运行会报如下错误。</p><blockquote><p>(node:10048) Warning: To load an ES module, set “type”: “module” in the package.json or use the .mjs extension.</p><p>(Use <code>node --trace-warnings ...</code> to show where the warning was created)</p><p>c:\repo\main.js:1</p><p>import math from “.&#x2F;js&#x2F;math”</p></blockquote><p>上述大概意思是：为了能够加载ES6模块，应在<strong>package.json</strong>配置文件中增加<strong>type</strong>字段，并将值设为<strong>module</strong>或将后缀名改为<strong>mjs</strong>。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>经测试，第2种方法需将所有相关文件后缀名都改为<strong>mjs</strong>，包括直接、间接依赖的包文件。如此处理工作量太大，更麻烦的是改变了包内文件结构，可能带来潜在问题。故推荐在<strong>package.json</strong>文件中增加并修改<strong>type</strong>字段。该文件不存在则用<code>npm init -y</code>命令生成。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"repo"</span><span class="token punctuation">,</span>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>对于模块化的实现，CommonJS使用<code>module.exports</code>导出及<code>require()</code>加载；而ES6分别使用<code>export</code>和<code>import</code>关键字导出和导入。当源码中出现<code>export</code>或<code>import</code>关键字，Node就认为使用了ES6模块；接着再去检查后缀名是否为<strong>mjs</strong>或者<strong>type</strong>字段的值是否为<strong>module</strong>；否则就报错。</p><h3 id="文件后缀"><a href="#文件后缀" class="headerlink" title="文件后缀"></a>文件后缀</h3><p>针对不同的后缀名，Node处理原则如下：</p><ul><li><strong>.mjs</strong>文件总是以ES6模块加载</li><li><strong>.cjs</strong>文件总是以CommonJS模块加载</li><li><strong>.js</strong>文件的加载取决于<strong>package.json</strong>里面<strong>type</strong>字段值</li></ul><h3 id="type字段"><a href="#type字段" class="headerlink" title="type字段"></a>type字段</h3><p>该字段决定了.js文件和无后缀名文件的加载方式。值为<strong>commonjs</strong>时，以commonjs模式加载；值为<strong>module</strong>时，以ES6模式加载；字段不存在时，默认以commonjs模式加载。</p>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS简写之法</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/js%E7%AE%80%E5%86%99%E4%B9%8B%E6%B3%95/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/js%E7%AE%80%E5%86%99%E4%B9%8B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<ol><li><p>IF为真结构</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    canDrink <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 简化写法</span>age <span class="token operator">></span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>canDrink <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>交换变量</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> president <span class="token operator">=</span> <span class="token string">'Trump'</span><span class="token punctuation">;</span><span class="token keyword">let</span> candidate <span class="token operator">=</span> <span class="token string">'Biden'</span><span class="token punctuation">;</span><span class="token comment">// 常规写法</span><span class="token keyword">const</span> temp <span class="token operator">=</span> president<span class="token punctuation">;</span>president <span class="token operator">=</span> candidate<span class="token punctuation">;</span>candidate <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">// 简化写法</span><span class="token punctuation">[</span>president<span class="token punctuation">,</span> candidate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>candidate<span class="token punctuation">,</span> president<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>字符串转数值</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规写法</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> weight <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'68.5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 简写</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">'18'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> weight <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">'68.5'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>幂运算</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规写法</span><span class="token keyword">const</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简化写法</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>提供默认值</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 常规写法</span>   <span class="token keyword">let</span> dbHost<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_HOST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dbHost <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_HOST</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// null or undefined</span>       dbHost <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">// 简化写法</span>   <span class="token keyword">const</span> dbHost <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_HOST</span> <span class="token operator">||</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span> <span class="token comment">// </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS入门</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/js%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/js%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> JavaScript是一种类C的脚本语言，目前在Web前端、后端都有非常广泛的应用。js其实与Java并无关联，当年为了沾上Java的热度就起名叫JavaScript。</p><p>对于大多数程序而言，程序&#x3D;数据+算法，因此学习一门新的编程语言应从这两个方面学起，后续在逐渐深入该语言的特有的内容。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ol><li><p>number</p><p>整型、浮点型、非数字<code>NaN</code>、无穷大<code>Infinity</code>4种数值类型。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>num <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>浮点型占用整型2倍的内存空间，因此JavaScript会不失时机地将浮点型数值转换为整型数值。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token comment">// 自动转换为2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>任何语言任何时候都不要与浮点型数值作比较</p></blockquote></li><li><p>string</p><p>用字符串模板代替字符串拼接</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li><p>常见类型与bool类型转换关系表</p><table><thead><tr><th align="center">数据类型</th><th>true</th><th>false</th></tr></thead><tbody><tr><td align="center">string</td><td>任何非空字符串</td><td>“”（空字符串)</td></tr><tr><td align="center">number</td><td>任何非零数值(包括无穷大)</td><td>0和NaN</td></tr><tr><td align="center">object</td><td>任何对象</td><td>null</td></tr><tr><td align="center">undefined</td><td>n&#x2F;a</td><td>undefined</td></tr></tbody></table></li><li><p>undefined</p><p>所有仅被声明而未被赋值的变量，JavaScript会分配一个默认值<code>undefined</code>。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> sloganconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>slogan<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li><p>null</p><p>如果一个变量将来用于存储对象，通常将其初始化为<code>null</code>。</p></li><li><p>object</p></li><li><p>array</p><ul><li>JavaScript属于弱类型编程语言，因此array不会对数据类型进行检查，即同一数组中可以不同类型的数据；</li><li>出于性能考虑，不建议数组头部进行操作。</li></ul><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apple, banana. 2020</span>fruits<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li></ol><h3 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h3><p>变量命名必须以字母、下划线(_)或美元符号($)打头；类名使用大驼峰命名法；常量使用大写+下划线命名法；其余使用小驼峰命名法。</p><p>不建议改变变量数据类型</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> slogan <span class="token operator">=</span> <span class="token string">"hello javascript"</span><span class="token punctuation">;</span>slogan <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token comment">// 允许</span>slogan <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span> <span class="token comment">// 允许但不推荐</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>除非为兼容旧版本，否则一律使用<code>let</code>关键字声明变量。<code>let</code>不支持变量提升，即变量在被使用之前必须先被声明；其次<code>let</code>不允许重复声明变量；以上特点可避免<del>var</del>关键字可能带来的混乱。</p><p>常量必须初始化，即声明时就赋初值。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> slogan<span class="token punctuation">;</span>slogan <span class="token operator">=</span> <span class="token string">"hello javascript"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="动态特性"><a href="#动态特性" class="headerlink" title="动态特性"></a>动态特性</h3><p>JavaScript属于动态型编程语言，允许同一变量在运行周期里存储不同类型的数据，<strong>注意：这不是类型推断。</strong></p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">"hello js"</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> x <span class="token comment">// => 'string'</span>slogan <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> x <span class="token comment">// => 'number'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>单行语句以分号结尾；花括号包起来的几行语句即多行语句。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ol><li>递增与递减</li></ol><p>前置与后置递增、递减运算结果都相同，区别在于赋值运算次序不同。</p>  <div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> price1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> price2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> newPrice1 <span class="token operator">=</span> price1<span class="token operator">++</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPrice1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span><span class="token keyword">let</span> newPrice2 <span class="token operator">=</span> <span class="token operator">++</span>price2<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPrice2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ol start="2"><li>比较</li></ol><ul><li><p>数字与字符串比较时，JavaScript会先将字符串隐式转换为数字后再进行比较。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"20"</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Number("20") > 10 → 20 > 10  → true</span><span class="token string">"apple"</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Number("apple") > 10 → NaN > 10 → false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li><p>抽象相等<code>==</code></p><p>比较对象类型一致时，随即比较值是否相等；不一致时，尝试隐式类型转换后再比较值是否相等。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">10</span> <span class="token operator">==</span> <span class="token string">"10"</span> <span class="token comment">// 10 == Number("10") → 10 == 10 → true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>严格相等<code>===</code></p><p>严格以上的相等（类型与值都相等），本质是<strong>严格相等不会尝试类型转换</strong>。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">10</span> <span class="token operator">===</span> <span class="token string">"10"</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><blockquote><p>在不清楚具体应用场合的前提下，尽量使用严格相等<code>===</code>或者严格不相等<code>!==</code>。</p></blockquote><h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><ol><li>多条件判断过程</li></ol><p>对于多条件判断语句（逻辑与<code>&amp;&amp;</code>和逻辑或<code>||</code>），当根据条件1就可以得到整体判断结果，后续条件将不再执行。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> dog<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"old dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 正常输出：old dog，不会报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"old dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 报错：Cannot read property 'age' of null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ol start="2"><li>分支语句break关键字</li></ol><p>如果缺少<code>break</code>关键字，条件成立部分语句及后续无<code>break</code>关键字语句都将会被执行；此时<code>case</code>关键字起到的是<code>goto</code>的作用，这与<code>if...else if...</code>语句功能不同。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 输出2、3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ol start="3"><li>遍历</li></ol><p><code>for...in</code>语句用于遍历数组的元素或者对象的属性。不同于C#语言，JavaScript语言中可对集合进行读写。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> stuff <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"wanger"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">married</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">in</span> stuff<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>x<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stuff<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>虽然JavaScript支持行注释和块注释，但是编辑器都是以行注释的型式生成注释。</p>   <div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// function add(x, y)&#123;</span><span class="token comment">//     return x + y;</span><span class="token comment">// &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h3><ol><li>大胆抛弃<code>var</code>关键字，请用<code>let</code>和<code>const</code>代替</li><li><code>import</code>模块时不建议省略后缀名，主要怕引起诸如<code>math.js</code>和<code>math\index.js</code>的歧义。</li></ol><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><ol><li><p>简化对象方法声明</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> coder <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// sayHello: function()&#123;</span>    <span class="token comment">//     console.log("hello js");</span>    <span class="token comment">// &#125;</span>    <span class="token comment">// 简化写法</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>使用箭头函数简化方法定义</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简化写法</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意：用箭头函数定义实例方法时，this一般不指向实例</span><span class="token keyword">const</span> tommy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'tommy'</span><span class="token punctuation">,</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">this is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayBye</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">this is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>tommy<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this is tommy</span>tommy<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this is undefined </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><h3 id="新意思"><a href="#新意思" class="headerlink" title="新意思"></a>新意思</h3><ol><li><p>高阶函数</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> diameters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>diameters <span class="token operator">=</span> diameters<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>diameters<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3 ]</span>areas <span class="token operator">=</span> diameters<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> <span class="token number">0.785</span> <span class="token operator">*</span> d <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 0.785, 3.14, 7.065 ]</span><span class="token keyword">var</span> totalAreas <span class="token operator">=</span> areas<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>totalAreas<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10.99 = 0.785+ 3.14 + 7.065</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>解构</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SteamPro</span><span class="token punctuation">(</span><span class="token parameter">press<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> density<span class="token punctuation">,</span> entropy<span class="token punctuation">,</span> enthalpy<span class="token punctuation">,</span> viscosity<span class="token punctuation">;</span>    <span class="token comment">// balabala</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> density<span class="token punctuation">,</span> entropy<span class="token punctuation">,</span> enthalpy<span class="token punctuation">,</span> viscosity <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> density<span class="token punctuation">,</span> entropy<span class="token punctuation">,</span> enthalpy<span class="token punctuation">,</span> viscosity <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">SteamPro</span><span class="token punctuation">(</span>press<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>展开运算符</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 支持数组和对象</span><span class="token keyword">const</span> numbers1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> numbers2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>numbers1<span class="token punctuation">,</span> <span class="token operator">...</span>numbers2<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5, 6 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>类的声明和继承</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hi, i am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> course</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>course <span class="token operator">=</span> course<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">slogan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> isn't a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>course<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> teacher, but a farmer!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> wanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"wanger"</span><span class="token punctuation">,</span> <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wanger<span class="token punctuation">.</span><span class="token function">slogan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>模块化</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> square <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 调用模块</span><span class="token keyword">import</span> math <span class="token keyword">from</span> <span class="token string">'./math.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; add: [Function: add], square: [Function: square] &#125;</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中的异步用法</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/js%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%94%A8%E6%B3%95/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/JavaScript/js%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><p>“阻塞”一词的字面意思是被迫停滞，无法前进，很容易联想到日常生活中的堵车。大家都碰到过程序“假死”，光标一直转圈圈，键鼠也不听使唤。这种现象背后的原因是 UI 线程被阻塞，此刻后台大多在进行下载文件、查询数据库等I&#x2F;O密集的操作。</p><p><img src="https://i.pinimg.com/originals/e0/9c/bc/e09cbc00e6992f3c31c78200b3a05df1.jpg" alt="img"></p><p><strong>阻塞与非阻塞的区别在于应用层在等待请求结果期间的状态。</strong>阻塞模式下应用层发出请求后一直死等结果，直到结果全部返回，这期间啥也不干。举个例子：网格长在小区群里发了条消息，要求各家各户上报假期出行情况，随后她就去买菜做饭了，这是非阻塞。如果她一直傻乎乎地捧着手机，等待所有家庭的答复，外面有人敲门也不管，这是阻塞。</p><p>代码默认就是按阻塞模式执行的，因为语句总是一句接一句往下走。只不过大多数语句执行的很快，看不出阻塞来。只有在执行耗时语句时，才体会到阻塞的存在。MFC 程序为防止主线程被阻塞，进而导致程序“假死”，通常会新建工作线程来执行耗时操作。 JS 本身是单线程的，其它线程只能由宿主（浏览器、NodeJS等）创建，这些线程不属于 JS。 </p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>同步、异步与阻塞、非阻塞是相互独立的。<strong>同步与异步的区别在于是否主动确定结果的状态。</strong>当同步请求发出后，应用层会主动向内核层发起问询。倘若结果还没出来，同时处于阻塞模式下，应用层就只会不断发起问询；若当前处于非阻塞模式，应用层暂时去干别的，过会儿再来问询。异步请求不会主动问询，结果出来后由“周到的”内核层通知给应用层，这种模式当然也分阻塞和非阻塞。举个例子：发工资那天，不停地刷新银行 APP，查看工资是否到账等同于同步操作；安心等待工资到账的短信息等同于异步操作。</p><h2 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h2><p>综上所述，一个高效、理想的模型应该是异步非阻塞模型。应用层发完请求后就去干别的事情，避免了无效的的等待；结果出来后由内核层去通知应用层，避免了盲目的问询。异步非阻塞模型离不开多线程，但上文提到 JS 是单线程的，因此只能由宿主创建诸如下载、渲染等线程。JS 主线程只负责盯着自己的任务队列，不停地将队列中的任务拿去执行。耗时线程操作执行完毕后发出消息，宿主收到消息后将对应的回调函数放到主线程的任务队列中，这样就实现了异步。</p><h2 id="Promise的由来"><a href="#Promise的由来" class="headerlink" title="Promise的由来"></a>Promise的由来</h2><p>上节说到，通过回调函数可以实现异步，但该方案存在<strong>回调地狱</strong>的麻烦。比如有这样的需求：下载 ZIP包，破解 ZIP包，解压 ZIP包，发送解压后的文件，一环扣一环。最初代码如下，看了叫人头皮发麻，比套娃还能套。</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">downloadZIP</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">CrackZIP</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">UnZIP</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">neFile</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">SendFile</span><span class="token punctuation">(</span>neFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>于是乎<code>Promise</code>诞生了 ，使用<code>Promise</code>将上述代码改成链式调用，顺眼了很多。有一点要注意：在可能的异常发生和调用<code>Reslove</code>、<code>Reject</code>函数之前，<code>Promise</code>会一直处于<code>Pending</code>状态， 因此<code>then</code>、<code>catch</code>方法也不会执行。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">downloadZIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">file</span> <span class="token operator">=></span> <span class="token function">CrackZIP</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> password</span> <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">UnZIP</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">newFile</span> <span class="token operator">=></span> <span class="token function">SendFile</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a>async 与 await</h2><p><code>async</code>与 <code>await</code> 是 ES6 中引入的语法糖，目的是简化<code>Promise</code>的使用。引用阮一峰老师说法：</p><blockquote><p>async 函数完全可以看作多个异步操作包装成的一个 Promise 对象，而 await 命令就是内部 then 方法的语法糖。</p></blockquote><p>示例用法如下：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/users/github"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>任何方法用<code>async</code>修饰后方法都返回<code>Promise</code>对象，这与该方法是否用<code>await</code>调用无关。它两经常一起出现，但却是相互独立的。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 原始代码</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印Promise &#123; 1 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>await</code>相当于执行了<code>Promise</code>对象的<code>then</code>方法</p><div class="code-wrapper"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>甚至可以将混用 Promise、async、await，验证代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 混用示例1</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 打印1</span><span class="token comment">// 混用示例2</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>await语句之间是阻塞的。本节开头的示例代码中，在<code>fetch</code>方法返回后才会就继续执行<code>json()</code>方法。这也符合逻辑，数据还没拿回来怎么加工？如果想让多个<code>Promise</code>并行运行，应使用<code>Promise.all</code>方法。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/users/github"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.google.com/users/github"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li><li><p><code>foreach</code>、<code>map</code>中使用<code>await</code>会立即返回，<code>await</code>只适用于传统<code>for</code>循环或者直接使用<code>for await</code>语句。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XAML入门</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/FrontEnd/XAML%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/FrontEnd/XAML%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>本文的素材来源于刘铁猛老师的《深入浅出WPF》一书及网上收集的资料。</p><p>XMAL(E<strong>x</strong>tensible <strong>A</strong>pplication <strong>M</strong>arkup <strong>L</strong>anguage) 全称可扩展程序标记语言，是微软开发的一种基于 XML 、声明式的界面描述语言。XAML 与C#、VB.NET 同属 .NET 平台语言，也会被编译成 IL 代码。</p><p>以上所述XAML是一种声明式语言，即只要通过标签的方式声明某个元素，编译器就会为该标签创建一个与之对应的CLR对象。比如以下 XAML 语句创建了一个按钮并指定了按钮内容和 click 事件处理函数。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button1_Click<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>对应C#代码：</p><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">var button1 &#x3D; new Button();button1.Text &#x3D; &quot;button1&quot;;button1.Click +&#x3D; new EventHandler(this.button1_Click);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>为了避免命名冲突，XAML 沿用了 XML 中命名空间的概念。命名空间只能在根元素中声明，语法为<code>xmlns:空间名称=&quot;xxx&quot;</code>，默认命名空间的名称可以省略。双引号中的字符串有两种形式：</p><ol><li><p>某程序集中的命名空间</p><p>xmlns:空间名称&#x3D;”clr-namesapce:程序集中的空间名;assembly&#x3D;程序集文件名”。比如要引用mscorlib类库中的System命名空间，写法如下：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns:sys = "clr-namespace:System;assembly=mscorlib"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>URL</p><p>每个 WPF 程序都依赖一些必备的命名空间，逐个引入既麻烦又臃肿。XAML 使用 URL 地址代表一堆同类型命名空间，形式简洁明了，常见分类如下。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol><p>x命名空间与解析 XAML 语言相关，其下属的几个特性很常用：</p><ul><li><p>x:Name</p><p>指定标签名称，方便后续引用。</p></li><li><p>x:Class</p><p>此特性只能用于根元素，告诉编译器将当前 XAML 的编译结果与后台代码的指定类合并，前提是该类必须声明为同名的<code>partial</code>类。新建窗口、页面及控件时，VS会自动生成前台 XMAL 代码和相应的后台代码，但后台代码不是必须的。</p></li><li><p>x:key</p><p>WPF中的资源是以“key-value”字典形式存储的，通过key检索具体资源。</p></li><li><p>x:static</p><p>在 XAML 中访问类的静态成员，常用于软件的多语言显示。习惯做法是将字符串保存到资源类的静态属性中。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;TextBlock Text="&#123;x:Static Local:I8n.ENG_AGE&#125;"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>元素通常由一个开始标签和一个结束标签组成。标签体包含了其它元素的元素称为非空元素，不包含其它元素的元素称为空元素。建议统一采用非空元素的形式。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--非空标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--空标签--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="元素特性"><a href="#元素特性" class="headerlink" title="元素特性"></a>元素特性</h3><p>为了区分对象的属性（Property），这里将 Attribute 翻译成<strong>特性</strong>，特性的功能是为元素附加额外的信息。特性赋值有两种方式：</p><ul><li>使用字符串简单赋值</li><li>使用特性元素复杂赋值</li></ul><p>元素的特性部分对应对象的属性及各种事件，但不是一一对应。特性的简单赋值通过<code>Attribute=“Value”</code>语法，示例如下。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextBlock</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="特性元素"><a href="#特性元素" class="headerlink" title="特性元素"></a>特性元素</h3><p>特征元素即某元素为另一个元素的某个特征，即以元素的方式展示另一个元素的特征，这有区别于上述在标签中内嵌特性。如果特征的值可以用字符串表达，就不要使用特征元素的表达方式。以下示例代码用特征元素的方式定义了窗口的资源。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>BBQ BOYS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="标记扩展"><a href="#标记扩展" class="headerlink" title="标记扩展"></a>标记扩展</h3><p>标记扩展主要扩展了特征的取值范围，简单赋值不再单单是个字符串，也可以是静态资源、对象等等。扩展语法是：<code>Attribute=“&#123;value&#125;”</code>，用大括号将值括起来。<strong>标记扩展支持嵌套使用</strong>。</p><p>标记扩展是一系列派生类，其基类为抽象类 MarkupExtension。所有扩展可分为两大类：XAML 标记扩展和 WPF 标记扩展（绑定），先罗列下 XAML 的标记扩展，下一章节介绍绑定相关。</p><ul><li><p>x:Null</p><p>显示地设置特性值为 NULL，常用于放弃相关特性的继承。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Style</span> <span class="token attr-name">TargetType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Setter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Setter.Property</span><span class="token punctuation">></span></span>Button.Background<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Setter.Property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Setter.Value</span><span class="token punctuation">></span></span>SeaGreen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Setter.Value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Setter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;x:Null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>x:Static 静态属性扩展</p><p>在 XAML 中访问静态成员</p></li><li><p>x:Type 对象类型扩展</p><p>在 XAML 中标记数据类型</p></li><li><p>x:Array 静态数组扩展</p><p>在 XAML 中创建静态数组</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">x:</span>Array</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>boys<span class="token punctuation">"</span></span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;x:Type sys:String&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>猴子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>肉肉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>二哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">x:</span>Array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListBox</span> <span class="token attr-name">ItemsSource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;StaticResource boys&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListBox</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><ul><li><p>Binding</p><p>数据绑定扩展，将自身的某个特性与任意数据绑定，MVVM中频繁用到此标记扩展。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  ```- TemplateBinding  为了方便复用，可以将控件的样式设置集中到一个控件模板里，然后通过模板绑定的方式应用到具体控件。  ```xml  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application.Resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ControlTemplate</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RedButton<span class="token punctuation">"</span></span> <span class="token attr-name">TargetType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentControl</span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Click<span class="token punctuation">"</span></span> <span class="token attr-name">Foreground</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ContentControl</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ControlTemplate</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Template</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;StaticResource RedButton&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>通常所谓的资源（二进制资源）指程序代码用到的一些附件内容，比如图标、版权字符串等。为了防止遗失或被破坏，可将资源编译进程序的主体，与程序主体浑然一体。WPF 另外引入了对象资源的概念，每个元素都可携带能被共享的对象资源，比如样式、控件模板、动画组件及画刷等。对象资源在元素的 Resources 特性元素中定义，以“键—值”对的形式存储。</p><p>在检索资源时，先查找当前元素的 Resources 特性，如果没有找到再沿着逻辑树去父元素查找，最终直到Application.Resources 元素。如果搜索完所有路径都没发现，就会抛出异常。</p><p>根据使用资源的方式不同，分静态绑定资源和动态绑定资源。绑定资源通过前面提到的标记扩展语法实现。</p><h3 id="静态绑定"><a href="#静态绑定" class="headerlink" title="静态绑定"></a>静态绑定</h3><p>当程序初始化时一次性地使用某资源，后续不再关注该资源可能的变化时，使用静态绑定扩展标记。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Good Good Study,Day Day Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;StaticResource motto&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextBlock</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h3><p>资源在程序运行后可能发生变化，且被绑定的特性需同步响应变化时，使用动态绑定扩展标记。</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">sys:</span>String</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>motto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Good Good Study,Day Day Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">sys:</span>String</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;DynamicResource motto&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextBlock</span><span class="token punctuation">></span></span>// 后台改变资源private void Button_Click(object sender, RoutedEventArgs e)&#123;    Resources["motto"] = "so boring";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h3><p>为了实现工程化及便于复用，可将资源定义在一个单独的资源字典文件中。该文件类似于前端常见的 CSS 样式文件，后缀名为 .xaml。大家熟悉的 MaterialDesign 界面库就是以资源文件的方式提供的，其引入方式如下：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary</span> <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application.Resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>使用示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;DynamicResource MaterialDesignFlatMidBgButton&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Start<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>前端</tag>
      
      <tag>XAML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue学习笔记</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/FrontEnd/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/FrontEnd/vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://cn.vuejs.org/">官网</a>对vue的定义如下：</p><blockquote><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于<strong>构建用户界面</strong>的<strong>渐进式框架</strong>。</p></blockquote><p>关键词：</p><ul><li><p>构建用户界面</p><p>vue扮演了MVVM编程范式中的ViewModel角色</p></li><li><p>渐进式</p><p>按需逐步引入vue提供的功能，不必夯不啷当全部引入。</p></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>组件化</p><p>组件化是个很老的概念，vue组件定义在一个单独的**.vue**文件中。</p></li><li><p>声明式</p><p>只需明确需求而不必具体实现，比如遍历一个数组，<code>v-for</code>指令用起来就很简单：</p><div class="code-wrapper"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;li v-for&#x3D;&quot;student in students&quot;&gt;  student.name&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>对于大多数编程语言，代码可能如下：</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::vector&lt;std::string&gt; students &#x3D; &#123; &quot;小明&quot;, &quot;丽丽&quot;, &quot;大黄&quot; &#125;;for (int i &#x3D; 0; i &lt; students.size(); i++)&#123;std::cout &lt;&lt; students[i] &lt;&lt; std::endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>虚拟DOM</p><p>真实DOM结构复杂，频繁操作性能消耗大，直观感受是网页卡。于是vue发明了虚拟DOM，变化后生成新的虚拟DOM，再用<strong>diff</strong>算法对比新旧虚拟DOM，最后将变化的部分一次性放到真实DOM上。</p></li></ol><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ol><li><p>property</p><p>对象属性，比如以下代码中的name属性。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'wanger'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li><li><p>attribute</p><p>html元素属性，比如以下代码中的src属性。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.google.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>函数（function）</p><p>实现特定功能的代码段</p></li><li><p>方法（method）</p><p>对象或类中的的函数</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// ES6中方法简写</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>配置对象</p><p>用于传递参数的对象，一般都是匿名对象。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'hello vue'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>数据对象</p><p>用于存储数据的对象，比如以下代码中的data对象。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">'5'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>表达式</p><p>变量和操作符的结合，一般至少返回一个值，比如：<code>1+1</code></p></li><li><p>语句</p><p>一种操作或命令，会对周围产生影响，比如：<code>year = 2021</code></p></li><li><p>元素</p><p>HTMl元素通常由一对开始标签和结束标签组成，中间部分称为标签体。标签体为空的标签称为空标签，除script标签除外，空标签可以简写成自闭标签的型式。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li></li></ol><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="入门示例"><a href="#入门示例" class="headerlink" title="入门示例"></a>入门示例</h3><p>新建html文档，使用script标签远程引入vue.js，这里要知道：</p><blockquote><p>一旦成功引入，将创建一个全局Vue函数，实际也是对象构造方法。</p></blockquote><p>以下是一段hello world示例：</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123; message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hello word"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>配置对象的el属性指定了vue实例将挂载的节点（一般为容器元素），也可通过原型方法<code>$mount</code>挂载，并且更加灵活。一旦某节点被挂载了vue实例，当前节点及其子节点将由vue接管。当数据对象发生变化时，相关节点将被重新渲染。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">// el: "#app",</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>本例使用了id选择器定位目标节点，也可以使用类选择器，或者直接调用<code>Document.getElementById()</code>函数获取。</p><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>data属性值也是一个对象，称之为数据对象，里面定义了模板中会用到的数据。数据对象的所有属性会自动附加到vue实例上。为了避免全局作用域污染，组件中使用函数返回数据对象。</p><h3 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h3><p>形式上的区别：生产版去除了注释、警告信息并采用gzip压缩，因此体积更小；开发版文件名为<strong>vue.js</strong>，生产版文件名为<strong>vue.min.js</strong>。最重要区别在于：开发版错误提示更加详细、友好。上节例子中把<code>new</code>关键字拿掉后，错误提示如下：</p><p><img src="https://gitee.com/romango/picbed/raw/master/picgo/image-20210827232259448.png" alt="image-20210827232259448"></p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>通过vue提供的专有模板语法，可以将html元素相关内容与vue实例建立关联。</p><h4 id="标签体插值"><a href="#标签体插值" class="headerlink" title="标签体插值"></a>标签体插值</h4><p>插值只用在标签体中，采用双大括号的<strong>mtstache</strong>语法。双大括号内可以插入js表达式，并且可以引用数据对象的属性。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>my name is &#123;&#123; name &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&#123;&#123; number &#125;&#125; is &#123;&#123; 0 === number%2 ? 'even' : 'odd' &#125;&#125; number<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><ol><li>v-bind</li></ol><p>v-bind指令用于绑定元素属性，由于该指令经常用到，可以省略指令名称。同标签体插值一样，属性中也可以插入js表达式。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">flex-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://3roman.github.io<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">site</span><span class="token operator">:</span> <span class="token string">'https://3roman.github.io'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ol start="2"><li>v-model</li></ol><p>数据绑定一般是单向的，即数据从vue实例流向html元素。v-model指令实现了表单类元素的双向绑定，<strong>但该指令只能用于表单类元素。</strong>v-model实际就是一个语法糖，它实现了对如下代码的包装。</p><p><code>&lt;input v-bind:value=&quot;name&quot; v-on:input=&quot;name = $event.target.value&quot;&gt;</code></p><p>v-model指令默认收集的是value属性值，因此可将<code>v-model:value=&quot;name&quot;</code>简写成<code>v-model=&quot;name&quot;</code>。</p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>计算属性具备缓存功能，这是方法调用无法比拟的，频繁操作时性能更好。</p><p>只有当计算属性首次被读取或依赖的属性发生变动时才会重新调用get访问器。比如以下示例代码中，控制台只输出了一次信息。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> &#123;&#123; fullName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> &#123;&#123; fullName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> &#123;&#123; fullName &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"王"</span><span class="token punctuation">,</span>                <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"二"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get访问器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>计算属性中的this指向vue示例，这是vue自动帮我们实现的。</p><p>get访问器只关注依赖的属性。set访问器实际很少用到，当只有get访问器时，可简写成方法的型式，方法名即为属性名。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get访问器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h4><p>TODO</p><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p><code>v-show</code>和<code>v-if</code>都能控制节点是否在页面中出现。<code>v-if</code>控制当前节点是否渲染，而<code>v-show</code>始终渲染节点，只是改变了样式的<strong>display</strong>属性值。如果频繁切换显示，建议使用<code>v-show</code>，性能更优。</p><p>值得注意的是：多个if条件与if-else语法结构存在差异。示例1代码中会将3个条件依次判断一遍，不管上一个条件是否已满足；示例2代码中当某个分支条件满足后，将跳过后续判断。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 示例1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2021 === year<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>牛年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2020 === year<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>鼠年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2019 === year<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>豬年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 示例2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!gender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>人妖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>if-else结构中，多个分支必须连续，否则将不起作用。</p><p>单个if控制多个标签时，建议使用<code>template</code>标签，不推荐使用<code>div</code>标签，因为后者会在DOM结构中增加额外节点，但<code>template</code>只能配合<code>v-if</code>指令使用。</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 不推荐 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAdmin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>发表文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>管理用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 推荐 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAdmin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>发表文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>管理用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>v-if</code>配合<code>div</code>和<code>template</code>的区别：</p><p><img src="https://gitee.com/romango/picbed/raw/master/picgo/image-20210829215041119.png" alt="image-20210829215041119"></p><h4 id="循环渲染"><a href="#循环渲染" class="headerlink" title="循环渲染"></a>循环渲染</h4><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>话说using语句</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/%E8%AF%9D%E8%AF%B4using%E8%AF%AD%E5%8F%A5/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/%E8%AF%9D%E8%AF%B4using%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>using 是 C# 程序员非常熟悉的关键字，概括起来有两个用途：引入命名空间；释放非托管资源。第一个用途就不多说了，下面剖析下释放非托管资源的前前后后。</p><h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><p>众所周知，C# 中的资源分托管资源和非托管资源。托管资源位于托管堆上，由 GC 自动回收。由于非托管资源不在托管堆上，GC 秉持“铁道警察各管一段”的职业道德，非托管资源它就不管了，交给程序员自己释放吧。</p><p>常见的非托管资源包括数据库连接、文件流、网络套接字等等，它们往往比内存更宝贵，用完应尽早释放。鉴于非托管资源自身的多样性和复杂性，GC 也心有余而力不足。另外，GC 回收资源不是实时的，把非托管资源交给 GC 释放也存在滞后。对于托管资源，GC 早点、晚点来释放，无非就是多占点内存，没那么紧要。</p><h2 id="释放方法"><a href="#释放方法" class="headerlink" title="释放方法"></a>释放方法</h2><p>.NET 提供了两个非托管资源的释放方法：类型自身的<code>Finalize()</code>方法和<code>IDispose</code>接口的<code>Dispose()</code>方法。</p><p>GC 回收对象时会调用<code>Finalize()</code>方法。重载某个类的<code>Finalize()</code>方法，再将清理逻辑写在其中，这样就实现了非托管资源的托管释放。但于非托管资源的释放与对象本身的回收往往无法同步，且<code>Finalize()</code>方法的调用也相当消耗资源。</p><p>为了方便及时释放非托管资源，微软专门定义了一个接口<code>IDisposable</code>，该接口中只包含一个方法<code>Dispose()</code>。任何包含非托管资源的类都应继承此接口，并将清理逻辑写入<code>Dispose()</code>方法的实现中，以确保非托管资源的正常释放。非常贴心的是，微软实现了大多数非托管资源操作类的<code>Dispose()</code>方法，比如 FileStream 类、SqlConnection 类、WebClient 类等等。</p><h2 id="using语句"><a href="#using语句" class="headerlink" title="using语句"></a>using语句</h2><h3 id="用法说明"><a href="#用法说明" class="headerlink" title="用法说明"></a>用法说明</h3><p>文章开头就说了，using 语句会隐式调用<code>Dispose()</code>方法。这里以创建数据库连接为例，展示一下这种写法简洁与优雅。注意：using 语句只适用于实现了<code>IDispose</code>接口的类型。</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">using</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> dbConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">"Server=.;Database=test;uid=sa;pwd=123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                dbConnection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// .......................</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>学习任何一门知识，不深入不专注都很难有所得。下面我们用<a href="https://github.com/icsharpcode/ILSpy">ILSpy</a>查看下程序的中间码：</p><div class="code-wrapper"><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.method private hidebysig static void Main (string[] args) cil managed &#123;&#x2F;&#x2F; Method begins at RVA 0x2050&#x2F;&#x2F; Header size: 12&#x2F;&#x2F; Code size: 35 (0x23).maxstack 1.entrypoint.locals init ([0] class [System.Data]System.Data.SqlClient.SqlConnection dbConnection)IL_0000: nopIL_0001: ldstr &quot;Server&#x3D;.;Database&#x3D;test;uid&#x3D;sa;pwd&#x3D;123&quot;IL_0006: newobj instance void [System.Data]System.Data.SqlClient.SqlConnection::.ctor(string)IL_000b: stloc.0.try&#123;IL_000c: nopIL_000d: ldloc.0IL_000e: callvirt instance void [System.Data]System.Data.Common.DbConnection::Open()IL_0013: nopIL_0014: nopIL_0015: leave.s IL_0022&#125; &#x2F;&#x2F; end .tryfinally&#123;IL_0017: ldloc.0IL_0018: brfalse.s IL_0021IL_001a: ldloc.0IL_001b: callvirt instance void [mscorlib]System.IDisposable::Dispose()IL_0020: nopIL_0021: endfinally&#125; &#x2F;&#x2F; end handlerIL_0022: ret&#125; &#x2F;&#x2F; end of method Program::Main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>可见 using 语句只是一个语法糖，背后还是依靠了传统的 try-finaly 结构。秘密在于：finally 语句块中调用了实例的<code>Dispose()</code>方法，以此保证了数据库连接始终能被释放。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>不要嵌套使用</p><p>不要嵌套使用 using 语句。否则，内层 using 块发生异常时，外层的对象资源将得不到释放。</p></li><li><p>捕获异常</p><p>using 语句只是对 try-finaly 结构的包装，无法 catch 异常。需要处理异常的场合，建议还是使用 try-catch-finaly ，示例如下。另外，不要在 try 语句中嵌套使用 using ，也不要在 using 语句中嵌套使用 try，因为都很难看！万事不必强求！！！</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>SqlClient</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Program</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">SqlConnection</span> dbConnection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">&#123;</span>                dbConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token string">"Server=.;Database=test;uid=sa;pwd=123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dbConnection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// ....</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span>            <span class="token punctuation">&#123;</span>                dbConnection<span class="token punctuation">?.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dbConnection<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ol>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>试试nameof表达式</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/%E8%AF%95%E8%AF%95nameof%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/%E8%AF%95%E8%AF%95nameof%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>nameof 是 C# 6.0新增的表达式，与 sizeof 不同， 它不是运算符。MSDN 上 关于 nameof 的介绍很简单，但作用却不简单。</p><p>nameof 用于获取变量、类型或成员的名称，可避免类名或属性名作为参数时使用 hardcode，以防后续重构困难。同时 nameof 也可部分代替反射，提高了程序的性能。下面介绍两个 nameof 的典型应用场景。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/nameof.png"></p><h2 id="属性通知"><a href="#属性通知" class="headerlink" title="属性通知"></a>属性通知</h2><p>MVVM 设计模式中，属性值改变时要触发相关事件，同时传递属性名称作为事件的参数，以告知 View 具体是哪个属性发生了变化，代码一般写在属性的 set 访问器中。原始写法和改进写法对比如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stock</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotifyPropertyChanged</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Price    <span class="token punctuation">&#123;</span>     <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">set</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token string">"UserName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 原始写法使用了hardcode</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 改进写法可被同步改名</span>    _price <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> propertyName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>PropertyChanged<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler</span> PropertyChanged<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用 hardcode 的原始写法存在两个明显弊端：</p><ol><li><p>排错难</p><p>若将字符串字面量<code>&quot;Price&quot;</code>误写成<code>&quot;Priec&quot;</code>，编译能通过，运行后还是无法实现通知功能。这类错误往往很难排查。</p></li><li><p>重构烦</p><p>当修改属性名时应同步修改对应的字符串参数，改多了就容易遗漏，当然一个一个改起来本身就很繁琐。</p></li></ol><h2 id="数据库字段映射"><a href="#数据库字段映射" class="headerlink" title="数据库字段映射"></a>数据库字段映射</h2><p>使用 Dapper 这类 ORM 框架时，SQL 语句中的表名和字段名应与对应 POCO 类的类名和属性名一致，否则无法建立映射关系。以往做法是写死 SQL 语句中的表名和字段名，造成后期维护麻烦，比如：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">var</span> <span class="token keyword">record</span> <span class="token operator">=</span> DbConnection<span class="token punctuation">.</span><span class="token function">QueryFirstOrDefault</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"SELECT TOP 1 FROM Stock WHERE Name=</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">tesla<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>上例中，表名 Tesla 和 字段名 Name 都是写死的。后期若要重构 POCO 类，逐条修改 SQL 语句要累成狗。使用 nameof 改成以下写法，按按【Ctrl+R+R】轻松搞定，高下立判！</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">var</span> <span class="token keyword">record</span> <span class="token operator">=</span> DbConnection<span class="token punctuation">.</span><span class="token function">QueryFirstOrDefault</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"SELECT TOP 1 FROM </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Stock<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> WHERE </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>Stock<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">tesla<span class="token punctuation">.</span>Name</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="非完全限定名"><a href="#非完全限定名" class="headerlink" title="非完全限定名"></a>非完全限定名</h2><p>nameof 返回的是非完全限定名，如果需要完全限定名就只能靠反射了，这点需要留意。</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Console<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 Console</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">)</span><span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 System.Console</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>托管代码简介</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/%E6%89%98%E7%AE%A1%E4%BB%A3%E7%A0%81%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>托管代码运行于CLR之上，CLR即<strong>通用语言运行平台</strong>，也叫<strong>通用语言运行时</strong>。作为一个平台，CLR提供了以下主要功能：</p><ul><li>实时编译JIT</li><li>垃圾回收GC</li><li>程序集加载</li><li>提供基础类库</li><li>内存管理</li><li>线程管理</li><li>异常管理</li><li>安全管理</li><li>类型安全检查</li><li>调试引擎</li></ul><p>托管代码实际就是中间语言（MSIL）代码，这些代码无法被CPU直接执行，这是与机器码（native code）的最大区别。编译器生成的托管代码应用程序或链接库被称为程序集，当程序集运行加载时，由CLR将程序集中的托管代码实时转换成机器码，此过程称为“实时编译JIT”。这样做虽然显得大费周章，同时不可避免地造成了效率下降，但是带来跨平台等多个好处。首次编译生成的机器码将被保留在内存中，后续再次执行同一程序集将无需重复编译。程序集生成、执行流程如下图：</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/%25E7%25A8%258B%25E5%25BA%258F%25E9%259B%2586%25E7%2594%259F%25E6%2588%2590%25E3%2580%2581%25E6%2589%25A7%25E8%25A1%258C%25E6%25B5%2581%25E7%25A8%258B1.jpg" alt="程序集生成、执行流程1"></p><p> .NET Framework与CLR不一定一起更新。 例如，2.0、3.0 和 3.5版的 .NET Framework 都使用了 2.0版CLR 。 下表展示了 .NET Framework 与 CLR 的对应关系。</p><table><thead><tr><th align="left">.NET版本</th><th align="left">CLR版本</th><th align="left">CLR文件</th></tr></thead><tbody><tr><td align="left">1.1</td><td align="left">1.1</td><td align="left">mscorwks.dll</td></tr><tr><td align="left">2.0</td><td align="left">2.0</td><td align="left">mscorwks.dll</td></tr><tr><td align="left">3.0</td><td align="left">2.0</td><td align="left">mscorwks.dll</td></tr><tr><td align="left">3.5</td><td align="left">2.0</td><td align="left">mscorwks.dll</td></tr><tr><td align="left">4.0</td><td align="left">4.0</td><td align="left">clr.dll</td></tr><tr><td align="left">4.5</td><td align="left">4.0</td><td align="left">clr.dll</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stylet框架非官方中文文档</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/Stylet%E6%A1%86%E6%9E%B6%E9%9D%9E%E5%AE%98%E6%96%B9%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/Stylet%E6%A1%86%E6%9E%B6%E9%9D%9E%E5%AE%98%E6%96%B9%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>Stylet 是一款非常优秀的 MVVM 框架，配套 wiki 写的也很棒。为了让更多的人熟悉这款框架，同时也给自己一个全面学习 Stylet 的机会，笔者决定将其 wiki 译成中文。限于外语水平和专业知识有限，难免出现不到和纰漏之处，望读者海涵。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Stylet是一款小巧又强大的 MVVM 框架，它的诞生受到了<a href="http://caliburnmicro.com/">Caliburn.Micro</a>的启发。开发本框架的意图是尽量降低 MVVM 的复杂性和神秘性，让菜鸟也能快速上手。</p><p>Stylet 的部分功能是 Caliburn.Micro 不具备的，比如：IoC  容器、简单的 ViewModel 验证，兼容 MVVM 的消息框（译者注：方便单元测试）。</p><p>Stylet 项目源码经过全面的单元测试，LOC 指标优秀，非常适合一些由于使用和验证 SOUP 导致开销很大的项目。得益于模块化的设计，本框架提供功能可按需引入。</p><blockquote><p>Stylet is a minimal, but powerful, MVVM framework inspired by <a href="http://caliburnmicro.com/">Caliburn.Micro</a>. Its intention is to cut down on the complexity and magic even further, to allow people (coworkers) unfamiliar with any MVVM framework to get up to speed more quickly.</p><p>It also provides features not available in Caliburn.Micro, including its own IoC container, easy ViewModel validation, and even an MVVM-compatible MessageBox.</p><p>The low LOC count and very comprehensive test suite makes it an attractive option for projects where using and validating&#x2F;verifying SOUP comes with a high overhead, which its modular toolkit-inspired architecture means it’s easy to use just the bits you like, or replace the bits you don’t.</p><p>A brief feature list is shown below. Follow the links on the right to learn more.</p></blockquote><h2 id="ViewModel-优先模式"><a href="#ViewModel-优先模式" class="headerlink" title="ViewModel 优先模式"></a>ViewModel 优先模式</h2><p>经典 MVVM 架构通常使用View优先的模式，该模式中由 View 隐式实例化 ViewModel，ViewModel 一般不被显式实例化。Stylet 反其道而行之，先实例化 ViewModel 再用 ViewModel 附加 View，形成了独具一格的ViewModel 优先模式。这样做最明显的好处是方便组织 ViewModel。</p><blockquote><p>The classic MVVM structure, where a view knows how to instantiate its ViewModel, and ViewModels typically don’t communicate directly, is known as View-first. However, reversing this pattern - instantiating the ViewModels yourself and having the Views automatically attached - provides many advantages, allowing you to compose your ViewModels in a way which should feel very familiar. This ViewModel-first approach is the only one supported by Stylet.</p></blockquote><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><p>WPF 的 ICommand 接口很强大但也很笨重，譬如按钮点击动作用属性来实现而不是用方法，也不怎么符合直觉。 通过前端 XAML 动作绑定：<code>&lt;Button Command=&quot;&#123;s:Action DoSomething&#125;&quot;/&gt;</code>，按钮被点击时将调用 ViewModel 中定义好的 <code>DoSomething()</code>方法。另外，还可创建一个名为 <code>CanDoSomething</code> 的监视属性用于判断该方法是否可被执行。事件也可绑定动作，比如为<code>MouseEnter</code>事件绑定动作：<code>&lt;Button MouseEnter=&quot;&#123;s:Action DoSomethingElse&#125;&quot;/&gt;</code>。</p><blockquote><p>The ICommand interface used by WPF is powerful, but clunky when used in an MVVM architecture. It doesn’t seem right that actions to be taken by your ViewModel in response to things like button clicks should be represented as properties, rather than methods. A simple <code>&lt;Button Command=&quot;&#123;s:Action DoSomething&#125;&quot;/&gt;</code> will cause <code>DoSomething()</code> on your ViewModel to be called every time the button is clicked. Additionally, if you have a bool property called <code>CanDoSomething</code>, that will be observed and used to tell whether the button should be enabled or disabled.</p><p>Actions also work with events, allowing you to do things like <code>&lt;Button MouseEnter=&quot;&#123;s:Action DoSomethingElse&#125;&quot;/&gt;</code>.</p></blockquote><h2 id="页面和页面管理器"><a href="#页面和页面管理器" class="headerlink" title="页面和页面管理器"></a>页面和页面管理器</h2><p>Screen 是 ViewModel 的基类，其本身实现了很多功能：事件通知、ViewModel 校验、生命周期管理（何时显示、隐藏、关闭窗口及确定窗口能否被关闭）。</p><blockquote><p> The Screen class provides many things which make it an attractive base class for your ViewModels: PropertyChanged notifications, validation, and the ability to be notified when it’s shown&#x2F;hidden&#x2F;closed, and the ability to control if and when it can be closed.</p></blockquote><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><p>类似于 Caliburn.Micro 的事件总线，订阅者直接从总线上获取某事件而无需了解该事件发布者的信息。事件总线有很多应用场景，比如 ViewModel 间传递消息。</p><blockquote><p> Stylet’s Event Aggregator is very similar to Caliburn.Micro’s, and allows subscribers to receive messages from publishes without either having knowledge of, or retaining, the other. This is particularly useful for messaging between ViewModels, although it has plenty of other uses.</p></blockquote><h2 id="窗口管理器"><a href="#窗口管理器" class="headerlink" title="窗口管理器"></a>窗口管理器</h2><p>窗口具体实现了 Stylet 的 ViewModel 优先模式，还实现了兼容 MVVM 的消息框。</p><blockquote><p>With a ViewModel-first approach, you display windows and dialogs by referencing the ViewModel to display, and the View gets attached automatically. The WindowManager allows this to be done with ease.</p><p>An MVVM-compatible MessageBox implementation is also provided, so you don’t have to roll your own.</p></blockquote><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>在传统 MVVM 架构下，校验 ViewModel 需要大量的模板文件，而且相关资源都是松散的。Stylet 有一个专门用于校验的框架，该框架还支持自定义校验库（比如： <a href="https://fluentvalidation.codeplex.com/">FluentValidation</a>）。</p><blockquote><p>Validation in MVVM is traditionally a bit of a pain: it requires a fair amount of boilerplate in each ViewModel that requires validation, and resources on how to do this well are sparse.</p><p>Stylet comes with a framework for taking your favourite validation library (e.g. <a href="https://fluentvalidation.codeplex.com/">FluentValidation</a>) and handles running validations and reporting the results to the View.</p></blockquote><h2 id="StyletIoC-容器"><a href="#StyletIoC-容器" class="headerlink" title="StyletIoC 容器"></a>StyletIoC 容器</h2><p>Stylet 提供了一个强大、快速、轻量且易于使用的 IoC 容器。</p><blockquote><p>Stylet comes with its own lightweight and extremely fast (but still powerful) IoC container, although it’s easy to use another one if you’d prefer.</p></blockquote><h2 id="MIT-许可"><a href="#MIT-许可" class="headerlink" title="MIT 许可"></a>MIT 许可</h2><p>Stylet 使用 MIT 许可，该许可证允许您自行修改 Stylet 并将其用于商业用途，无归属者（唯一的限制是您必须包含本许可的副本）。 若有需要，我们愿意根据具体情况重新许可。</p><blockquote><p>Stylet is distributed under the MIT license, which allows you to modify Stylet, and include it in commercial projects, without attributation (the only restriction being that you must include a copy of the license). I’m open to re-licensing it on a case-by-case basis if you require this.</p></blockquote><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><p>想要上手试一下吗？那么请往下看吧！下面将创建一个简单的脚手架项目。</p><p><em><strong>注意</strong>：本项目的 git 仓库包含示例代码，可自行下载学习。</em></p><blockquote><p>Want to get up and running as quickly as possible? This is the right place!</p><p><em>NOTE: If you’re looking for example applications, download the source code and look in the Samples folder.</em></p><p>The following instructions will set up a minimal skeleton project.</p></blockquote><h2 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h2><h3 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h3><p><em><strong>注意</strong>：VS2013 及之前的版本不支持自动安装 Nuget 包，若有需要请手动安装。</em></p><p>如果您刚接触 Stylet，最简单的上手步骤如下：</p><ol><li>打开Visual Studio，创建一个 WPF 项目；</li><li>通过 NuGet 包管理器（右键项目 -&gt;管理 Nuget 包）安装<code>Stylet.Start</code>。</li><li>项目创建成功后，可删除 <code>Stylet.Start</code> 包。</li></ol><blockquote><p><strong>Note</strong>: This will <strong>not</strong> work if your project uses <strong>PackageReference</strong> for NuGet packages or if you are using VS2013 or earlier. Follow the “Manual Option” section below instead.</p><p>If you’re new to Stylet (and you’re running VS2015 or later), this is the easiest way to get started.</p><ol><li>Open Visual Studio, and create a new <code>WPF Application</code> project.</li><li>Open NuGet (right-click your project -&gt; Manage NuGet Packages), and install the <code>Stylet.Start</code> package.</li></ol><p>This will give you a working skeleton project.</p><p>When it has finished installing, uninstall Stylet.Start.</p><p>Happy coding!</p></blockquote><h3 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h3><p>建议通过 <code>dotnet new</code>命令使用 Stylet 模板创建  .NET Core 脚手架项目。</p><p>在项目目录打开命令行，输入命令安装 Stylet 模板：</p><div class="code-wrapper"><pre class="line-numbers language-pow" data-language="pow"><code class="language-pow">dotnet new -i Stylet.Templates<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>根据新安装的模板创建项目：</p><div class="code-wrapper"><pre class="line-numbers language-pow" data-language="pow"><code class="language-pow">dotnet new stylet -o MyStyletProject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><blockquote><p>For .NET Core projects, the quickest way to get started is by using <code>dotnet new</code> with Stylet’s template.</p><p>Open a command window where you want to create your new project, and install the Stylet templates using:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">dotnet new -i Stylet.Templates<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>Then create a new project with:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">dotnet new stylet -o MyStyletProject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>(changing <code>MyStyletProject</code> as appropriate).</p></blockquote><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>如果您想手动创建项目，步骤如下：</p><ol><li>打开 Visual Studio，创建一个 WPF 项目；</li><li>通过 NuGet 包管理器（右键项目 -&gt;管理 Nuget 包）安装<code>Stylet</code>包。</li></ol><p>删除<code>MainWindow.xaml</code>和<code>MainWindow.xaml.cs/vb</code>这些以后用不到的文件。接着右键项目，新增一个名为<code>RootView</code>的 WPF 窗口，前端示例代码如下：</p><blockquote><p>If you don’t want to use the <code>Stylet.Start</code> package and would prefer to create your own skeleton project, follow the instructions in this section.</p><ol><li>Open Visual Studio, and create a new <code>WPF Application</code> project.</li><li>Open NuGet (right-click your project -&gt; Manage NuGet Packages), and install the <code>Stylet</code> package.</li></ol><p>First off, delete <code>MainWindow.xaml</code> and <code>MainWindow.xaml.cs/vb</code>. You won’t be needing them.</p><p>Next, you’ll need a root View and a ViewModel. The View has to be a <code>Window</code>, but there are no other restrictions.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stylet.Samples.Hello.RootView<span class="token punctuation">"</span></span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBlock</span><span class="token punctuation">></span></span>Hello, World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TextBlock</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>新建一个名为<code>RootViewModel</code>的 ViewModel 类。</p><blockquote><p>The ViewModel can be any old class (for now - you might want it to be a <a href="https://github.com/canton7/Stylet/wiki/Screens-and-Conductors">Screen or Conductor</a>).</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class RootViewModel&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>引导器类的基本职责是实例化主窗口的 ViewModel，诸如 IoC 容器等其它功能详见后续章节。</p><blockquote><p>Next, you’ll need a bootstrapper. For now, you don’t need anything special - just something to identify your root ViewModel. Later, you’ll be able to configure your IoC container here, as well as other application-level stuff.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class Bootstrapper : Bootstrapper&lt;RootViewModel&gt;&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>删除<code>App.xaml</code>中的<code>StartUri</code>特性并引入 Stylet 命名空间后，通过该命名空间下的<code>ApplicationLoader</code>元素以加载资源的方式实例化引导器类，示例代码如下：</p><blockquote><p>Finally, this needs to be referenced as a resource in your <code>App.xaml</code>. You’ll need to remove the <code>StartUri</code> attribute, and add <code>xmlns</code> entries for Stylet and your own application. Finally, you’ll need to add Stylet’s <code>ApplicationLoader</code> to the resources, and identify the bootstrapper you created above.</p><p>It should look something like this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-<Application" data-language="<Application"><div class="caption"><span>x:Class</span></div><code class="language-<Application">             xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;             xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;             xmlns:s&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;canton7&#x2F;Stylet&quot;             xmlns:local&#x3D;&quot;clr-namespace:Stylet.Samples.Hello&quot;&gt;    &lt;Application.Resources&gt;       &lt;s:ApplicationLoader&gt;            &lt;s:ApplicationLoader.Bootstrapper&gt;                &lt;local:Bootstrapper&#x2F;&gt;            &lt;&#x2F;s:ApplicationLoader.Bootstrapper&gt;        &lt;&#x2F;s:ApplicationLoader&gt;    &lt;&#x2F;Application.Resources&gt;&lt;&#x2F;Application&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>好了，可以运行程序了！</p><blockquote><p>That’s it! Run that, and you should get a window with ‘Hello World’ in it.</p></blockquote><h2 id="应用程序装载器"><a href="#应用程序装载器" class="headerlink" title="应用程序装载器"></a>应用程序装载器</h2><p>上述<code>&lt;s:ApplicationLoader&gt;</code>元素用于加载 Stylet 内置的资源，此类继承自资源字典类 ResourceDictionary ，用法如下：</p><blockquote><p>It’s worth noting that <code>&lt;s:ApplicationLoader&gt;</code> above is a ResourceDictionary subclass. This allows it to load in Stylet’s built-in resources (see <a href="https://github.com/canton7/Stylet/wiki/Screens-and-Conductors">Screens and Conductors</a>). You can choose not to load Stylet’s resources like this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader</span> <span class="token attr-name">LoadStyletResources</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>False<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p><code>&lt;s:ApplicationLoader&gt;</code>元素也可用来创建不属于Stylet 的应用程序级资源或资源字典，用法如下：</p><blockquote><p>If you want to add your own Resources &#x2F; ResourceDictionaries to the Application, the simplest way is like this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>Bootstrapper</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Style</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyResourceKey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader.MergedDictionaries</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary</span> <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyResourceDictionary.xaml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader.MergedDictionaries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application.Resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以上代码也写成如下习惯形式：</p><blockquote><p>If this makes you uncomfortable for some reason, you can also do this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary.MergedDictionaries</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>Bootstrapper</span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary</span> <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyResourceDictionary.xaml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ResourceDictionary.MergedDictionaries</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Style</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyResourceKey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ResourceDictionary</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application.Resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="引导器"><a href="#引导器" class="headerlink" title="引导器"></a>引导器</h1><p>引导器负责引导应用程序，可完成多项任务，其中两项基本任务如下：</p><ol><li>配置 IoC 容器</li><li>通过窗口管理器实例化根 ViewModel</li></ol><p>引导器类 BootStrapper 有两种父类：</p><ol><li><p>BootstrapperBase<TRootViewModel></p><p>使用自定义的 IoC 容器</p></li><li><p>Bootstrapper<TRootViewModel></p><p>使用默认的 IoC 容器，示例代码如下：</p></li></ol><blockquote><p>The bootstrapper is responsible for bootstrapping your application. It configures the IoC container, creates a new instance of your root ViewModel and displays it using the <code>WindowManager</code>. It also provides various other functions, described below.</p><p>The bootstrapper comes in two flavours: <code>BootstrapperBase&lt;TRootViewModel&gt;</code>, which requires you to configure the IoC container yourself, and <code>Bootstrapper&lt;TRootViewModel&gt;</code>, which uses Stylet’s built-in IoC container, StyletIoC.</p><p>Example bootstrapper, using StyletIoC:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Bootstrapper : Bootstrapper&lt;MyRootViewModel&gt;&#123;   protected override void OnStart()   &#123;      &#x2F;&#x2F; This is called just after the application is started, but before the IoC container is set up.      &#x2F;&#x2F; Set up things like logging, etc   &#125;    protected override void ConfigureIoC(IStyletIoCBuilder builder)   &#123;      &#x2F;&#x2F; Bind your own types. Concrete types are automatically self-bound.      builder.Bind&lt;IMyInterface&gt;().To&lt;MyType&gt;();   &#125;    protected override void Configure()   &#123;      &#x2F;&#x2F; This is called after Stylet has created the IoC container, so this.Container exists, but before the      &#x2F;&#x2F; Root ViewModel is launched.      &#x2F;&#x2F; Configure your services, etc, in here   &#125;    protected override void OnLaunch()   &#123;      &#x2F;&#x2F; This is called just after the root ViewModel has been launched      &#x2F;&#x2F; Something like a version check that displays a dialog might be launched from here   &#125;    protected override void OnExit(ExitEventArgs e)   &#123;      &#x2F;&#x2F; Called on Application.Exit   &#125;    protected override void OnUnhandledException(DispatcherUnhandledExceptionEventArgs e)   &#123;      &#x2F;&#x2F; Called on Application.DispatcherUnhandledException   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="自定义-IoC-容器"><a href="#自定义-IoC-容器" class="headerlink" title="自定义 IoC 容器"></a>自定义 IoC 容器</h2><p>使用自定义 IoC 容器很简单，官方 git 仓库也提供了多个 IoC 容器供您选择。这些容器都经过了全面的单元测试。</p><p>由于管理多个 IoC 容器很麻烦，同时为了减少依赖， 本框架的发布包只内置一个 IoC 容器。若您需要使用其它容器，可从官方 git 仓库下载后手动添加引用。使用方法见上一章，示例代码如下：</p><blockquote><p>Using another IoC container with Stylet is easy. I’ve included bootstrappers for a number of popular IoC containers in the <a href="https://github.com/canton7/Stylet/tree/master/Bootstrappers">Bootstrappers project</a>. These are all unit-tested but not battle-tested: feel free to customize them.</p><p>Note that the Stylet nuget package &#x2F; dll don’t include these, as it would add unnecessary dependencies. Similarly, I don’t publish IoC container-specific packages, as that’s a waste of effort.</p><p>Copy the bootstrapper you want from the above link into your project somewhere. Then subclass it, as you would normally subclass <code>Bootstrapper&lt;TRootViewModel&gt;</code>, documented above. Then add your subclass to your App.xaml.cs, as documented in <a href="https://github.com/canton7/Stylet/wiki/Quick-Start">Quick Start</a>, e.g.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Bootstrapper : AutofacBootstrapper&lt;ShellViewModel&gt;&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Stylet.Samples.Hello.App<span class="token punctuation">"</span></span>             <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/canton7/Stylet<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>local</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clr-namespace:Stylet.Samples.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application.Resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>Bootstrapper</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application.Resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="添加资源字典"><a href="#添加资源字典" class="headerlink" title="添加资源字典"></a>添加资源字典</h2><p>由于<code>s:ApplicationLoader </code>本身就是资源字典，如果再想添加其它资源字典，就必须与<code>s:ApplicationLoader</code>一起嵌套在合并资源字典<code>MergedDictionaries</code>中，示例代码如下：</p><blockquote><p>s:ApplicationLoader is itself a ResourceDictionary. If you need to add your own resource dictionary to App.xaml, you will have to nest s:ApplicationLoader inside your ResourceDictionary as a MergedDictionary, like this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Application.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary.MergedDictionaries</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">local:</span>Bootstrapper</span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader.Bootstrapper</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">s:</span>ApplicationLoader</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ResourceDictionary</span> <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>YourDictionary.xaml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ResourceDictionary.MergedDictionaries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ResourceDictionary</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Application.Resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="ViewModel-优先"><a href="#ViewModel-优先" class="headerlink" title="ViewModel 优先"></a>ViewModel 优先</h1><p>ViewModel 优先是 Stylet 框架的一大特点，其相对于传统的View优先更显自然。</p><blockquote><p>The ViewModel-first approach is one that’s crucial to Stylet’s architecture, but unintuitive if you learnt MVVM in the traditional View-first manner.</p><p>Hopefully this article will make everything clear.</p></blockquote><h2 id="View优先"><a href="#View优先" class="headerlink" title="View优先"></a>View优先</h2><p>让我们先了解一下什么是 View优先。该模式下视图必须了解 ViewModel 的详细情况，但反过来 ViewModel 可以不知 View 的信息。将两者联系到一起的常用方法是：在 View 的后台代码中实例化 ViewModel ，并赋给 View 的<code>DataContent</code>属性。</p><blockquote><p>Let’s start by defining the View-first approach, and what exactly I mean by that. MVVM states that the ViewModel should know nothing about the View, but that View should be aware of the ViewModel. The obvious way to attach a View and ViewModel, then, is have the View construct its ViewModel in its codebehind - something like this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public partial class MyView : Window&#123;   public MyView()   &#123;      InitializeComponent();       this.DataContext &#x3D; new MyViewModel();   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>目前看起来都还不错！但当 View 创建了其它 View，并需按层次关系组合这些被创建的 View 时，危机来到了。一个很典型场景是窗口 View 创建了标题栏 View 和工作区 View。</p><blockquote><p>This is fine. Views can create and own other views, meaning that you can compose your views into a hierarchy. All well and good.</p><p>The crunch comes when you’ve composed a couple of views, say something like this, where a shell contains a top bar and a frame, inside which any page can be shown:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- This is a window which contains a top bar and another page --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.ShellView<span class="token punctuation">"</span></span> <span class="token attr-name">....</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">my:</span>TopBarView</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Frame</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigationFrame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>三者都有各自的 ViewModel 。当标题栏 View 的某些字段变化了，比如标题改变了，窗口的 ViewModel 可以得知上述变化，但标题栏 ViewModel 却不知道。常用做法是在窗口标题栏的前端代码中，将窗口标题绑定到窗口本身的某个依赖属性上，示例代码如下：</p><blockquote><p>where <code>TopBarView</code> has its own ViewModel, <code>TopBarViewModel</code>. Fine.</p><p>Now say that <code>TopBarView</code> has a field containing some data you want to update, for example the title of the current page. Now, the <code>ShellViewModel</code> knows this (it’s decided what the current page is, after all), but the <code>TopBarViewModel</code> doesn’t (how would it? It doesn’t really know about anything). The temptation is to expose a dependency property on the <code>TopBarView</code> and bind it into the <code>ShellViewModel</code>, like so:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.ShellView<span class="token punctuation">"</span></span> <span class="token attr-name">....</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rootObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">my:</span>TopBarView</span> <span class="token attr-name">CurrentPageTitle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding CurrentPageTitle, ElementName=rootObject&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Frame</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigationFrame<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>后续标题栏的其它属性或者工作区的属性也许也要如此操作一番，简直太麻烦了。</p><p>另一个主要问题发生在显示窗口和对话框时，此问题也是传统 MVVM 模型中的一个痛点。在 ViewModel 中实例化并显示相应的 View 不便于单元测试，更好一点的选择是在主视图的后台代码中实例化并显示某个子视图，后续通过某种方式将创建的子视图与其子视图模型结合起来。</p><p><code>Frame</code>元素的内容需先实例化一个 View ，该由窗口的 ViewModel 还是 View 实例化这个 View 呢？</p><p>总之，View优先弊端很多。</p><blockquote><p>but that’s just nasty. You’ve now got one-and-a-bit views bound to the <code>ShellViewModel</code>.</p><p>Another major concern is displaying windows and dialogs. In traditional MVVM, this is a bit of a pain. One option is to instantiate and display the View (using <code>Show()</code> or <code>ShowDialog()</code>) from inside the ViewModel (which makes it, or at least that bit of it, untestable). The better option is to instantiate the View you want to display in the codebehind of your View, and show it from there. This means you need to establish ways of telling to View to display this dialog, and a way of getting the results of the dialog back to the ViewModel.</p><p>Indeed, setting the content for the <code>Frame</code> above requires instantiating a View to put in it. This has the same dilemma - either the ViewModel instantiates it (making it untestable), or the View does (leading to communication pain).</p><p>Either way, this approach has some nastiness.</p></blockquote><h2 id="ViewModel-优先-1"><a href="#ViewModel-优先-1" class="headerlink" title="ViewModel 优先"></a>ViewModel 优先</h2><p>该模式下， ViewModel 不由 View 来实例化， ViewModel 也无需知道与其对应 View 的存在。一个第三方服务将通过命名约定的方式匹配相关联的 View 和 ViewModel （比如根据 MainView 去搜寻 MainViewModel ），匹配成功后继续由该服务实例化 ViewModel ，然后将其赋给对应 View 的 <code>DataContext </code>属性。详见后续章节。</p><blockquote><p>The ViewModel-first approach accepts that a ViewModel shouldn’t know anything about its View, but does not accept that the View should be responsible for constructing the ViewModel either. Instead, a third service is responsible for locating the correct View for a given ViewModel, and setting up its DataContext correctly.</p><p>The default implementation uses naming conventions to locate the correct View for a given ViewModel, replacing ‘ViewModel’ with ‘View’ in its name. That’s explained in more detail in <a href="https://github.com/canton7/Stylet/wiki/The-ViewManager">The ViewManager</a>.</p><p><strong>This allows ViewModels to be created by other ViewModels. Which allows ViewModels to know about, and own, other ViewModels. Which allows you to compose your ViewModels properly.</strong></p><p>There’s another part of this trick, which is best explained by example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class ShellViewModel&#123;   public TopBarViewModel TopBar &#123; get; private set; &#125;   &#x2F;&#x2F; Stuff to instantiate and assign TopBarViewModel&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.ShellView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/canton7/Stylet<span class="token punctuation">"</span></span> <span class="token attr-name">.....</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentControl</span> <span class="token attr-name"><span class="token namespace">s:</span>View.Model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding TopBar&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment">&lt;!-- ... --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>附加属性<code>View.Model</code>将会实例化其绑定 ViewModel 的实例（本例中是<code>TopBarViewModel</code>的实例）并作为ContentControl元素的内容，然后即可定位到正确的 View（本例中是 <code>TopBarView</code>）。</p><p>诀窍在于<code>TopBarView</code>可以根据命名约定找到对应的<code>TopBarViewModel</code>，<code>TopBarViewModel</code>也可以被<code>ShellViewModel</code>知会。问题解决了！</p><blockquote><p>The <code>View.Model</code> attached property will fetch the ViewModel it’s bound to (in this case it’s an instance of <code>TopBarViewModel</code>), and locate the correct view (<code>TopBarView</code>). It will instantiate an instance, and set it as the content of that <code>ContentControl</code>.</p><p>The upshot is that the <code>TopBarView</code> can get the name of the current page from its <code>TopBarViewModel</code>, and the <code>TopBarViewModel</code> can be told this by the <code>ShellViewModel</code>. Problem solved!</p><p>The <code>ContentControl</code> trick also works well for navigation:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.ShellView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/canton7/Stylet<span class="token punctuation">"</span></span> <span class="token attr-name">.....</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>StackPanel</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentControl</span> <span class="token attr-name"><span class="token namespace">s:</span>View.Model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding TopBar&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentControl</span> <span class="token attr-name"><span class="token namespace">s:</span>View.Model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding CurrentPage&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>StackPanel</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Window</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>当多页面窗口应用程序切换页面时，由主窗口的 ViewModel 实例化页面的 ViewModel ，并将该实例赋值给主窗口 ViewModel 的的<code>CurrentPage</code>属性。主窗口的 ViewModel 不必知道如何得到页面的 View。窗口管理器会以大致相同的方式处理对话框应用程序和窗口应用程序，在获得某个 ViewModel 实例后将由其显示对应的窗口 View 或对话框 View。</p><blockquote><p>The <code>ShellViewModel</code> will then navigate to a new page by instantiating a new instance of that page’s <code>ViewModel</code>, and assigning it to the property <code>CurrentPage</code>. Note how the <code>ShellViewModel</code> no longer needs to know anything about views. <em>It hasn’t had to instantiate a single view</em>. This is a very important, useful, and powerful point.</p><p>Dialogs and Windows are handled in much the same way by <a href="https://github.com/canton7/Stylet/wiki/The-WindowManager">The WindowManager</a>. This takes a given ViewModel instance, and displays its View as a dialog or window.</p></blockquote><h2 id="删除后台代码"><a href="#删除后台代码" class="headerlink" title="删除后台代码"></a>删除后台代码</h2><p>在 ViewModel 优先模式下，通过动作、转换器、附加属性、附加行为几乎可以实现所有功能，View 的后台代码也就没有存在的必要了。强烈建议您删除 View 的后台代码文件，<code>InitializeComponent</code>方法会由 Stylet 替您调用。</p><p><em><strong>注意</strong>：VB.NET中不建议删除后台代码。</em></p><blockquote><p>With this approach in place, there’s nothing you actually need to do in the codebehind. You can of course do so, but there’s very little you can’t solve with <a href="https://github.com/canton7/Stylet/wiki/Actions">Actions</a> (for handling events), Converters, Attached Properties, and (most importantly) Attached Behaviors.</p><p>Stylet lets you delete the codebehind entirely (it will call <code>InitializeComponent</code> for you), and you are strongly encouraged to do so. Delete the codebehind!</p><p><em><strong>Note</strong>: If you’re using VB.NET, sometimes your XAML namespaces will stop working if you delete the codebehind. If this is the case, simply recreate the codebehind with the matching filename, give it the correct namespace and class and then leave the remainder blank. For example, <code>MyView.xaml.vb</code> :</em></p></blockquote><h1 id="动作-1"><a href="#动作-1" class="headerlink" title="动作"></a>动作</h1><p>点击按钮后调用 ViewModel 定义的方法，动作适用于诸如此场景。</p><blockquote><p>You have a button, and you want to click it and execute a method on your ViewModel? Actions cover this use-case.</p></blockquote><h2 id="动作和方法"><a href="#动作和方法" class="headerlink" title="动作和方法"></a>动作和方法</h2><p>WPF 中命令绑定步骤为：ViewModel 实现<code> ICommand</code>接口后将按钮的 Command 特性绑定到 ViewModel 的某个属性。尽管看起来有点混乱，这种机制其实也不错，至少 ViewModel 无需了解 View且View 的后台代码也可删除。但最好还是直接调用方法而不是通过某个属型间接调用。Stylet 引入了动作来解决这个问题，示例代码如下：</p><blockquote><p>In ‘traditional’ WPF, you’d create a property on your ViewModel which implements the <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.icommand(v=vs.110).aspx">ICommand</a> interface, and bind your button’s Command attribute to it. This works fairly well (the ViewModel knows nothing about the View, and code-behind is not required), but it’s a bit messy - you really want to be calling a method on your ViewModel, not executing a method on some property.</p><p>Stylet solves this by introducing Actions. Look at this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class ViewModel : Screen&#123;   public void DoSomething()   &#123;      Debug.WriteLine(&quot;DoSomething called&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserControl</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.View<span class="token punctuation">"</span></span>             <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/canton7/Stylet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action DoSomething&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserControl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>上例中点击按钮后将直接调用<code>DoSomething </code>方法，多么简单！CommandParameter 特性还可用来给方法传递一个参数，示例代码如下：</p><blockquote><p>As you might have guessed, clicking the button called the DoSomething method on the ViewModel to be called.</p><p>It’s that simple.</p><p>If your method accepts a single argument, the value of the button’s CommandParameter property will be passed. For example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class ViewModel : Screen&#123;   public void DoSomething(string argument)   &#123;      Debug.WriteLine(String.Format(&quot;Argument is &#123;0&#125;&quot;, argument));   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserControl</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.View<span class="token punctuation">"</span></span>             <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/canton7/Stylet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action DoSomething&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">CommandParameter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserControl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>注意：动作也适用于任何 ICommand 类型的属性，比如 KeyBinding 属性。</p><blockquote><p>Note that Actions also work on any ICommand property, on anything (e.g. a <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.keybinding(v=vs.110).aspx">KeyBinding</a>).</p></blockquote><h2 id="守卫属性"><a href="#守卫属性" class="headerlink" title="守卫属性"></a>守卫属性</h2><p>1111</p><blockquote><p>You can also control whether you button is enabled just as easily, using <em>Guard Properties</em>. A guard property for a given method is a boolean property which has the name “Can<method name>“, so if your method is called “DoSomething”, the corresponding guard property is called “CanDoSomething”.</p><p>Stylet will check whether a guard property exists, and if so, will disable the button if it returns false, or enable it if it returns true. It will also watch for PropertyChanged notifications for that property, so you can change whether the button is enabled.</p><p>For example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class ViewModel : Screen&#123;   private bool _canDoSomething;   public bool CanDoSomething   &#123;      get &#123; return this._canDoSomething; &#125;      set &#123; this.SetAndNotify(ref this._canDoSomething, value); &#125;   &#125;   public void DoSomething()   &#123;      Debug.WriteLine(&quot;DoSomething called&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>Stylet 也支持事件绑定，语法同命令绑定，但是事件绑定不涉及守卫属性的概念。</p><blockquote><p>But what about if you want to call a ViewModel method when an event occurs? Actions have that covered as well. The syntax is exactly the same, although there’s no concept of a guard property here.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserControl</span> <span class="token attr-name"><span class="token namespace">x:</span>Class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyNamespace.View<span class="token punctuation">"</span></span>             <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">xmlns:</span>s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/canton7/Stylet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action DoSomething&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserControl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>绑定事件的方法可以没有形参，也可以有一个或两个形参，方法的签名可能如下：</p><blockquote><p>The method which is called must have zero, one, or two parameters. The possible signatures are:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public void HasNoArguments() &#123; &#125; &#x2F;&#x2F; This can accept EventArgs, or a subclass of EventArgspublic void HasOneSingleArgument(EventArgs e) &#123; &#125; &#x2F;&#x2F; Again, a subclass of EventArgs is OKpublic void HasTwoArguments(object sender, EventArgs e) &#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h2><p>动作通常不关心方法的返回类型和返回值，但返回 Task 是个例外。</p><blockquote><p>Actions don’t care about the return type of the method, and the returned value is discarded.</p><p>The exception to this is if a <code>Task</code> is returned (e.g. if the method being invoked is <code>async</code>). In this case, the <code>Task</code> will be awaited in an <code>async void</code> method. This means that if the method returns a <code>Task</code> which ends up containing an exception, this exception is rethrown and will bubble up to the Dispatcher, where it will terminate your application (unless you handle it, with e.g. <code>BootstrapperBase.OnUnhandledException</code>). The effect is the same as if the method being invoked was <code>async void</code>, but means it’s easier to unit-test <code>async</code> ViewModel methods.</p></blockquote><h2 id="动作目标"><a href="#动作目标" class="headerlink" title="动作目标"></a>动作目标</h2><blockquote><p>So far I’ve been telling a little white lie. I’ve been saying that the Action is invoked on the ViewModel, but that isn’t strictly true. Let’s go into a bit more detail.</p><p>Stylet defines an inherited attached property called View.ActionTarget. When a View is bound to its ViewModel, the View.ActionTarget on the root element in the View is bound to the ViewModel, and it’s then inherited by each element in the View. When you invoke an action, it’s invoked on the View.ActionTarget.</p><p>This means that, by default, actions are invoked on the ViewModel regardless of the current DataContext, which is probably what you want.</p><p>This is a very important point, and one that’s worth stressing. The DataContext will probably change at multiple points throughout the visual tree. However, the View.ActionTarget will stay the same (unless you manually change it). This means the actions will always be handled by your ViewModel, and not by whatever object is being bound to, which is almost always what you want.</p><p>You can of course alter the View.ActionTarget for individual elements, for example:</p></blockquote><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>动作也可调用静态方法</p><blockquote><p>Actions can also invoke static methods, if the target is a <code>Type</code> object (use <code>&#123;x:Type ...&#125;</code> in XAML for this). You can set this using both <code>View.ActionTarget</code> and Action’s <code>Target</code> property.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static class CommonButtonTarget&#123;    public static void DoSomething() &#123; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action DoSomething, Target=&#123;x:Type my:CommonButtonTarget&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="动作和样式"><a href="#动作和样式" class="headerlink" title="动作和样式"></a>动作和样式</h2><blockquote><p>Actions will not work from style setters. The classes required to do this in WPF are all internal, which means there is no way to fix the issue. You will need to use old-fashioned Commands in this (rare) case, unfortunately.</p></blockquote><h2 id="上下文菜单和弹出式菜单陷阱"><a href="#上下文菜单和弹出式菜单陷阱" class="headerlink" title="上下文菜单和弹出式菜单陷阱"></a>上下文菜单和弹出式菜单陷阱</h2><p>111</p><blockquote><p>View.ActionTarget is of course an attached property, which is configured to be inherited by the children of whatever element it is set on. Like any attached property, and indeed the DataContext, there are certain boundaries it is not inherited across, such as:</p></blockquote><ul><li>Using a ContextMenu</li><li>Using a Popup</li><li>Using a Frame</li></ul><p>In these cases, Stylet will do the best it can to find a suitable ActionTarget (it may, for example, find the the ActionTarget associated with the root element in the current XAML file), but this may not be exactly what you expect (e.g. it may ignore a <code>s:View.ActionTarget=&quot;&#123;Binding ...&#125;&quot;</code> line you have somewhere in the middle of your page), or it may (in rare circumstances) fail to find an ActionTarget at all.</p><p>In this case, please set <code>s:View.ActionTarget</code> to a suitable value. You may struggle to get a reference to anything outside of a ContextMenu from inside of one: I suggest the <a href="http://www.thomaslevesque.com/2011/03/21/wpf-how-to-bind-to-data-when-the-datacontext-is-not-inherited/">BindingProxy</a> technique.</p><h2 id="附加行为"><a href="#附加行为" class="headerlink" title="附加行为"></a>附加行为</h2><p>有两种可能会导致动作停止： <code>View.ActionTarget</code>为空或者<code>View.ActionTarget</code> 中指定方法不存在。上述情况的默认处理如下：</p><table><thead><tr><th></th><th align="center">View.ActionTarget为空</th><th align="center">View.ActionTarget中指定方法不存在</th></tr></thead><tbody><tr><td>命令</td><td align="center">禁用控件</td><td align="center">点击控件时抛出异常</td></tr><tr><td>事件</td><td align="center">启用控件</td><td align="center">事件被引发时抛出异常</td></tr></tbody></table><blockquote><p>There are two cases which will stop an action from working properly: if the <code>View.ActionTarget</code> is null, or if the specified method on the <code>View.ActionTarget</code> doesn’t exist. The default behaviour in each of these cases is as follows:</p><table><thead><tr><th></th><th>View.ActionTarget &#x3D;&#x3D; null</th><th>No method on View.ActionTarget</th></tr></thead><tbody><tr><td>Commands</td><td>Disable the control</td><td>Throw an exception when the control is clicked</td></tr><tr><td>Events</td><td>Enable the control</td><td>Throw an exception when the event is raised</td></tr></tbody></table><p>The justification for this is that if the <code>View.ActionTarget</code> is null, you must have set it yourself, so you probably know what you’re doing. However, if the specified method doesn’t exist on the <code>View.ActionTarget</code>, that’s probably a mistake, and you deserve to know.</p><p>Of course, this behaviour is configurable.</p><p>To control the behaviour when <code>View.ActionTarget</code> is null, set the <code>NullTarget</code> property on the <code>Action</code> markup extension so either <code>Enable</code>, <code>Disable</code>, or <code>Throw</code>. (Note that <code>Disable</code> is invalid when the Action is linked to an event, as we have no power to disable anything).</p><p>For example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action MyMethod, NullTarget=Enable&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action MyMethod, NullTarget=Throw&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>11</p><blockquote><p>Similarly, you can set the <code>ActionNotFound</code> property to the same values:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action MyMethod, ActionNotFound=Disable&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;s:Action MyMethod, ActionNotFound=Enable&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h1 id="窗口管理器-1"><a href="#窗口管理器-1" class="headerlink" title="窗口管理器"></a>窗口管理器</h1><p>采用传统View优先的方法，要显示一个新的窗口或对话框应首先创建视图的实例，再调用实例方法<code>.Show()</code>或<code>.ShowDialog()</code>。采用ViewModel 优先的方法时无法与视图直接交互，因此上述步骤行不通。窗口管理器正是为了解决这个问题，通过调用<code>IWindowManager.ShowWindow(someViewModel)</code>方法可定位并实例化对应的 View，再将其绑定到 ViewModel，最后显示它。示例代码如下：</p><blockquote><p>In a traditional View-first approach, if you want to display a new window or dialog, you create a new instance of the View, then call <code>.Show()</code> or <code>.ShowDialog()</code>.</p><p>In a ViewModel-first approach, you can’t interact directly with the views, so you can’t do this. The WindowManager solves this problem - calling <code>IWindowManager.ShowWindow(someViewModel)</code> will take that ViewModel, find its view, instantiate it, bind it to that ViewModel, and display it.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class SomeViewModel&#123;   private IWindowManager windowManager;   public SomeViewModel(IWindowManager windowManager)   &#123;      this.windowManager &#x3D; windowManager;   &#125;    public void ShowAWindow()   &#123;      var viewModel &#x3D; new OtherViewModel();      this.windowManager.ShowWindow(viewModel);   &#125;    public void ShowADialog()   &#123;      var viewModel &#x3D; new OtherViewModel();      bool? result &#x3D; this.windowManager.ShowDialog(viewModel);      &#x2F;&#x2F; result holds the return value of Window.ShowDialog()      if (result.GetValueOrDefault(true))      &#123;         &#x2F;&#x2F; DialogResult was set to true      &#125;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>多么简单有效！另外，通过构造注入的方式得到<code>IWindowManager </code>的实例而不是在 ViewModel 中显式构造该实例使得单元测试方便很多。在 ViewModel 中调用父类 <code>Screen</code> 的 <code>RequestCLose</code>方法可关闭窗口或对话框。</p><blockquote><p>Nice and easy! In addition, the introduction of the IWindowManager (rather than calling methods directly on the ViewModel) makes testing a lot easier.</p><p>To close a window or dialog from its ViewModel, use <code>Screen.RequestClose</code>, like this:  </p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class ViewModelDisplayedAsWindow&#123;   &#x2F;&#x2F; Called by pressing the &#39;close&#39; button   public void Close()   &#123;      this.RequestClose();   &#125;&#125; class ViewModelDisplayedAsDialog&#123;   &#x2F;&#x2F; Called by pressing the &#39;OK&#39; button   public void CloseWithSuccess()   &#123;      this.RequestClose(true);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="消息框"><a href="#消息框" class="headerlink" title="消息框"></a>消息框</h1><p>11</p><blockquote><p>As we all know, WPF comes with its own MessageBox implementation - <code>System.Windows.MessageBox</code>. And that’s fine, except that you can’t call it from your ViewModel (well, you <em>can</em>, but it makes your ViewModel untestable). The usual workaround suggested online is “write your own”.</p><p>Well, Stylet comes with its own MessageBox clone, which looks and behaves almost identically to the WPF one (including appearance, buttons, icons, auto-sizing, sounds, alignment, etc).</p></blockquote><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>11</p><blockquote><p>To use, simply call the <code>ShowMessageBox</code> method on <code>IWindowManager</code>, like this:</p><p>The MessageBox accepts all of the same options as as the WPF MessageBox, plus a few more.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public MyViewModel&#123;   private readonly IWindowManager windowManager;    public MyViewModel(IWindowManager windowManager)   &#123;      this.windowManager &#x3D; windowManager;   &#125;    public void ShowMessagebox()   &#123;      var result &#x3D; this.windowManager.ShowMessageBox(&quot;Hello&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="定制消息框"><a href="#定制消息框" class="headerlink" title="定制消息框"></a>定制消息框</h2><p>111</p><blockquote><p>Stylet’s MessageBox is implemented as a ViewModel, <code>MessageBoxViewModel</code>, and its corresponding View, <code>MessageBoxView</code>. The ViewModel implements an interface, <code>IMessageBoxViewModel</code>, and the <code>ShowMessageBox()</code> method uses this interface to retrieve an instance of the ViewModel.</p><p>Therefore, you can provide you own custom implementation of <code>MessageBoxViewModel</code> and <code>MessageBoxView</code> by writing a ViewModel which implements <code>IMessageBoxViewModel</code>, and registering it with your IoC container. This will then be used by <code>ShowMessageBox()</code>.</p><p>If you just want to tweak the behaviour of the existing <code>MessageBoxViewModel</code>, you can. The following options are available:</p></blockquote><h3 id="自定义按钮内容"><a href="#自定义按钮内容" class="headerlink" title="自定义按钮内容"></a>自定义按钮内容</h3><p>111</p><blockquote><p>You can edit the button text for any of the buttons on a per-application basis by modifying <code>MessageBoxViewModel.ButtonLabels</code>, which is a dictionary holding the text to display for each button. If you just want to edit the text for a particular MessageBox, <code>ShowMessageBox</code> will accept a dictionary allowing you to do just that:  </p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">MessageBoxViewModel.ButtonLabels[MessageBoxResult.No] &#x3D; &quot;No, thanks&quot;; this.windowManager.ShowMessageBox(&quot;Do you want breakfast?&quot;,                                    buttons: MessageBoxButton.YesNo,                                    buttonLabels: new Dictionary&lt;MessageBoxResult, string&gt;()        &#123;            &#123; MessageBoxResult.Yes, &quot;Yes please!&quot; &#125;,        &#125;); &#x2F;&#x2F; Will display a MessageBox with the buttons &quot;Yes please!&quot; and &quot;No, thanks&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="事件总线-1"><a href="#事件总线-1" class="headerlink" title="事件总线"></a>事件总线</h1><p>事件总线是一个基于发布者&#x2F;订阅者模型的事件管理器，其特征是去中心化和弱绑定。</p><blockquote><p>The EventAggregator is a decentralised, weakly-binding, publish&#x2F;subscribe-based event manager.</p></blockquote><h2 id="发布者与订阅者"><a href="#发布者与订阅者" class="headerlink" title="发布者与订阅者"></a>发布者与订阅者</h2><h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><p>111</p><blockquote><p>subscribers interesting in a particular event can tell the IEventAggregator of their interest, and will be notified whenever a publisher publishes that particular event to the IEventAggregator.</p><p>Events are classes - do whatever you want with them. For example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class MyEvent&#123;   &#x2F;&#x2F; Do something &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>11</p><blockquote><p>Subscribers must implement <code>IHandle&lt;T&gt;</code>, where <code>T</code> is the event type they are interested in receiving (they can of course implement multiple <code>IHandle&lt;T&gt;</code>‘s for multiple <code>T</code>‘s). They must then get hold of an instance of the IEventAggregator, and subscribe themselves, for example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Subscriber : IHandle&lt;MyEvent&gt;, IHandle&lt;MyOtherEvent&gt;&#123;   public Subscriber(IEventAggregator eventAggregator)   &#123;      eventAggregator.Subscribe(this);   &#125;    public void Handle(MyEvent message)   &#123;      &#x2F;&#x2F; ...   &#125;    public void Handle(MyOtherEvent message)   &#123;      &#x2F;&#x2F; ...   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>111</p><blockquote><p>For VB.NET users, the <code>Sub New()</code> passing the eventAggregator by reference will probably fail across namespaces, and can be irritating to have to define with each new subscriber. Thus, it may be easier to define your eventAggregator in a global module, then subscribe directly to it instead of passing its reference along to each new ViewModel you call.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-vb" data-language="vb"><code class="language-vb">Module Global  Public eventAggregator as IEventAggregatorEnd ModuleClass Subscriber : Implements IHandle(Of MyEvent)  Public Sub New()  Global.eventAggregator.Subscribe(Me)  End Sub    &#39;Public Sub Handle...End Class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>11</p><blockquote><p>Make sure to keep the namespace for the <em>module</em> blank, so that it can be used throughout the program.</p></blockquote><h3 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h3><p>11</p><blockquote><p>Publishers must also get an instance of the IEventAggregator, but they don’t need to subscribe themselves - they only need to call IEventAggregator.Publish every time they want to publish an event, for example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Publisher&#123;   private IEventAggregator eventAggregator;   public Publisher(IEventAggregator eventAggregator)   &#123;      this.eventAggregator &#x3D; eventAggregator;   &#125;    public void PublishEvent()   &#123;      this.eventAggregator.Publish(new MyEvent());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>11</p><blockquote><p>Again, for VB.NET users, if you’ve set up the global module then you don’t need to pass the eventAggregator to the Publisher. You can just publish directly to the global eventAggregator;</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-vb" data-language="vb"><code class="language-vb">Class Publisher  Public Sub PublishEvent()  Global.eventAggregator.Publish(New MyEvent())  End Sub  End Class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="取订和弱绑定"><a href="#取订和弱绑定" class="headerlink" title="取订和弱绑定"></a>取订和弱绑定</h2><p>11</p><blockquote><p>Because the IEventAggregator is weakly binding, subscribers don’t need to unsubscribe themselves - the IEventAggregator won’t retain them. It is however possible for a subscriber to unsubscribe itself if it wants - call  </p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">IEventAggregator.Unsubscribe(this);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="同步发布和异步发布"><a href="#同步发布和异步发布" class="headerlink" title="同步发布和异步发布"></a>同步发布和异步发布</h3><p>111</p><blockquote><p>The default <code>IEventAggregator.Publish</code> method publishes the event synchronously. You can also call <code>PublishOnUIThread</code> to dispatch asynchronously to the UI thread, or <code>PublishWithDispatcher</code> and pass any action you want to act as the dispatcher (this can be useful if writing your own methods on IEventAggregator).</p></blockquote><h2 id="频道"><a href="#频道" class="headerlink" title="频道"></a>频道</h2><h1 id="属性通知类"><a href="#属性通知类" class="headerlink" title="属性通知类"></a>属性通知类</h1><p>PropertyChangedBase 提供了用于引发通知的方法，被用作那些要实现 INotifyPropertyChanged 接口的类型的基类。</p><blockquote><p>PropertyChangedBase is base class for types implementing INotifyPropertyChanged, and provides methods for raising PropertyChanged notifications.</p></blockquote><h2 id="引发通知"><a href="#引发通知" class="headerlink" title="引发通知"></a>引发通知</h2><p>目的不同，引发通知的方法也不一样，最常用的方法是属性被赋值时引发通知。使用<code>PropertyChangedBase</code>自带的工具方法<code>SetAndNotify</code>，当字段被赋新值时，赋值操作才实际发生，并引发<code>PropertyChanged </code>事件通知，示例代码如下：</p><blockquote><p>There are a number of ways to raise PropertyChanged notifications, depending on what exactly you want to do.</p><p>The most common case is having a property raise a notification each time it’s assigned to. PropertyChangedBase provides a nice utility method to help: SetAndNotify. It takes, by reference, a field, and a value to assign to the field. If the field’s value !&#x3D; the value, the assignment happens, and a PropertyChanged notification is raised. For example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class MyClass : PropertyChangedBase&#123;   private string _name;   public string Name   &#123;      get &#123; return this._name; &#125;      set &#123; SetAndNotify(ref this._name, value); &#125;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>绑定属性前台代码如下：</p><blockquote><p>To connect to the object you have to put in the view:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextBox</span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;Binding Name, UpdateSourceTrigger=PropertyChanged&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>由于C#版本不同，在当前属性中引发其它属性通知的方法也不同。C# 6.0及以上版本推荐使用 <code>nameof()</code>方法，该方法非常简单并可在编译期进行安全检查；C# 6.0以下版本使用 lambda 表达式，可能相对慢一点，也可在编译期进行安全检查。如果有需要，甚至可采用原始字符串的方式。具体可结合以下代码来理解：</p><blockquote><p>If you want to raise a PropertyChanged notification for a property other than the current one, there are a few ways of achieving that, too (depending on whether you’re using C#6, or below). The preferred C# 6 way is to use <code>nameof()</code>, as that is very cheap and provides compile-time safety. If you’re using C# 5 or below, you can use an expression: this is slower, but also gives compile-time safety. If you <em>really</em> want, you can use a raw string as well. See below:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class MyClass : PropertyChangedBase&#123;   private string _firstName;   public string FirstName   &#123;      get &#123; return _firstName; &#125;      private set      &#123;         SetAndNotify(ref _firstName, value);         &#x2F;&#x2F; Preferred if you&#39;re using C# 6, as it provides compile-time safety         this.NotifyOfPropertyChange(nameof(this.FullName));               &#125;   &#125;   private string _lastName;   public string LastName   &#123;      get &#123; return _lastName; &#125;      private set      &#123;         SetAndNotify(ref _lastName, value);         &#x2F;&#x2F; Preferred for C# 5 and below, as it provides compile-time safety         this.NotifyOfPropertyChange(() &#x3D;&gt; this.FullName);      &#125;   &#125;   public string FullName   &#123;      get &#123; return FirstName + &quot; &quot; + LastName; &#125;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>关联通知其它属性的代码集中放到构造函数里，比如：</p><blockquote><p>You can also wire things together in the constructor, like this:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class MyClass : PropertyChangedBase&#123;   private string _firstName, _lastName;   public MyClass()   &#123;      this.Bind(s &#x3D;&gt; s.FirstName, (o, e) &#x3D;&gt; NotifyOfPropertyChange(nameof(FullName)));      this.Bind(s &#x3D;&gt; s.LastName, (o, e) &#x3D;&gt; NotifyOfPropertyChange(nameof(FullName)));   &#125;   public string FirstName   &#123;      get &#123; return _firstName; &#125;      private set &#123; SetAndNotify(ref _firstName, value); &#125;   &#125;   public string LastName   &#123;      get &#123; return _lastName; &#125;      private set &#123; SetAndNotify(ref _lastName, value); &#125;   &#125;   public string FullName   &#123;      get &#123; return FirstName + &quot; &quot; + LastName; &#125;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="分配事件"><a href="#分配事件" class="headerlink" title="分配事件"></a>分配事件</h2><p>默认情况下，<code>PropertyChanged </code>事件先在当前线程被引发，再由 WPF 具体负责分配到 UI 线程。当然，直接在 UI 线程中引发事件也没问题，<code>PropertyChangedBase</code>有一个名为<code>PropertyChangedDispatcher</code>的属性，该属性有一个名为<code>Execute.DefaultPropertyChangedDispatcher</code>的默认委托，将委托值设为<code>Execute.OnUIThread</code>即可。改变<code>PropertyChangedBase</code>所有子类的事件引发方式应重写<code>Configure</code>函数，示例代码如下：</p><blockquote><p>By default, PropertyChanged events are raised on the current thread (and WPF takes care of dispatching them to the UI thread). If you do want to change this, however, you can! PropertyChangedBase has a property called PropertyChangedDispatcher, which has an <code>Action&lt;Action&gt;</code>, and defaults to Execute.DefaultPropertyChangedDispatcher (which you can assign) (which has the value <code>a =&gt; a()</code>).</p><p>If you want to change this to execute on the UI thread, you can do the following.</p><p>To change for all instances of PropertyChangedBase:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Bootstrapper : Bootstrapper&lt;MyRootViewModel&gt;&#123;   public override void Configure()   &#123;      base.Configure();      Execute.DefaultPropertyChangedDispatcher &#x3D; Execute.OnUIThread;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>针对单独子类的示例代码如下：</p><blockquote><p>To change for just once instance of PropertyChangedBase:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class MyClass : PropertyChangedBase&#123;   public MyClass()   &#123;      this.PropertyChangedDispatcher &#x3D; Execute.OnUIThread;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="PropertyChanged-Fody包"><a href="#PropertyChanged-Fody包" class="headerlink" title="PropertyChanged.Fody包"></a>PropertyChanged.Fody包</h2><p><a href="https://github.com/Fody/PropertyChanged">PropertyChanged.Fody</a>是一个非常神奇的 nuget 包，它能在编译期自动将用于引发<code>PropertyChanged </code>通知的代码注入到相关属性中，这样就使得代码整体很简洁。同时能够自行识别哪些属性需要引发通知，示例代码如下：</p><blockquote><p><a href="https://github.com/Fody/PropertyChanged">PropertyChanged.Fody</a> is a fantastic package, which injects code at compile-time to automatically raise PropertyChanged notifications for your properties, allowing you to write very concise code. It will also figure out dependencies between your properties and raise notifications appropriately for example:</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">class MyClass : PropertyChangedBase&#123;   public string FirstName &#123; get; private set; &#125;   public string LastName &#123; get; private set; &#125;   public string FullName &#123; get &#123; return String.Format(&quot;&#123;0&#125; &#123;1&#125;&quot;, this.FirstName, this.LastName); &#125; &#125;   public void SomeMethod()   &#123;      &#x2F;&#x2F; PropertyChanged notifications are automatically raised for both FirstName and FullName      this.FirstName &#x3D; &quot;Fred&quot;;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>PropertyChangedBase</code>也注意与<code>Fody.PropertyChanged</code>的集成，实际采用<code>PropertyChangedDispatcher</code>引发通知。因此，<code>Screen</code>、 <code>ValidatingModelBase</code>或<code>PropertyChangedBase</code>的子类使用 <code>Fody.PropertyChanged</code>无需任何特别代码。</p><blockquote><p>PropertyChangedBase also takes care to integrate with <code>Fody.PropertyChanged</code>. Notifications raised by <code>Fody.PropertyChanged</code> are raised using the <code>PropertyChangedDispatcher</code>.</p><p>Therefore you do not need to do anything special in order to use <code>Fody.PropertyChanged</code> with any subclass of <code>Screen</code>, <code>ValidatingModelBase</code>, or <code>PropertyChangedBase</code>.</p></blockquote><h1 id="可绑定集合"><a href="#可绑定集合" class="headerlink" title="可绑定集合"></a>可绑定集合</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>BindableCollection&lt;T&gt;</code>集合类是<code>ObservableCollection</code>的子类，其实例一般用作 ItemsControl 族控件的数据源（增、减元素时 View 可以得到通知）。该集合类还新增了两个很有用的特性：</p><ul><li>新增方法<code>AddRange</code>, <code>RemoveRange</code> 和 <code>Refresh</code></li><li>线程安全</li></ul><blockquote><p><code>BindableCollection&lt;T&gt;</code> is a subclass of <a href="http://msdn.microsoft.com/en-us/library/ms668604(v=vs.110).aspx"><code>ObservableCollection</code></a>. It’s the class to use if you have a collection of something in your ViewModel, and want to use it as the <code>ItemsSource</code> &#x2F; etc for something in your View (and have the View be notified whenever an item is added to &#x2F; removed from that collection).</p><p>However, it adds a couple of useful extra features:</p><ul><li>New <code>AddRange</code>, <code>RemoveRange</code>, and <code>Refresh</code> methods</li><li>Is thread-safe</li></ul></blockquote><h2 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h2><p><code>ObservableCollection&lt;T&gt;</code>集合增加元素时需手动迭代每个元素并多次调用<code>collection.Add(element)</code>方法，如此就会引发大量新增元素事件。通过新增的方法<code>AddRange</code> 和<code>RemoveRange</code>，可以一次性批量增、减元素，同时只引发一次事件。</p><p><code>Refresh</code> 方法不会改变集合，它只是触发<code>PropertyChanged</code> 和<code>CollectionChanged</code> 事件，通知 UI 其绑定的集合发生了变化，请 UI 元素重载数据。尽管该方法很有用，但大多数场合都用不到。</p><blockquote><p><code>ObservableCollection&lt;T&gt;</code> is missing a couple of very useful methods: <code>AddRange</code> and <code>RemoveRange</code>. These do pretty much what you’d expect, allowing you to add a remove a range of elements at once, without having to manually iterate over each element and calling <code>collection.Add(element)</code> on each (while raising lots of events for each element added). <code>AddRange</code> and <code>RemoveRange</code> will raise one set of events per range added&#x2F;removed only.</p><p><code>Refresh</code> is a convenience. It does not modify the collection in any way, but does cause the <code>PropertyChanged</code> and <code>CollectionChanged</code> events to be fired, indicating to any UI elements that the collection has been modified and that they should reload their data. It’s not often needed, but when it is it’s <em>really</em> needed.</p></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>线程安全的实现方法是将集合元素的增加、删除、清空、重置等操作分配到的 UI 线程，具体分配工作由 <code>Execute.OnUIThreadSync</code>方法完成，也就是说：</p><ul><li>这些都是同步操作，即方法在动作完成后才返回；</li><li><code>PropertyChanged</code>和 <code>CollectionChanged</code>事件总是由 UI 线程引发；</li><li>？？？</li></ul><p>属性相关的操作总是在 UI 线程中完成，因此事件也由 UI 线程引发。基于此，<code>BindableCollection&lt;T&gt;</code>移除了 <code>PropertyChangedDispatcher</code>、<code>CollectionChangedDispatcher</code>属性，在<code>PropertyChangedBase</code> 中这些属性仍存在。</p><blockquote><p>Thread safety is achieved by dispatching all actions (adds, removes, clear, reset, etc) to the UI thread. The dispatch uses <code>Execute.OnUIThreadSync</code>, which means that:</p><ul><li>These operations are synchronous: the method being called won’t return until the action has been completed.</li><li>They’re free if you’re already on the UI Thread - the operation will be carried out synchronously in this case.</li><li>All <code>PropertyChanged</code> and <code>CollectionChanged</code> events are always raised on the UI thread.</li></ul><p>That last point means that there is no <code>PropertyChangedDispatcher</code> property on <code>BindableCollection&lt;T&gt;</code>, as there is with <code>PropertyChangedBase</code> - the event is always raised on the UI thread, since the operation the property relates to is always performed on the UI thread. Similarly, there’s no <code>CollectionChangedDispatcher</code> concept.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>编程</tag>
      
      <tag>译文</tag>
      
      <tag>MVVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dapper框架非官方中文文档</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/Dapper%E6%A1%86%E6%9E%B6%E9%9D%9E%E5%AE%98%E6%96%B9%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/CSharp/Dapper%E6%A1%86%E6%9E%B6%E9%9D%9E%E5%AE%98%E6%96%B9%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>Dapper 是一款 .Net 平台下的微型 ORM 框架，特点是：轻量、高效、简单、灵活并适用于 SQL Server、SQLite、MySQL等多款数据库。</p><p>Dapper 以 NuGet 包的形式提供，其扩展了 IDbConnection 接口的方法。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Query方法：强类型返回值"><a href="#Query方法：强类型返回值" class="headerlink" title="Query方法：强类型返回值"></a>Query方法：强类型返回值</h3><p>方法原型如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IDbConnection</span> cnn<span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">object</span></span> param <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>               <span class="token class-name">IDbTransaction</span> transaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">bool</span></span> buffered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> commandTimeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>               <span class="token class-name">CommandType<span class="token punctuation">?</span></span> commandType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Age <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">float</span><span class="token punctuation">?</span></span> Weight <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IgnoredProperty <span class="token punctuation">&#123;</span> <span class="token keyword">get</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>  <span class="token comment">// 被忽略的字段直接返回固定值</span><span class="token punctuation">&#125;</span><span class="token class-name"><span class="token keyword">var</span></span> guid <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dog<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"SELECT Age = @Age, Id = @Id"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> Age <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">?</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> Id <span class="token operator">=</span> guid <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Query方法：动态类型返回值"><a href="#Query方法：动态类型返回值" class="headerlink" title="Query方法：动态类型返回值"></a>Query方法：动态类型返回值</h3><p>方法原型如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> Query <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IDbConnection</span> cnn<span class="token punctuation">,</span>                <span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">object</span></span> param <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>               <span class="token class-name">IDbTransaction</span> transaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">bool</span></span> buffered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> commandTimeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>               <span class="token class-name">CommandType<span class="token punctuation">?</span></span> commandType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"SELECT 1 A, 2 B UNION ALL SELECT 3, 4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="Excute方法：返回受影响行数"><a href="#Excute方法：返回受影响行数" class="headerlink" title="Excute方法：返回受影响行数"></a>Excute方法：返回受影响行数</h3><p>Excute 方法返回受影响的行数，一般用于增、删、改操作。</p><p>方法原型如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IDbConnection</span> cnn<span class="token punctuation">,</span>            <span class="token class-name"><span class="token keyword">string</span></span> sql<span class="token punctuation">,</span>            <span class="token class-name"><span class="token keyword">object</span></span> param <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token class-name">IDbTransaction</span> transaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> commandTimeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token class-name">CommandType<span class="token punctuation">?</span></span> commandType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token string">@"      SET NOCOUNT ON      CREATE TABLE #t(i int)      SET NOCOUNT OFF      INSERT #t      SELECT @a a UNION ALL SELECT @b      SET NOCOUNT ON      DROP TABLE #t"</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token punctuation">&#123;</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Excute方法：反复执行"><a href="#Excute方法：反复执行" class="headerlink" title="Excute方法：反复执行"></a>Excute方法：反复执行</h3><p>该特性支持反复执行同一 SQL 语句，传递对象数组或对象集合（实现了<code>IEnumerable&lt;T&gt;</code>集合）作为参数，常用于批量插数据。 </p><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// 示例1</span><span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token string">@"INSERT MyTable VALUES (@a, @b)"</span><span class="token punctuation">,</span>    <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 示例2</span><span class="token class-name"><span class="token keyword">var</span></span> foos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Foo<span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foo</span> <span class="token punctuation">&#123;</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foo</span> <span class="token punctuation">&#123;</span> A <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Foo</span> <span class="token punctuation">&#123;</span> A <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> count <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token string">@"INSERT MyTable(colA, colB) VALUES (@a, @b)"</span><span class="token punctuation">,</span> foos<span class="token punctuation">)</span><span class="token punctuation">;</span>Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>foos<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="参数化查询"><a href="#参数化查询" class="headerlink" title="参数化查询"></a>参数化查询</h3><p>SQL 语句采用匿名对象作为参数可实现参数化查询，且与 SQL Server 的参数化查询语法一致。参数化查询有两个好处：</p><ol><li>防止 SQL 注入</li><li>提高代码复用率</li></ol><p>111111111111111111111111111111111111111111</p><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>Dapper 采用匿名对象作为查询参数，对象属性应与 SQL 语句中@符号打头的参数名称一致。参数化查询可以有效地抵御 <strong>SQL注入攻击</strong>。</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE username = @UserName And password = @PassWord"</span><span class="token punctuation">,</span>   <span class="token keyword">new</span> <span class="token punctuation">&#123;</span>UserName <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> PassWord <span class="token operator">=</span> <span class="token string">"xxxxxxx"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// UserName属性值给到参数@UserName, PassWord属性值给到参数@PassWord </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="多条查询"><a href="#多条查询" class="headerlink" title="多条查询"></a>多条查询</h3><p>Dapper 同时支持<code>IEnumerable&lt;T&gt;</code>类型的多参数查询，集合中的元素被拆开后依次传入参数会被自动展开。</p><p>原始代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> rows <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM (SELECT 1 AS Id UNION ALL SELECT 2 UNION ALL SELECT 3) AS x WHERE Id IN @Ids"</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token punctuation">&#123;</span> Ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>展开后代码如下</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">SELECT <span class="token operator">*</span> FROM <span class="token punctuation">(</span>SELECT <span class="token number">1</span> AS Id UNION ALL SELECT <span class="token number">2</span> UNION ALL SELECT <span class="token number">3</span><span class="token punctuation">)</span> AS x WHERE <span class="token return-type class-name">Id</span> IN <span class="token punctuation">(</span>@Ids1<span class="token punctuation">,</span> @Ids2<span class="token punctuation">,</span> @Ids3<span class="token punctuation">)</span>" <span class="token comment">// @Ids1 = 1 , @Ids2 = 2 , @Ids2 = 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h3 id="一对多映射"><a href="#一对多映射" class="headerlink" title="一对多映射"></a>一对多映射</h3><p>Dapper 支持将一条数据库记录映射到多个对象，这个关键特性可以减少额外查询。</p><p>相关联的两个实体类如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Title <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Content <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name">User</span> Owner <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>&#x2F;&#x2F; TODO</p><h3 id="区别映射"><a href="#区别映射" class="headerlink" title="区别映射"></a>区别映射</h3><p>一般情况下，同一个表的返回数据都被映射到同一个实体类，但偶尔也需要映射到不同的实体类，这时<code>IDataReader.GetRowParser</code>方法就派上用场了。</p><p>Shapes 表包含 Id、Type 和 Data 三个字段，依据 Type 字段值分别映射给 <code>Circle</code>、<code>Square</code>、<code>Triangle</code>三个实体类。</p><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IShape<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM Shapes"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Generate a row parser for each type you expect.</span>    <span class="token comment">// The generic type &lt;IShape> is what the parser will return.</span>    <span class="token comment">// The argument (typeof(*)) is the concrete type to parse.</span>    <span class="token class-name"><span class="token keyword">var</span></span> circleParser <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRowParser</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IShape<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Circle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> squareParser <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRowParser</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IShape<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Square</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> triangleParser <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRowParser</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IShape<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Triangle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> typeColumnIndex <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">GetOrdinal</span><span class="token punctuation">(</span><span class="token string">"Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">IShape</span> shape<span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> <span class="token punctuation">(</span>ShapeType<span class="token punctuation">)</span>reader<span class="token punctuation">.</span><span class="token function">GetInt32</span><span class="token punctuation">(</span>typeColumnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> ShapeType<span class="token punctuation">.</span>Circle<span class="token punctuation">:</span>            shape <span class="token operator">=</span> <span class="token function">circleParser</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ShapeType<span class="token punctuation">.</span>Square<span class="token punctuation">:</span>            shape <span class="token operator">=</span> <span class="token function">squareParser</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ShapeType<span class="token punctuation">.</span>Triangle<span class="token punctuation">:</span>            shape <span class="token operator">=</span> <span class="token function">triangleParser</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      shapes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="多参数重复执行"><a href="#多参数重复执行" class="headerlink" title="多参数重复执行"></a>多参数重复执行</h3><p>Dapper 支持一次函数调用中执行多条查询语句，并将返回结果分别映射到对应的实体类。</p><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> sql <span class="token operator">=</span><span class="token string">@"SELECT * FROM Customers WHERE CustomerId = @idSELECT * FROM Orders WHERE CustomerId = @idSELECT * FROM Returns WHERE CustomerId = @id"</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> multi <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">QueryMultiple</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span>id<span class="token operator">=</span>selectedId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name"><span class="token keyword">var</span></span> orders <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name"><span class="token keyword">var</span></span> returns <span class="token operator">=</span> multi<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Return<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="字面量替换"><a href="#字面量替换" class="headerlink" title="字面量替换"></a>字面量替换</h3><p>&#x2F;&#x2F; TODO</p><h3 id="流式读取"><a href="#流式读取" class="headerlink" title="流式读取"></a>流式读取</h3><p>首先了解一下数据适配器 <strong>SqlDataAdapter</strong> 和 数据读取器 **SqlDataReader **的主要区别：</p><ol><li>SqlDataAdapter 在建立数据库连接后一次性读取所有查询数据到内存，然后就关闭了连接。适用于少量查询结果。</li><li>SqlDataReader  在建立数据库连接后流式读取数据，待发送缓存装满再返回查询数据，如此重复多次直至所有数据被返回。期间数据库连接一直处于 open 状态，且被当前 SqlDataReader 独占。适用于大量查询结果。</li></ol><p>Dapper 默认一次性读取所有查询结果，这样有利于最小化共享锁的占用时长和数据库的连接时长。这种读取方式的弊端也很明显：返回大量结果时内存耗费巨大。未解决此弊端，调用<code>Query</code>方法时<code>buffered</code>形参应传递<code>false</code>，改用流式读取方式。</p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>Dapper 支持使用存储过程。</p><p>示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> cnn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"spGetUser"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span>Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token named-parameter punctuation">commandType</span><span class="token punctuation">:</span> CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>花哨点的写法如下：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@a"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@b"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">dbType</span><span class="token punctuation">:</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> <span class="token named-parameter punctuation">direction</span><span class="token punctuation">:</span> ParameterDirection<span class="token punctuation">.</span>Output<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"@c"</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">dbType</span><span class="token punctuation">:</span> DbType<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> <span class="token named-parameter punctuation">direction</span><span class="token punctuation">:</span> ParameterDirection<span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>cnn<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token string">"spMagicProc"</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token named-parameter punctuation">commandType</span><span class="token punctuation">:</span> CommandType<span class="token punctuation">.</span>StoredProcedure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> b <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"@b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">var</span></span> c <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"@c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="varchar-类型支持"><a href="#varchar-类型支持" class="headerlink" title="varchar 类型支持"></a>varchar 类型支持</h3><p>Dapper 支持 varchar 类型，当对 varchar 类型字段执行 <code>WHERE </code> 字句时，应这样传递参数：</p><div class="code-wrapper"><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token class-name"><span class="token keyword">var</span></span> things <span class="token operator">=</span> <span class="token generic-method"><span class="token function">Query</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Thing<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM Thing WHERE Name = @Name"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">&#123;</span>Name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DbString</span> <span class="token punctuation">&#123;</span> Value <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">,</span> IsFixedLength <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> IsAnsi <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>正如上文所述，Dapper 默认一次性缓存所有查询结果，这样可加快映射到实体类的进度。当前缓存机制依赖于<code>ConcurrentDictionary</code>对象，一次性的查询语句会经常刷新该对象缓存。另外，如果没有查询字句的约束，一下子取回整表数据可能造成内存暴涨。</p><p>Dapper 之所以简约是因为剥离了传统 ORM 框架的很多功能。即便如此，也能应付大约95%的应用场景，千万不要期望本框架能处理所有问题。</p>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSharp</tag>
      
      <tag>编程</tag>
      
      <tag>译文</tag>
      
      <tag>ORM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解作用域</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>对于任何一门编程语言，作用域（scope）都是极为重要的概念。由于设计缺陷，javascript 天生没有块级作用域，这导致了变量提升等一系列问题，因此 ES6 不得不引入了<code>let</code>关键字进行弥补。下面这段 js 代码可以正常运行，换作C++、java等语言一定编译不过。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">function <span class="token function">say</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2021</span> <span class="token operator">==</span><span class="token operator">=</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var msg <span class="token operator">=</span> <span class="token string">"hello 2021"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 当前函数作用域不存在msg变量</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="作用域的定义"><a href="#作用域的定义" class="headerlink" title="作用域的定义"></a>作用域的定义</h2><p>作用域即变量在代码结构中的作用范围，是变量的一个关键属性。作用域从空间的维度来描述对象，属于编译期的概念；而生命周期是从时间维度来描述，属于运行期的概念。C++ 作为一门现代、严谨的面向对象编程语言，其作用域划分很完善，从小到大可分为：块级作用域、函数作用域、类作用域、命名空间作用域、全局作用域。作用域的访问原则为：</p><ol><li><p><strong>内层作用域可访问外层作用域，反之不行</strong>；</p></li><li><p><strong>内层作用域优先级高于外层作用域</strong>。</p></li><li><p><strong>同层作用域之间不可见</strong></p></li></ol><p>下面介绍一下面向过程言和面向对象语言都应该具备的三个基本作用域：语句块作用域、函数作用域和全局作用域。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 全局作用域const int YEAR &#x3D; 2021; namespace School&#123;    &#x2F;&#x2F; 命名空间作用域     class Student    &#123;    &#x2F;&#x2F; 类作用域    public:       bool isPassed(int scores) &#x2F;&#x2F; 函数作用域        &#123;            bool passed &#x3D; false; &#x2F;&#x2F; 函数作用域            if (scores &gt; 90)            &#123;                string encouragement &#x3D; &quot;good good study, day day up&quot;; &#x2F;&#x2F; 块级作用域                passed &#x3D; true;            &#125;            return passed;        &#125;    &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="语句块作用域"><a href="#语句块作用域" class="headerlink" title="语句块作用域"></a>语句块作用域</h2><p>块级作用域是最小的作用域，一对花括号形成的范围就是一个块级作用域。块级作用域不一定是<code>if</code>、<code>for</code>等控制结构的控制体，即使括起来的一句单独的代码也是一个新的块级作用域。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    &#123;        &#x2F;&#x2F; 块级作用域        string slogan &#x3D; &quot;hello world&quot;;    &#125;    &#x2F;&#x2F; 函数级作用域    cout &lt;&lt; slogan &lt;&lt; endl; &#x2F;&#x2F; 报错: 变量未定义    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>上述代码至少说明了两个事实：</p><ul><li>块级与函数不是同一个作用域</li><li>外层作用域无法访问内层作用域</li></ul><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    string slogan &#x3D; &quot;hello world&quot;;    &#123;        &#x2F;&#x2F; 当前作用域没有声明slogan变量,就去上级作用域查找        cout &lt;&lt; slogan &lt;&lt; endl;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>得益于块级作用域的存在，同一函数体内的多个<code>for</code>循环可以声明同名控制变量而不会发生命名冲突。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        ...    &#125;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        ...    &#125;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>同一作用域的变量不可重名。函数的局部变量与形式变量（形参）同属一个作用域，因此这段代码编译不过。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool isPassed(int scores)&#123;    int scores &#x3D; scores; &#x2F;&#x2F; 局部变量与形参重名    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>当前文件的任何位置都能访问到全局作用域内声明的变量（也就是全局变量），全局变量一般声明在文件顶部，与<code>#include</code>、<code>using</code>等指令同级。</p><p>C++ 允许局部变量与全局变量重名，但声明了同名的局部变量后，全名变量在该局部变量的作用域内将被屏蔽。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int year &#x3D; 2021;int main()&#123;    &#123; &#x2F;&#x2F; 块级作用域        int year;        year &#x3D; 1974;        cout &lt;&lt; year &lt;&lt; endl;  &#x2F;&#x2F; &#x3D;&gt; 1974;    &#125;    &#x2F;&#x2F; 函数作用域    cout &lt;&lt; year &lt;&lt; endl; &#x2F;&#x2F; &#x3D;&gt; 2021;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从C代码到二进制文件</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/%E4%BB%8EC%E4%BB%A3%E7%A0%81%E5%88%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/%E4%BB%8EC%E4%BB%A3%E7%A0%81%E5%88%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>诸如Visual Studio这类集成开发环境使得编程越发便捷，但也失去很多“捯饬”的乐趣。我很喜欢侯捷先生的一段话，简单朴素却又发人深省。</p><blockquote><p>使用一个东西，却不明白它的道理，<em>不高明</em>！</p></blockquote><p>当然，凡事没有绝对。发一封电子邮件却要事先把CPU的工作原理搞清楚，不把人逼疯才怪！</p><p>从C源代码到可执行程序一般经历四个主要过程：预处理(preprocess)、编译(compile)、汇编(assemble)、链接(link)，下面使用gcc工具详细剖析下。在集成开发环境中，这4个过程直接合为<strong>构建</strong>（Build）操作。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/1_wHKe6W4opLmk6pb7sxZz6w.png"></p><p>gcc(GNU C Compiler)是一套开源、跨平台的C&#x2F;C++编译器，它是Linux平台编译器的事实标准。gcc通过后台调用各子程序完成各项具体任务，比如汇编子程序as、链接子程序ldd。本文中用到的的命令如下：</p><ul><li><p>预处理</p><p>gcc默认不保存预处理后的文件（很少用到），可使用重定向保存结果。</p><p>-E</p><blockquote><p>Preprocess only; do not compile, assemble or link.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -E main.cpp <span class="token operator">></span> main.i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>编译</p><p>-S </p><blockquote><p>Compile only; do not assemble or link.</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -S main.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>编译+汇编</p><p>-c</p><blockquote><p>Compile and assemble, but do not link.  </p></blockquote><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -c main.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>AIO</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc main.cpp base.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="过程描述"><a href="#过程描述" class="headerlink" title="过程描述"></a>过程描述</h3><p>预处理的主要任务是处理源码中除编译器指令<code>#pragma</code>外其它以“#”打头的指令，具体如下：</p><ul><li><p>宏替换</p><p>替换<code>#define</code>自定义宏及编译器内置调试宏，比如将<code>PI</code>替换成<code>3.1415926</code></p></li><li><p>文件包含</p><p>插入头文件的内容到当前文件，注意文件包含是递归进行的，即<code>main.c</code>包含了<code>utility.h</code>，<code>utility.h</code>包含了<code>base.h</code>，最终<code>base.h</code>也会出现在<code>main.c</code>预编译结果中，可能带来的问题稍后再议。</p><blockquote><p>带后缀名的<strong>iostream.h</strong>和不带后缀名的<strong>iostream</strong>是不同的两个头文件，C++程序建议使用<strong>iostream</strong>，后者引入了命名空间且更现代、更安全。</p></blockquote></li><li><p>条件编译</p><p>根据<code>#if、#ifndef、#ifdef、#endif、#undef</code>条件编译指令，保留部分代码，抛弃一些代码，以实现版本控制、防止重复包含等目的。</p></li><li><p>添加行号和文件名标识符</p><p>供编译器生成pdb调试文件及输出错误或警告的具体位置。比如<code>main.c</code>包含的头文件<code>base.h</code>中<code>int</code>关键字笔误，编译器给出了详细的错误定位，以便查找修改。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210915211625676.png" alt="image-20210915211625676"></p></li><li><p>移除注释</p><p>移除所有块注释和行注释，因此注释的多少并不不影响可执行文件的体积。</p></li></ul><h3 id="代码清单"><a href="#代码清单" class="headerlink" title="代码清单"></a>代码清单</h3><p><em>mian.cpp</em></p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;base.h&quot;#define PI 3.1415926int main()&#123;    &#x2F;&#x2F; 地球体积    double earth &#x3D; 4 &#x2F; 3 * PI * 6378.137e3 * 6378.137e3 * 6378.137e3;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><em>base.h</em></p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void LoveWithFreedom();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>处理后的文件内容如下：</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210904212117898.png"></p><h3 id="防卫式声明"><a href="#防卫式声明" class="headerlink" title="防卫式声明"></a>防卫式声明</h3><p>设想这么一个场景，main.cpp直接包含了animal.h和person.h，person.h也包含了animal.h，这就意味着main.cpp包含animal.h两次，造成animal.h声明的变量在main.cpp中重复声明。</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"animal.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"person.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// person.h</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">"animal.h"</span></span><span class="token comment">// animal.h</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>预处理阶段只是简单的替换，因此此阶段不会报错，但后续必然无法通过编译。为了避免这种情况，头文件应采用<strong>防卫式声明</strong>。因为部分编译器不兼容，所以不推荐使用<code>#pragma once</code>指令的方法，推荐方法如下：</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__animal__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__animal__</span></span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译是整个过程最核心、最复杂的步骤，可分为两个子阶段：预编译和优化。</p><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>预编译阶段执行词法分析、语法分析、语义分析并生成汇编文件。预编译大致流程如下：</p><blockquote><p>基本词法元素包括：标识符（identifier）、关键字（keyword）、操作符（operator）、分隔符（delimiter）、字面量（literal）。</p></blockquote><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210915211033509.png" alt="image-20210915211033509"></p><ol><li>词法分析将整个源代码拆分成独立的记号，然后给这些记号归类、编码。当碰到无法归类的记号时，编译器就会报错，典型例子就是不合法的变量名。</li></ol><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210913221603348.png"></p><ol start="2"><li><p>语法分析根据语法规则识别出语法单位（赋值语句、条件语句之类），并检查语法单位结构的正确性。诸如行末缺少分号等错误都会被查出。</p></li><li><p>语义分析是对语法单位进行静态的语义审查（比如声明与类型是否匹配），动态的在运行时才可确定（比如除0的错误），分析其含义，下一步就会用另一种接近目标语言（比如汇编语言）或直接用目标语言去描述这个含义。此阶段要求语句的含义和使用规则正确。</p></li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>优化目的是提高代码执行效率，过程非常复杂、艰深。常见优化有：将乘法循环转换为多次加法循环；避免函数频繁调用造成入栈、出栈开销过大，使用内联直接将函数调用替换为函数体本身；等等。</p><h3 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h3><p>CPU架构不同指令集可能不同。即使同一份代码，在X86和ARM架构下生成的汇编代码就不同，这直接造成了纯编译型语言无法实现跨平台。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210905222202793.png" alt="image-20210905222202793"></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编语言实际就是用助记符代替机器指令，用符号代替内存地址。汇编过程只是机械地将每一条汇编指令翻译成相对应的机器指令，通俗点讲就是将人看的懂的汇编代码转换成机器看的懂的二进制代码，因此过程并不复杂。汇编生成后缀名为.o的目标文件（object file）。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p>链接是整个流程的最后一步，主要任务是处理模块间的符号引用问题。如果当前文件引用了外部函数或全局变量，编译及汇编阶段无法确定其偏移量，只能暂保留原始符号。链接器将多个目标文件的各个段捆绑到一起后就能确定所有符号的最终段内偏移，这个过程称为重定位（Relocation）。CRT标准静态库也会打包到最终可执行程序中，文件大小对比见下图：</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210915221225990.png" alt="image-20210915221225990"></p><p>以下示例代码中，main函数分别调用了内部的<code>foo</code>和<code>bar</code>函数，以及外部<code>help</code>函数、标准库函数<code>puts</code>，使用<code>gcc -c main.c</code>命令编译、汇编生成目标文件main.o。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"help.h"</span></span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>通过命令<code>nm -n main.o</code>查看目标文件的符号信息，结果一目了然，内部函数都具有**.text<strong>段内偏移地址，而<code>help</code>和<code>puts</code>函数显示为未定义的符号</strong>U**。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210914224528225.png" alt="image-20210914224528225"></p><blockquote><p>nm工具可列出目标文件的符号信息，包括：段内偏移地址，段名，符号</p></blockquote><p>根据类型和时机不同，重定位分为三类：</p><ul><li>程序内部跨文件引用，链接时重定位（其它目标文件、静态库）</li><li>引用外部库文件，程序装载时重定位（静态调用动态链接库 #pragma comment）</li><li>引用外部库文件，程序运行期重定位（动态调用动态链接库 LoadLibrary）</li></ul><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><p>为了便于链接阶段重定位，汇编器在生成的目标文件中嵌入了一个符号表（sysmbol table），表里保存了两部分信息：</p><ul><li>该目标文件<strong>本身定义的</strong>函数和全局变量</li><li>该目标文件<strong>引用的外部</strong>函数和全局变量</li></ul><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><p>从代码角度而言，<code>main</code>是大家公认的入口函数，程序从硬盘映射到内存后应该从<code>main</code>函数的第一句代码开始执行，但是大家有没有想过：是谁给main函数传递了命令行参数？</p><p>事实上，程序被加载后，首先执行的是入口函数<code>mainCRTStartup</code>（针对MSVC控制台程序），随之控制权也由操作系统转移过来。接下来该函数需完成以下工作：</p><ol><li>初始化CRT库和程序运行环境，包括初始化堆、线程、IO、全局变量等；</li><li>调用main函数（可自定义）并传递命令行参数；</li><li>main函数执行完毕后，返回到入口函数，完成善后清理工作，包括销毁堆、关闭I&#x2F;O、全局变量析构等；</li><li>呼叫操作系统结束进程。</li></ol><p>使用olldbg动态反汇编一个简单的C语言helloword程序，程序加载后停在了<code>0x0044125B</code>的位置，此处即调用了入口点函数<code>mainCRTStartup</code>。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210915223026614.png" alt="image-20210915223026614"></p><h2 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h2><p>节选了网上的一篇文章，比较全面的描述了PE文件的加载、运行过程：</p><blockquote><p>WinMain函数被执行之前，有一系列复杂的加载动作，还要执行一大段启动代码。运行程序MyApp.exe时，操作系统的加载程序首先为进程分配一个4GB的虚拟地址空间，然后把程序MyApp.exe所占用的磁盘空间作为虚拟内存映射到这个4GB的虚拟地址空间中。一般情况下，映射到虚拟地址空间中0X00400000的位置。加载一个应用程序所花的时间比想象的要少，因为加载一个PE文件并不是把整个文件一次性的从磁盘读到内存中，而是简单的做一下内存映射，因此映射一个大文件和映射一个小文件所花费的时间相差无几。当然，真正执行文件中的代码时，操作系统还是要把存在于磁盘上的虚拟内存中的代码交换到物理内存(RAM)中。但是，这种交换也不是把整个文件所占用的虚拟地址空间一次性的全部从磁盘交换到物理内存中，操作系统会根据需要和内存占用情况交换一页或多页。当然，这种交换是双向的，即存在于物理内存中的一部分当前没有被使用的页也可能被交换到磁盘中。接着，系统在内核中创建进程对象和主线程对象以及其它内容。然后操作系统的加载程序搜索PE文件中的输入表，加载所有应用程序所使用的动态链接库。动态链接库的加载与对应用程序的加载完全类似。</p><p>所有加载完成后，操作系统执行PE文件头部所指定地址（入口点）处的代码，开始应用程序主线程的执行。首先被执行的代码并不是MyApp.exe中的WinMain函数，而是被称为C Runtime startup code的WinMainCRTStartup函数，该函数是链接时由链接程序附加到MyApp.exe中的。在MSVC下，链接器对控制台程序设置的入口函数是 mainCRTStartup，mainCRTStartup 再调用main 函数；对图形界面程序设置的入口函数是 WinMainCRTStartup，WinMainCRTStartup 调用你自己写的 WinMain 函数。具体设置哪个入口点函数由链接器的“&#x2F;subsystem:”选项确定的，它告诉操作系统如何加载运行EXE文件。可指定四种方式：CONSOLE|WINDOWS|NATIVE|POSIX。</p><p>WinMainCRTStartup函数获得本进程的全部命令行指针和环境变量的指针，完成一些全局变量以及C运行时内存分配函数的初始化工作。如果使用C++，还要执行全局对象的构造函数。最后，WinMainCRTStartup函数调用WinMain函数， 并传给WinMain函数的4个参数：hInstance、hPrevInstance、lpCmdline、nCmdShow。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C程序的内存布局</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/C%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/C%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://hackthedeveloper.com/memory-layout-c-program/">Memory Layout Of A C Program</a></p><p>理解 C 程序及其进程的内存布局对于程序员学习内存管理至关重要。Java、Python、C#这类高级语言由 GC 自动释放堆内存，但 C 和 C++ 没有 GC 机制，因此需要程序员手动申请、释放。C 代码先被编译成可执行文件，运行后可执行文件被载入内存，然后 CPU 开始逐条读取、执行指令。注意：在被载入前，可执行文件不占用内存空间。如果您想了解从 C 代码到二进制文件的编译过程，可阅读此文章<a href="https://hackthedeveloper.com/c-program-compilation-process/">C Program Compilation Process - Source To Binary</a>。</p><p>C 程序的典型内存布局含以下几个区段：</p><ul><li><p>命令行参数</p></li><li><p>栈</p></li><li><p>堆</p></li><li><p>未初始化数据段（BSS）</p></li><li><p>已初始化数据段</p></li><li><p>代码段</p><p><img src="https://hackthedeveloper.com/wp-content/uploads/2020/11/Memory-layout.png.webp"></p></li></ul><p>按内存分配方式不同，上述区段可分为：</p><ol><li>静态内存区域：代码段、已初始化数据段、未初始化数据段</li><li>动态内存区域：堆、栈</li></ol><p>在编译期静态内存区域就已划分，动态内存区域必须等到程序跑起来才会形成。下面具体学习下各个区段。</p><h2 id="静态内存区域"><a href="#静态内存区域" class="headerlink" title="静态内存区域"></a>静态内存区域</h2><p>静态内存区域由代码段、已初始化数据段和未初始化数据段组成。这些区段最初划分在可执行文件中，加载时再由操作系统加载器将其从硬盘映射到内存。</p><p>最简单的 C 程序代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 1.c</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>**size **是 Linux 下用于查看目标文件、库文件和可执行文件中各个区段信息及其大小的工具。将上述代码编译后用该工具查看生成的可执行文件。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc <span class="token number">1</span>.c -o <span class="token number">1</span>.out$ size <span class="token number">1</span>.outtext    data     bss     dec     hex filename<span class="token number">785</span>     <span class="token number">276</span>       <span class="token number">4</span>      <span class="token number">1065</span>     <span class="token number">429</span> <span class="token number">1</span>.out <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p>代码段是静态内存区域的核心段，该区段包含了程序的机器指令、常量和字面量，这些指令实现了程序的逻辑。</p><p>代码段在堆和数据段之下，可读、可执行。为了避免遭受<strong>堆栈溢出</strong>的破坏，防止代码被意外修改，代码段不可写。</p><p>**objdump **是 Linux 下反汇编目标文件和可执行文件的工具。以下反汇编代码中的<code>&lt;main&gt;</code>函数对应了示例代码中的<code>main</code>函数。限于篇幅原因，只截取了部分代码展示。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ objdump -d <span class="token number">1</span>.out<span class="token number">1</span>.out:     <span class="token function">file</span> <span class="token function">format</span> elf32-littlearmDisassembly of section .init:0001029c <span class="token operator">&lt;</span>_init<span class="token operator">></span>:   1029c:       e92d4008        push    <span class="token punctuation">&#123;</span>r3, lr<span class="token punctuation">&#125;</span>   102a0:       eb00001d        bl      1031c <span class="token operator">&lt;</span>call_weak_fn<span class="token operator">></span>   102a4:       e8bd8008        pop     <span class="token punctuation">&#123;</span>r3, pc<span class="token punctuation">&#125;</span>Disassembly of section .plt:000102a8 <span class="token operator">&lt;</span>.plt<span class="token operator">></span>:   102a8:       e52de004        push    <span class="token punctuation">&#123;</span>lr<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>str lr, <span class="token punctuation">[</span>sp, <span class="token comment">#-4]!)</span>   102ac:       e59fe004        ldr     lr, <span class="token punctuation">[</span>pc, <span class="token comment">#4]    ; 102b8 &lt;.plt+0x10></span>   102b0:       e08fe00e        <span class="token function">add</span>     lr, pc, lr   102b4:       e5bef008        ldr     pc, <span class="token punctuation">[</span>lr, <span class="token comment">#8]!</span>   102b8:       00010d48        .word   0x00010d48000102bc <span class="token operator">&lt;</span>__libc_start_main@plt<span class="token operator">></span>:   102bc:       e28fc600        <span class="token function">add</span>     ip, pc, <span class="token comment">#0, 12</span>   102c0:       e28cca10        <span class="token function">add</span>     ip, ip, <span class="token comment">#16, 20 ; 0x10000</span>   102c4:       e5bcfd48        ldr     pc, <span class="token punctuation">[</span>ip, <span class="token comment">#3400]!        ; 0xd48</span>000102c8 <span class="token operator">&lt;</span>__gmon_start__@plt<span class="token operator">></span>:   102c8:       e28fc600        <span class="token function">add</span>     ip, pc, <span class="token comment">#0, 12</span>   102cc:       e28cca10        <span class="token function">add</span>     ip, ip, <span class="token comment">#16, 20 ; 0x10000</span>   102d0:       e5bcfd40        ldr     pc, <span class="token punctuation">[</span>ip, <span class="token comment">#3392]!        ; 0xd40</span>000102d4 <span class="token operator">&lt;</span>abort@plt<span class="token operator">></span>:   102d4:       e28fc600        <span class="token function">add</span>     ip, pc, <span class="token comment">#0, 12</span>   102d8:       e28cca10        <span class="token function">add</span>     ip, ip, <span class="token comment">#16, 20 ; 0x10000</span>   102dc:       e5bcfd38        ldr     pc, <span class="token punctuation">[</span>ip, <span class="token comment">#3384]!        ; 0xd38</span>Disassembly of section .text:000102e0 <span class="token operator">&lt;</span>_start<span class="token operator">></span>:   102e0:       e3a0b000        mov     fp, <span class="token comment">#0</span>   102e4:       e3a0e000        mov     lr, <span class="token comment">#0</span>   102e8:       e49d1004        pop     <span class="token punctuation">&#123;</span>r1<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>ldr r1, <span class="token punctuation">[</span>sp<span class="token punctuation">]</span>, <span class="token comment">#4)</span>   102ec:       e1a0200d        mov     r2, sp   102f0:       e52d2004        push    <span class="token punctuation">&#123;</span>r2<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>str r2, <span class="token punctuation">[</span>sp, <span class="token comment">#-4]!)</span>   102f4:       e52d0004        push    <span class="token punctuation">&#123;</span>r0<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>str r0, <span class="token punctuation">[</span>sp, <span class="token comment">#-4]!)</span>   102f8:       e59fc010        ldr     ip, <span class="token punctuation">[</span>pc, <span class="token comment">#16]   ; 10310 &lt;_start+0x30></span>   102fc:       e52dc004        push    <span class="token punctuation">&#123;</span>ip<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>str ip, <span class="token punctuation">[</span>sp, <span class="token comment">#-4]!)</span>   <span class="token number">10300</span>:       e59f000c        ldr     r0, <span class="token punctuation">[</span>pc, <span class="token comment">#12]   ; 10314 &lt;_start+0x34></span>   <span class="token number">10304</span>:       e59f300c        ldr     r3, <span class="token punctuation">[</span>pc, <span class="token comment">#12]   ; 10318 &lt;_start+0x38></span>   <span class="token number">10308</span>:       ebffffeb        bl      102bc <span class="token operator">&lt;</span>__libc_start_main@plt<span class="token operator">></span>   1030c:       ebfffff0        bl      102d4 <span class="token operator">&lt;</span>abort@plt<span class="token operator">></span>   <span class="token number">10310</span>:       0001044c        .word   0x0001044c   <span class="token number">10314</span>:       000103d0        .word   0x000103d0   <span class="token number">10318</span>:       000103ec        .word   0x000103ec0001031c <span class="token operator">&lt;</span>call_weak_fn<span class="token operator">></span>:   1031c:       e59f3014        ldr     r3, <span class="token punctuation">[</span>pc, <span class="token comment">#20]   ; 10338 &lt;call_weak_fn+0x1c></span>   <span class="token number">10320</span>:       e59f2014        ldr     r2, <span class="token punctuation">[</span>pc, <span class="token comment">#20]   ; 1033c &lt;call_weak_fn+0x20></span>   <span class="token number">10324</span>:       e08f3003        <span class="token function">add</span>     r3, pc, r3   <span class="token number">10328</span>:       e7932002        ldr     r2, <span class="token punctuation">[</span>r3, r2<span class="token punctuation">]</span>   1032c:       e3520000        <span class="token function">cmp</span>     r2, <span class="token comment">#0</span>   <span class="token number">10330</span>:       012fff1e        bxeq    lr   <span class="token number">10334</span>:       eaffffe3        b       102c8 <span class="token operator">&lt;</span>__gmon_start__@plt<span class="token operator">></span>   <span class="token number">10338</span>:       00010cd4        .word   0x00010cd4   1033c:       00000018        .word   0x0000001800010340 <span class="token operator">&lt;</span>deregister_tm_clones<span class="token operator">></span>:   <span class="token number">10340</span>:       e59f0018        ldr     r0, <span class="token punctuation">[</span>pc, <span class="token comment">#24]   ; 10360 &lt;deregister_tm_clones+0x20></span>   <span class="token number">10344</span>:       e59f3018        ldr     r3, <span class="token punctuation">[</span>pc, <span class="token comment">#24]   ; 10364 &lt;deregister_tm_clones+0x24></span>   <span class="token number">10348</span>:       e1530000        <span class="token function">cmp</span>     r3, r0   1034c:       012fff1e        bxeq    lr   <span class="token number">10350</span>:       e59f3010        ldr     r3, <span class="token punctuation">[</span>pc, <span class="token comment">#16]   ; 10368 &lt;deregister_tm_clones+0x28></span>   <span class="token number">10354</span>:       e3530000        <span class="token function">cmp</span>     r3, <span class="token comment">#0</span>   <span class="token number">10358</span>:       012fff1e        bxeq    lr   1035c:       e12fff13        bx      r3   <span class="token number">10360</span>:       00021024        .word   0x00021024   <span class="token number">10364</span>:       00021024        .word   0x00021024   <span class="token number">10368</span>:       00000000        .word   0x000000000001036c <span class="token operator">&lt;</span>register_tm_clones<span class="token operator">></span>:   1036c:       e59f0024        ldr     r0, <span class="token punctuation">[</span>pc, <span class="token comment">#36]   ; 10398 &lt;register_tm_clones+0x2c></span>   <span class="token number">10370</span>:       e59f1024        ldr     r1, <span class="token punctuation">[</span>pc, <span class="token comment">#36]   ; 1039c &lt;register_tm_clones+0x30></span>   <span class="token number">10374</span>:       e0411000        sub     r1, r1, r0   <span class="token number">10378</span>:       e1a01141        asr     r1, r1, <span class="token comment">#2</span>   1037c:       e0811fa1        <span class="token function">add</span>     r1, r1, r1, lsr <span class="token comment">#31</span>   <span class="token number">10380</span>:       e1b010c1        asrs    r1, r1, <span class="token comment">#1</span>   <span class="token number">10384</span>:       012fff1e        bxeq    lr   <span class="token number">10388</span>:       e59f3010        ldr     r3, <span class="token punctuation">[</span>pc, <span class="token comment">#16]   ; 103a0 &lt;register_tm_clones+0x34></span>   1038c:       e3530000        <span class="token function">cmp</span>     r3, <span class="token comment">#0</span>   <span class="token number">10390</span>:       012fff1e        bxeq    lr   <span class="token number">10394</span>:       e12fff13        bx      r3   <span class="token number">10398</span>:       00021024        .word   0x00021024   1039c:       00021024        .word   0x00021024   103a0:       00000000        .word   0x00000000000103a4 <span class="token operator">&lt;</span>__do_global_dtors_aux<span class="token operator">></span>:   103a4:       e92d4010        push    <span class="token punctuation">&#123;</span>r4, lr<span class="token punctuation">&#125;</span>   103a8:       e59f4018        ldr     r4, <span class="token punctuation">[</span>pc, <span class="token comment">#24]   ; 103c8 &lt;__do_global_dtors_aux+0x24></span>   103ac:       e5d43000        ldrb    r3, <span class="token punctuation">[</span>r4<span class="token punctuation">]</span>   103b0:       e3530000        <span class="token function">cmp</span>     r3, <span class="token comment">#0</span>   103b4:       18bd8010        popne   <span class="token punctuation">&#123;</span>r4, pc<span class="token punctuation">&#125;</span>   103b8:       ebffffe0        bl      <span class="token number">10340</span> <span class="token operator">&lt;</span>deregister_tm_clones<span class="token operator">></span>   103bc:       e3a03001        mov     r3, <span class="token comment">#1</span>   103c0:       e5c43000        strb    r3, <span class="token punctuation">[</span>r4<span class="token punctuation">]</span>   103c4:       e8bd8010        pop     <span class="token punctuation">&#123;</span>r4, pc<span class="token punctuation">&#125;</span>   103c8:       00021024        .word   0x00021024000103cc <span class="token operator">&lt;</span>frame_dummy<span class="token operator">></span>:   103cc:       eaffffe6        b       1036c <span class="token operator">&lt;</span>register_tm_clones<span class="token operator">></span>000103d0 <span class="token operator">&lt;</span>main<span class="token operator">></span>:   103d0:       e52db004        push    <span class="token punctuation">&#123;</span>fp<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>str fp, <span class="token punctuation">[</span>sp, <span class="token comment">#-4]!)</span>   103d4:       e28db000        <span class="token function">add</span>     fp, sp, <span class="token comment">#0</span>   103d8:       e3a03000        mov     r3, <span class="token comment">#0</span>   103dc:       e1a00003        mov     r0, r3   103e0:       e28bd000        <span class="token function">add</span>     sp, fp, <span class="token comment">#0</span>   103e4:       e49db004        pop     <span class="token punctuation">&#123;</span>fp<span class="token punctuation">&#125;</span>            <span class="token punctuation">;</span> <span class="token punctuation">(</span>ldr fp, <span class="token punctuation">[</span>sp<span class="token punctuation">]</span>, <span class="token comment">#4)</span>   103e8:       e12fff1e        bx      lr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="已初始化数据段"><a href="#已初始化数据段" class="headerlink" title="已初始化数据段"></a>已初始化数据段</h3><p>已初始化数据段存储了代码中所有已初始化的全局变量和已初始化的静态变量。</p><p>已初始化数据段可读、可写，储存在该段的数据可被实时修改。在上节代码中各增加一个全局变量和一个静态局部变量。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 2.c</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>对比可知，新文件的 data 段增加了8个字节，正好等于32位平台下2个 <code>int</code>型变量的字节数。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ size <span class="token number">1</span>.out <span class="token number">2</span>.out     text    data     bss     dec     hex filename    <span class="token number">785</span>     <span class="token number">276</span>       <span class="token number">4</span>    <span class="token number">1065</span>     <span class="token number">429</span> <span class="token number">1</span>.out    <span class="token number">785</span>     <span class="token number">284</span>       <span class="token number">4</span>    <span class="token number">1073</span>     <span class="token number">431</span> <span class="token number">2</span>.out <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="未初始化数据段（BSS）"><a href="#未初始化数据段（BSS）" class="headerlink" title="未初始化数据段（BSS）"></a>未初始化数据段（BSS）</h3><p>未初始化数据段也叫<code>BSS</code>段，其名称来源于一个古老的汇编操作符，该操作符代表 <strong>block started by the symbol</strong>（以符号开始的块）。</p><p>未初始化数据段存储了代码中所有未初始化的全局变量和未初始化的静态变量，本段同样可读、可写。</p><p>去掉上节代码中的初始化语句，只留下变量的声明。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 3.c</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>对比可知，新文件的 data 段减少了8个字节，bss 段恰好增加了8个字节。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ size <span class="token number">1</span>.out  <span class="token number">2</span>.out <span class="token number">3</span>.out    text    data     bss     dec     hex filename    <span class="token number">785</span>     <span class="token number">276</span>       <span class="token number">4</span>    <span class="token number">1065</span>     <span class="token number">429</span> <span class="token number">1</span>.out    <span class="token number">785</span>     <span class="token number">284</span>       <span class="token number">4</span>    <span class="token number">1073</span>     <span class="token number">431</span> <span class="token number">2</span>.out    <span class="token number">785</span>     <span class="token number">276</span>      <span class="token number">12</span>    <span class="token number">1073</span>     <span class="token number">431</span> <span class="token number">3</span>.out  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="动态分配的内存"><a href="#动态分配的内存" class="headerlink" title="动态分配的内存"></a>动态分配的内存</h2><p>下图是在程序运行期间对应进程的内存情况：</p><p><img src="https://hackthedeveloper.com/wp-content/uploads/2020/11/Memory-Management-in-C-768x251.png.webp"></p><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是进程虚拟地址空间中的一块区域，该区域按先进后出、后进先出的方式增加、移除数据，并且增加数据时地址从高往低增长。程序运行时可以没有堆，但不能没有栈，由此可见栈的重要性。</p><p>调用新的一个函数将创建一个新栈帧，函数返回后对应栈帧将被自动清除。每个函数都有一个独立的栈帧，也称为<strong>活动记录</strong>。栈帧的总大小是浮动的，这取决于局部变量、形参和函数调用情况。</p><p>每个进程都有自己固定或可配置的栈空间，栈空间中可容纳多个栈帧，操作系统会在进程结束后回收这些栈空间。使用<code>ulimit -s</code>命令查看当前 Linux 系统支持的最大栈空间。</p><div class="code-wrapper"><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">$ ulimit -s8192<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><code>cat /proc/xxx/limits</code>命令可查看某具体进程的栈空间限额。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /proc/6673/limitsLimit                     Soft Limit           Hard Limit           UnitsMax cpu <span class="token function">time</span>              unlimited            unlimited            secondsMax <span class="token function">file</span> size             unlimited            unlimited            bytesMax data size             unlimited            unlimited            bytesMax stack size            <span class="token number">8388608</span>              unlimited            bytesMax core <span class="token function">file</span> size        <span class="token number">0</span>                    unlimited            bytesMax resident <span class="token builtin class-name">set</span>          unlimited            unlimited            bytesMax processes             <span class="token number">6865</span>                 <span class="token number">6865</span>                 processesMax <span class="token function">open</span> files            <span class="token number">1024</span>                 <span class="token number">1048576</span>              filesMax locked memory         <span class="token number">67108864</span>             <span class="token number">67108864</span>             bytesMax address space         unlimited            unlimited            bytesMax <span class="token function">file</span> locks            unlimited            unlimited            locksMax pending signals       <span class="token number">6865</span>                 <span class="token number">6865</span>                 signalsMax msgqueue size         <span class="token number">819200</span>               <span class="token number">819200</span>               bytesMax <span class="token function">nice</span> priority         <span class="token number">0</span>                    <span class="token number">0</span>Max realtime priority     <span class="token number">2</span>                    <span class="token number">2</span>Max realtime <span class="token function">timeout</span>      unlimited            unlimited            us<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h4><p>栈帧存储了4类数据：</p><ul><li>传给被调用者的形参（按从右到左的顺序入栈）</li><li>调用者的返回地址</li><li>调用者的帧指针</li><li>被调用者中的局部变量</li></ul><p>32位操作系统中，调用者的返回地址和帧指针各占4个字节，而64位操作系统中各占8个字节。</p><p>以下代码用于展示栈的内存布局：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// stack_layout.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">float</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>s <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Average of %d, %d = %f\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>上述代码生成的程序运行起来后栈布局如下：</p><p><img src="https://hackthedeveloper.com/wp-content/uploads/2020/11/Stack-Layout.png.webp"></p><p>当前函数的栈帧总是位于进程栈区段的顶部。指向当前栈帧起始的指针称为帧指针或基指针；指向当前栈帧末尾的指针称为栈指针。被调用者帧针指向的4字节的内存空间存储了调用者的帧指针，其作用是被调用者返回后能够重新定位调用者的帧指针，以此恢复调用者的栈帧。</p><p>操作系统内存管理模块负责栈空间的分配与回收，程序员无法干涉。函数的栈帧被构造后，局部变量方能在此获得内存空间；若函数的栈帧被操作系统回收，局部变量也将随之消失；这就是所谓的变量作用域。</p><h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><p>接下来谈一谈可能发生的栈错误。</p><ol><li>栈溢出</li></ol><p>这种错误通常发生在一长串函数调用时，相应的栈帧不断累加，直至超过程序的栈内存限额。具体分以下两种情况：</p><ul><li>函数的递归调用</li><li>函数中声明了长数组</li></ul><p>因此，不推荐在栈中储存大对象。</p><ol start="2"><li>栈损坏</li></ol><p>当向目标空间拷贝了过量的数据往往就会发生栈损坏。</p><p>以下代码中先声明了一个10个元素的字符数组，再将命令行参数拷贝进来。命令行参数是人为给定的，当参数的字符总数超出了数组大小，多余字符将非法覆盖与数组相邻的栈空间，这就造成了栈损坏。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>从上文可知，栈空间的大小存在限制，因此不能用来存储大数据，并且程序员无法控制。堆不存在这些问题，也不被操作系统管理，您可以随时申请或释放一段连续的内存地址空间。</p><p><strong>Glibc</strong> 运行库提供了多个堆操作函数，详见 stdlib.h 头文件中相关函数的声明。其中，<code>malloc()</code>和<code>calloc()</code>函数用于向操作系统申请堆块，再通过返回指针访问堆块；<code>free()</code>函数用于释放堆块；这些函数底层都调用了<code>brk()</code>和<code>sbrk()</code>系统调用。以下代码展示了堆块申请和释放过程：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> aptr <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pointing in Stack = %d\n"</span><span class="token punctuation">,</span>  <span class="token operator">*</span>aptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Heap Memory Value = %d\n"</span><span class="token punctuation">,</span>  <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>malloc()</code>函数申请了4字节的堆块并返回一个指针（虚拟地址），通过该指针定位到区块，再将整型数20存储入其中。内存管理单元（MMU）会将虚拟地址转换成物理地址，因此20实际就存储在计算机的物理内存中。生成程序的堆、栈布局如下图。</p><p><img src="https://hackthedeveloper.com/wp-content/uploads/2020/11/heap-layout.png.webp"></p><p>堆中存储的数据不涉及作用域的概念，也无法被自动释放，要求程序员及时、自行释放，否则会造成内存泄漏。</p><p>感谢您的阅读，希望您喜欢这些有趣的知识。</p>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>C</tag>
      
      <tag>译文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C代码编译过程</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/C%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/C/C%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://hackthedeveloper.com/c-program-compilation-process/">C Program Compilation Process</a></p><p>也许您能够熟练编写 C 程序，但是您未必了解如何由 C 代码得到二进制文件，本文将系统介绍下这个过程。</p><h2 id="编译器介绍"><a href="#编译器介绍" class="headerlink" title="编译器介绍"></a>编译器介绍</h2><h3 id="编译器的定义"><a href="#编译器的定义" class="headerlink" title="编译器的定义"></a>编译器的定义</h3><p>维基百科关于编译器的定义如下：</p><blockquote><p>编译器（compiler）是一种计算机程序，它会将某种编程语言写成的源代码（原始语言）转换成另一种编程语言（目标语言）。它的主要目的是将便于人类编写、阅读、维护的高级计算机语言所写作的源代码程序，翻译为计算机能解读、运行的低级机器语言的程序，也就是可执行文件。</p></blockquote><h3 id="编译器的分类"><a href="#编译器的分类" class="headerlink" title="编译器的分类"></a>编译器的分类</h3><p>在正式讲编译过程之前，有必要提前了解下 C 编译器的分类。</p><h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><p>GCC 是 <strong>GNU Compiler Collection</strong>  的缩写，也是 GNU 项目的重要一员。只要遵循 <strong>GPL</strong> 协议，任何人都可以免费使用它。本文将使用该编译器作演示。</p><h4 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h4><p>Clang 编译器采用 LLVM 后端，可以编译C、C++、Object-C、Object-C++四种 C 系程序。该编译器基本用于 macOS 平台。</p><blockquote><p>当程序较大、较复杂时，GCC 在 macOS 上的表现欠佳，因此想到了 Clang。   —<a href="https://www.educba.com/best-c-compilers/">EDUCBA</a></p></blockquote><p>您可在该<a href="https://en.wikipedia.org/wiki/List_of_compilers">维基词条</a>下找到包括 C 编译器在内的市面上所有的编译器。下面让我们来剖析一下 C 程序的编译流程。</p><h2 id="编译流程详解"><a href="#编译流程详解" class="headerlink" title="编译流程详解"></a>编译流程详解</h2><p>写好代码之后，第一件要做的事就是编译代码，此过程往往耗费数秒。代码在这期间经过一系列转换，得到了二进制文件。另外，这个过程是顺序进行的，就好比工厂里的流水线，上一工序的输出是下一工序的输入。</p><p>进一步讲解之前，先声明以下两个约定：</p><ul><li>仅编译源文件</li><li>分开编译源文件</li></ul><p>C 程序的编译流程分四大步骤：</p><ol><li>预处理</li><li>编译</li><li>汇编</li><li>链接</li></ol><p>只有顺利通过上述所有步骤，才能输出产物。操作系统不同，输出产物也不同。在 Windows 系统下，通常得到 <strong>.exe</strong> 文件，而在 Linux 系统下默认生成 <strong>a.out</strong>。在上述任何步骤中，即使发生了一个细微的错误也会造成编译或链接失败。</p><p>下图展示了整个编译流程，您可以快速总览一下。</p><p><img src="https://nerdyelectronics.com/wp-content/uploads/2017/07/GCC_CompilationProcess.png"></p><p>以下命令可得到编译过程产生的所有中间文件和可执行文件：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc –Wall –save-temps cprogram.c –o cprogram<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>参数说明：</p><ul><li><p>-Wall</p><p>显示所有错误信息和警告信息</p></li><li><p>-save-temps</p><p>保存编译过程产生的中间文件</p></li><li><p>-o</p><p>指定输出文件名</p></li></ul><p>中间文件：</p><ul><li><p>cprogram.i</p><p>预处理器生成物</p></li><li><p>cprogram.s</p><p>编译器生成物</p></li><li><p>cprogram.o</p><p>汇编器生成物</p></li><li><p>cprogram.out</p><p>最终产物—可执行文件</p></li></ul><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理是整个编译流程的第一步，经过预处理的代码称为<strong>翻译单元</strong>。</p><p>任何 C 代码中都不可避免地要包含一些库、定义一些宏，有时还要设一些条件编译指令。所有这些指令被称为预处理指令。经过预处理后，预处理指令将被替换成原始值。</p><h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><p>C 代码的开头一般会包含一个或多个头文件。预处理器根据<code>#include</code>指令将相关头文件的内容替换进来。</p><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><p>C 语言中使用<code>#define</code>指令定义宏，预处理器会将这些宏替换成相应值。</p><h4 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h4><p>为了提高编译效率，我们期望需要编译的代码尽可能少，这时就用到了条件编译。预处理器会根据条件编译指令去除那些无需编译的代码。常见条件编译指令如下：</p><ul><li><strong>#undef</strong></li><li><strong>#ifdef</strong></li><li><strong>#ifndef</strong></li><li><strong>#if</strong></li><li><strong>#else</strong></li><li><strong>#elif</strong></li><li><strong>#endif</strong></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>为了提高程序的可读性，代码中经常要写注释。对于计算机而言，这些注释都是多余的，因此预处理器会移除代码中的注释。</p><h4 id="GCC-命令"><a href="#GCC-命令" class="headerlink" title="GCC 命令"></a>GCC 命令</h4><p>一个简单 C 程序的示例代码如下：</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Header File</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Max</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Print Hello World</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> Max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用<code>-E</code>参数将源文件转换成编译单元。由于包含了 stdio.h 头文件，翻译后的代码行数多达上千，以下只截取关键部分展示：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -E cprogram.c<span class="token comment"># 1 "cprogram.c"</span><span class="token comment"># 1 ""</span><span class="token comment"># 1 ""</span><span class="token comment"># 1 "cprogram.c"</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.typedef __time64_t time_t<span class="token punctuation">;</span><span class="token comment"># 435 "C:/msys64/mingw64/x86_64-w64-mingw32/include/corecrt.h" 3</span>typedef struct localeinfo_struct <span class="token punctuation">&#123;</span>  pthreadlocinfo locinfo<span class="token punctuation">;</span>  pthreadmbcinfo mbcinfo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> _locale_tstruct,*_locale_t<span class="token punctuation">;</span>typedef struct tagLC_ID <span class="token punctuation">&#123;</span>  unsigned short wLanguage<span class="token punctuation">;</span>  unsigned short wCountry<span class="token punctuation">;</span>  unsigned short wCodePage<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> LC_ID,*LPLC_ID<span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token comment"># 1582 "C:/msys64/mingw64/x86_64-w64-mingw32/include/stdio.h" 2 3</span><span class="token comment"># 3 "cprogram.c" 2</span><span class="token comment"># 5 "cprogram.c"</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    printf<span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>C 开发工具箱提供了一个专门用于预处理的工具 cpp，其用法如下：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cpp cprogram.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>综上，预处理器只是做了一些很基础的字符替换、移除等工作。预处理得到的文件扩展名为<code>.i</code>。如果将其直接作为编译器的输入，编译器假定此文件已完成预处理，自动跳过预处理步骤。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译是很关键的一步，此步骤的输入为翻译单元，输出为汇编代码。汇编代码接近硬件，但人类仍可读。</p><p>先用<code>-S</code>参数将源文件预处理、编译成汇编代码，再用<code>cat</code>命令查看结果。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -S cprogram.c$ <span class="token function">cat</span> cprogram.s.file<span class="token string">"cprogram.c"</span>.text.def<span class="token builtin class-name">printf</span><span class="token punctuation">;</span>.scl<span class="token number">3</span><span class="token punctuation">;</span>.type<span class="token number">32</span><span class="token punctuation">;</span>.endef.seh_proc<span class="token builtin class-name">printf</span>printf:pushq%rbp.seh_pushreg%rbppushq%rbx.seh_pushreg%rbxsubq<span class="token variable">$56</span>, %rsp.seh_stackalloc<span class="token number">56</span>leaq<span class="token number">128</span><span class="token punctuation">(</span>%rsp<span class="token punctuation">)</span>, %rbp.seh_setframe%rbp, <span class="token number">128</span>.seh_endprologuemovq%rcx, -48<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>movq%rdx, -40<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>movq%r8, -32<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>movq%r9, -24<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>leaq-40<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>, %raxmovq%rax, -96<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>movq-96<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>, %rbxmovl<span class="token variable">$1</span>, %ecxmovq__imp___acrt_iob_func<span class="token punctuation">(</span>%rip<span class="token punctuation">)</span>, %raxcall*%raxmovq%rbx, %r8movq-48<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>, %rdxmovq%rax, %rcxcall__mingw_vfprintfmovl%eax, -84<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>movl-84<span class="token punctuation">(</span>%rbp<span class="token punctuation">)</span>, %eaxaddq<span class="token variable">$56</span>, %rsppopq%rbxpopq%rbpret.seh_endproc.def__main<span class="token punctuation">;</span>.scl<span class="token number">2</span><span class="token punctuation">;</span>.type<span class="token number">32</span><span class="token punctuation">;</span>.endef.section .rdata,<span class="token string">"dr"</span>.LC0:.ascii <span class="token string">"Hello World<span class="token entity" title="\0">\0</span>"</span>.LC1:.ascii <span class="token string">"%d<span class="token entity" title="\0">\0</span>"</span>.text.globlmain.defmain<span class="token punctuation">;</span>.scl<span class="token number">2</span><span class="token punctuation">;</span>.type<span class="token number">32</span><span class="token punctuation">;</span>.endef.seh_procmainmain:pushq%rbp.seh_pushreg%rbpmovq%rsp, %rbp.seh_setframe%rbp, <span class="token number">0</span>subq<span class="token variable">$32</span>, %rsp.seh_stackalloc<span class="token number">32</span>.seh_endprologuecall__mainleaq.LC0<span class="token punctuation">(</span>%rip<span class="token punctuation">)</span>, %rcxcall<span class="token builtin class-name">printf</span>movl<span class="token variable">$10</span>, %edxleaq.LC1<span class="token punctuation">(</span>%rip<span class="token punctuation">)</span>, %rcxcall<span class="token builtin class-name">printf</span>movl<span class="token variable">$0</span>, %eaxaddq<span class="token variable">$32</span>, %rsppopq%rbpret.seh_endproc.ident<span class="token string">"GCC: (Rev3, Built by MSYS2 project) 10.2.0"</span>.def__mingw_vfprintf<span class="token punctuation">;</span>.scl<span class="token number">2</span><span class="token punctuation">;</span>.type<span class="token number">32</span><span class="token punctuation">;</span>.endef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>编译结果与 CPU 架构相关。即使同一份代码用同一个编译器编译，在不同 CPU 架构的机器上得到汇编结果也不同。编译得到的汇编代码属于低级语言，下一步骤将被转换为可重定位对象文件。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>汇编器用上一步得到的汇编代码生成机器代码，输出可重定位对象文件。CPU 架构不同，汇编器也不同。不同架构下的汇编器将汇编代码转换成匹配本架构的机器代码。</p><h4 id="生成可重定位对象文件"><a href="#生成可重定位对象文件" class="headerlink" title="生成可重定位对象文件"></a>生成可重定位对象文件</h4><p><code>as</code>工具可由汇编文件生成可重定位对象文件，用法如下：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ as cprogram.s -o cprogram.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>gcc 使用<code>-c</code>参数合并预处理、编译、汇编三个操作，直接从源文件生成对象文件。多个源文件要重复执行以下命令。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -c cprogram.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>机器指令人类不可读。截止目前，我们学会了如何从汇编文件或者源文件生成对象文件，下面仅就剩最后一步链接。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接也是至关重要的一步，这一步我们将合并&#x2F;链接多个对象文件，得到另一种可执行的对象文件。</p><p>假设有以下两个文件：htd.h 中声明了<code>printHTD()</code>函数，htd.c 中定义了<code>printHTD()</code>函数。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// htd.h</span><span class="token keyword">void</span> <span class="token function">printHTD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"htd.h"</span></span><span class="token keyword">void</span> <span class="token function">printHTD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hack The Developer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>cprogram.c 中的<code>main</code>()调用<code>printHTD</code>()输出字符串。</p><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// cprogram.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"htd.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printHTD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>先将源文件分别生成两个对象文件，然后使用<code>ld</code>工具将生成的对象文件链接起来。由于未链接标准库，链接器报错<strong>未定义的引用</strong>，链接失败！</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc -c cporgram.c$ gcc -c htd.c$ ld htd.o cprogram.o -o cprogram.outld: warning: cannot <span class="token function">find</span> entry symbol _start<span class="token punctuation">;</span> defaulting to 00010074ld: htd.o: <span class="token keyword">in</span> <span class="token keyword">function</span> <span class="token variable"><span class="token variable">`</span>printHTD':htd.c:<span class="token punctuation">(</span>.text+0xc<span class="token punctuation">)</span>: undefined reference to <span class="token variable">`</span></span>printf'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>gcc 内置的链接器可自动链接标准库，用法如下。链接成功，终于得到梦寐以求的可执行文件。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gcc cprogram.o htd.o -o cprogram.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="对象文件分析"><a href="#对象文件分析" class="headerlink" title="对象文件分析"></a>对象文件分析</h2><p><code>nm</code>工具用于显示对象文件里的各种符号。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nm htd.o         U <span class="token builtin class-name">printf</span>00000000 T printHTD$ nm cprogram.o00000000 T main         U printHTD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以上结果中，00000000为符号在对象文件中的偏移量，U 代表未定义(undefined)的符号，T 代表该符号位于代码段(Text)。链接器会从一起链接的标准库和其它对象文件中搜寻这些未定义符号，如果在别处都找到就能成功链接。下图展示了可重定位对象文件的文件结构。</p><p><img src="https://hackthedeveloper.com/wp-content/uploads/2020/10/Object-File-Structure.png.webp"></p><p>众多节中，以下4个节非常关键：</p><ul><li><p>.text</p><p>此节可读、可执行但不可写，存储了机器代码。</p></li><li><p>.data</p><p>此节可读，可写，存储了所有已初始化的全局变量和已初始化的静态变量。</p></li><li><p>.rodata</p><p>此节仅可读，储存了常量和字面量。</p></li><li><p>.bss</p><p>此节可读，可写，存储了所有未初始化的全局变量和未初始化的静态变量。</p></li></ul><p>ELF 是可执行文件、可重定位文件、共享库文件、核心转储文件的共同文件标准。在 Linux 下可用<code>readelf</code>工具读取标准 ELF 文件的信息。限于篇幅原因，这里不再演示。</p><p>可执行文件中的主要节的结构如下：</p><p><img src="https://hackthedeveloper.com/wp-content/uploads/2020/10/Structure.png.webp"></p><p>感谢您的阅读，希望您喜欢这些有趣的知识。</p>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>C</tag>
      
      <tag>译文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WinDbg快速入门</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/WinDbg%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/WinDbg%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>WinDbg 是 Windows 平台下的一款多用途调试器，由微软官方维护。区别于 OD，WinDbg  既可调试用户态代码，又能调试内核态代码及驱动程序。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Win10及以上系统可通过<a href="https://www.microsoft.com/en-us/p/windbg-preview/9pgjgd53tn86#activetab=pivot:overviewtab">微软商店</a>安装最新 Preview 程序，Win10以下只能下载安装包安装。</p><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>PDB(Program Database Files) 符号表文件由链接器生成，它是调试器与源文件之间的桥梁，记录了变量及函数的名称与地址、参数和局部变量的堆栈偏移量、源码的文件名和行号等信息，一般用于调试目的。PDB 文件默认搜索路径如下：</p><ol><li>当前被调试文件所在目录</li><li>当前被调试文件硬编码记录的 build 目录</li><li>symbol server 的本地缓存</li><li>远程 symbol server</li></ol><p>指定3路径、4路径命令如下：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.sympath SRV*c:<span class="token punctuation">\</span>windows<span class="token punctuation">\</span>localsymbols*http://msdl.microsoft.com/download/symbols<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="加载插件"><a href="#加载插件" class="headerlink" title="加载插件"></a>加载插件</h3><p>强大的程序大都支持插件，WinDbg 亦然。加载插件很简单，一句命令即可：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.load C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>Microsoft.NET<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>v4.0.30319<span class="token punctuation">\</span>SOS.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>上述命令只能一次性加载，下次还得重新执行。解决方法是将加载命令添加到启动命令组中。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/202202031653402.png" alt="image-20220203165342328"></p><h3 id="查看插件"><a href="#查看插件" class="headerlink" title="查看插件"></a>查看插件</h3><p><code>.chain</code>命令查看当前已加载插件列表</p><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p>SOS 插件随 .NET Framework 一同发布，提供了查看托管堆的方法。其对应 dll 文件既分 x86 和 x64 版本，又分 .NET 版本，因此应根据具体调试对象区分加载。</p><ul><li>.NET 4.0及上32位程序集</li></ul><p>  C:\Windows\Microsoft.NET\Framework\v4.0.30319\clr.dll</p><ul><li>.NET 4.0及上64位程序集</li></ul><p>  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\clr.dll</p><p>该插件常用方法如下：</p><ol><li><p>Name2EE</p><p>根据名称查找类型、属性及方法，其原理是遍历对象的 <code>MethodTable</code>和<code>EEClass</code>结构体。</p><p>基本语法：<code>Name2EE &lt;module name&gt; !&lt;type or method name&gt;</code>，通配符 * 代表所有模块，名称区分大小写。</p><p>典型用法：<code>!name2ee *!Program.Main</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>善用佳软</tag>
      
      <tag>CSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json 小抄</title>
    <link href="/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/json%E5%B0%8F%E6%8A%84/"/>
    <url>/2022/04/09/%E9%81%A8%E6%B8%B8%E7%A0%81%E6%B5%B7/json%E5%B0%8F%E6%8A%84/</url>
    
    <content type="html"><![CDATA[<p>JSON(JavaScript Object Notation)即JS对象表示法，是一种脱胎于JS的轻量级数据交换语言，语法非常简单易学。JSON独立于JS语言，常用于WEB应用开发及程序配置信息存储，可被多种编程语言支持。</p><p>JSON由对象<code>&#123;…&#125;</code>和数组<code>[…]</code>构成，对象采用<code>键值对</code>的书写方式，具体约定如下：</p><ul><li>键用字符串表示</li><li>值类型为字符串、数字、布尔型</li><li>每对键值用逗号隔开，末尾键值对不加逗号</li><li>数组元素类型为字符串、数字、布尔型及JSON对象</li><li>每对元素用逗号隔开，末尾元素不加逗号</li></ul>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
    <tags>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>钢铁的一些知识</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E9%92%A2%E9%93%81%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E9%92%A2%E9%93%81%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>有一本很著名的书，书名叫《枪炮、病菌与钢铁：人类社会的命运》，这本书讲述了人类文明的演化史，特别是西方现代文明的起源。从书名就可以看出钢铁对于人类文明发展的重要性。</p><p>第一次工业革命也叫蒸汽机革命，其实代表性的技术并非蒸汽机，而是铁路。无论是蒸汽机还是铁路，都需要大量的钢铁作为支撑。</p><p>本文将介绍一些关于钢铁的零碎知识，篇幅不会太长，避免像教科书般面面俱到地陈述。</p><h2 id="钢和铁"><a href="#钢和铁" class="headerlink" title="钢和铁"></a>钢和铁</h2><p>钢和铁就好比连体婴一样，常常一起出现在我们日常用语中。大多数人并不能分清钢和铁的区别，正如很少有人知道规和矩的不同。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/9944.jpg_wh300.jpg" alt="img"></p><p>钢和铁都是铁碳合金，纯铁和纯碳（比如石墨）质地都较软，工业用途有限。当铁原子、碳原子以体心立方或面心立方的型式排列形成晶胞后，反而展现出了强大的强度、刚度、硬度和韧性，广泛用于国民经济的各个领域。</p><p>根据含碳量的不同划分钢和铁。一般含碳量小于0.0218%的叫熟铁或纯铁，<strong>含量在0.0218%-2.11%之间的叫钢</strong>，含量在2.11%以上叫生铁。生铁又可分为炼钢生铁和铸造生铁。</p><h2 id="牌号"><a href="#牌号" class="headerlink" title="牌号"></a>牌号</h2><p>牌号是商品的重要属性，小小一个车厘子都能分出那么多品类和等级来，何况最重要的工业商品—钢。很多国家都自己独立的工业发展历程，因此衍生出了五花八门的牌号。常见的牌号有国标、美标、德标、日标等，<strong>304</strong>就是一个很典型的日标不锈钢牌号。</p><p>国标采用汉语拼音字母、化学元素符号和阿拉伯数字相结合的方式表示钢铁产品的牌号，具体命名规则如下。</p><h3 id="普通碳素结构钢"><a href="#普通碳素结构钢" class="headerlink" title="普通碳素结构钢"></a>普通碳素结构钢</h3><p>由前缀符号+强度值+质量等级符号+脱氧方式符号+后缀符号五个部分组成，每个部分的意义如下：</p><ol><li><p>前缀符号</p><p>通用结构钢前缀符号为屈服强度，用字母 Q 表示。结构配筋图中也有两个前缀很常见：HPB—热轧光圆钢筋、HRB—热轧带肋钢筋。</p></li><li><p>强度值</p><p>表示强度的具体数值，单位为 MPa。注意不要将其与许用应力混淆。</p></li><li><p>质量等级符号（非必要）</p><p>用 A、B、C、D…等字母表示不同的质量等级。</p></li><li><p>脱氧方式（非必要）</p><p>沸腾钢、半镇静钢、镇静钢和特殊镇静钢分别以字母 F、b、Z、TZ 表示，镇静钢和特殊镇静钢不用表示。</p></li><li><p>后缀符号（非必要）</p><p>代表产品的用途、特性和工艺方法，比如 Q345R 代表该钢种用于压力容器。</p></li></ol><p>Q235B 是最常用的普通碳素结构钢，其常温屈服强度为235MPa，质量等级 B（经过常温冲击试验），镇静钢。</p><h3 id="优质碳素结构钢"><a href="#优质碳素结构钢" class="headerlink" title="优质碳素结构钢"></a>优质碳素结构钢</h3><p>优质碳素钢的含碳小于0.8%，并且硫、磷等有害元素及非金属夹杂物的含量都比普通碳素结构钢少，因此机械性能也更佳。</p><p>由平均含碳量+锰元素符号+冶金质量符号+脱氧方式符号+后缀符号五个部分组成，每个部分的意义如下：</p><ol><li><p>平均含碳量</p><p>以两位数字表示平均碳含量（万分之几计），比如20#。</p></li><li><p>锰元素符号（非必要）</p><p>含锰量量较高时加锰元素符号Mn特别说明，比如 16MnR。</p></li><li><p>冶金质量符号（非必要）</p><p>高级优质钢、特级优质钢分别以字母 A、E 表示，优质钢不用表示。</p></li><li><p>脱氧方式符号（非必要）</p><p>沸腾钢、半镇静钢、镇静钢和特殊镇静钢分别以字母 F、b、Z、TZ 表示，镇静钢和特殊镇静钢不用表示。</p></li><li><p>后缀符号（非必要）</p><p>代表产品的用途、特性和工艺方法。</p></li></ol><h3 id="合金结构钢"><a href="#合金结构钢" class="headerlink" title="合金结构钢"></a>合金结构钢</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>合金元素总含量＜5%时称为低合金钢，5%≤合金元素总含量＜10%时称为中合金钢，合金元素总含量≥10%时称为高合金钢。</p><h4 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h4><p>由平均含碳量+主要合金元素含量+冶金质量符号+后缀符号四个部分组成，每个部分的意义如下：</p><ol><li><p>平均含碳量</p><p>以两位数字表示平均碳含量（万分之几计）。</p></li><li><p>主要合金元素含量</p><p>除个别微量合金元素外，主要合金元素一般以百分之几表示。</p><p>当平均合金含量&lt;1.5%时，牌号中一般只标出元素符号，而不标明具体含量。但特殊情况下可能导致混淆时，在元素符号后也可标以数字”1”，例如牌号”12CrMoV”和”12Cr1MoV”，前者铬含量为0.4-0.6%，后者为0.9-1.2%，其余成分完全相同。</p><p>当合金元素平均含量≥1.5%、≥2.5%、≥3.5%…时，在元素符号后面应标明含量，可相应表示为2、3、4…等。</p></li><li><p>冶金质量符号（非必要）</p><p>高级优质钢、特级优质钢分别以字母 A、E 表示，优质钢不用表示。</p></li><li><p>后缀符号（非必要）</p><p>代表产品的用途、特性和工艺方法。</p></li></ol><p>锅炉常用钢 12Cr1MoVG 牌号意义为：碳含量在0.08%-0.15%之间；铬含量在0.90%-1.2%之间；钼、钒各自平均含量在1.5%以下，不表示；G 代表锅炉用钢。</p><h4 id="合金元素作用"><a href="#合金元素作用" class="headerlink" title="合金元素作用"></a>合金元素作用</h4><p>钢中加入合金元素后，能形成一定数量的合金碳化物，细化晶粒，提高淬透性，增加回火稳定性，以达到增加耐磨性和提高韧性的作用。所加入的主要合金元素及其作用如下：</p><ol><li><p>铬</p><p>铬显著增加钢的淬透性，有效提高钢的回火稳定性。</p></li><li><p>钼</p><p>钼可增加钢的淬透性和高温蠕变强度，回火稳定性和二次硬化效果也强于钼，但钼增加脱碳倾向。</p></li><li><p>钒</p><p>钒主要以 V<sub>4</sub>C<sub>3</sub> 的形式存在于钢中，能显著提高钢的耐磨性和热硬性，同时还可细化晶粒、降低过热敏感性。</p></li><li><p>镍</p><p>镍既能提高钢的强度，又能提高钢的韧性，同时提高钢的淬透性；含量较高时，可显著提高钢的耐腐烛性。</p></li></ol><h2 id="电化学腐蚀"><a href="#电化学腐蚀" class="headerlink" title="电化学腐蚀"></a>电化学腐蚀</h2><h3 id="规范条文"><a href="#规范条文" class="headerlink" title="规范条文"></a>规范条文</h3><p>国标《管道支吊架第1部分：技术规范》GBT 17116.1-2018中关于隔离垫的要求如下：</p><blockquote><p>与有色金属管道直接接触的管部结构，为防止电化学腐蚀，应在其与管道接触部位的表面涂衬足够绝缘强度的非金属涂层、防护膜或衬垫。</p><p>不锈钢管道与管部结构之间应加置不锈钢板衬垫，防止不锈钢管道的电化学损伤。 </p></blockquote><p>电力规《火力发电厂汽水管道设计规范》DL&#x2F;T 5054-2016中的要求类似：</p><blockquote><p>不锈钢管道不应直接与碳钢支吊架管部焊接或接触，应在不锈钢管道与碳钢管部之间设不锈钢垫板或非金属材料隔离垫。</p></blockquote><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/%E9%9A%94%E7%A6%BB%E5%9E%AB.jpg"></p><h3 id="腐蚀机理"><a href="#腐蚀机理" class="headerlink" title="腐蚀机理"></a>腐蚀机理</h3><p>金属腐蚀按机理不同，一般分为化学腐蚀和电化学腐蚀。</p><p>化学腐蚀是金属在干燥气体中或非电解质溶液中（如酒精、石油等〉发生的腐蚀，腐蚀过程中无电流产生。</p><p>电化学腐蚀是指金属在电解质溶液中因电化学作用导致的腐蚀，腐蚀过程中有电流产生。大气腐蚀、海水腐蚀、土壤腐蚀等都属于电化学腐蚀。大气腐蚀指金属在潮湿空气中其表面吸附了空气中的水份，形成一层水膜，而空气中的二氧化碳、二氧化硫、二氧化氮等气体溶解在这层水膜中后形成了电解质溶液，进而发生的电化学腐蚀。</p><p>电化学腐蚀发生时，活泼元素充当阳极，发生氧化反应后溶解，非活泼元素充当阴极，仅发生还原反应。高合金钢含有大量合金成分，部分合金成分的活性比铁元素高，当与普通碳钢直接接触时，容易诱发电化学反应。因此，相关标准才作出上节要求。</p>]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蒸汽安全阀相关计算</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E8%92%B8%E6%B1%BD%E5%AE%89%E5%85%A8%E9%98%80%E7%9B%B8%E5%85%B3%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E8%92%B8%E6%B1%BD%E5%AE%89%E5%85%A8%E9%98%80%E7%9B%B8%E5%85%B3%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>安全阀是各行各业都会用到的重要安全泄放装置，大到运载火箭，小到家用高压锅，都出现了安全阀的身影。另一种常见安全泄放装置是爆破片或者两者的组合。</p><p>本文的目的不在于扫盲，不会介绍安全阀的入门知识。读者如果不具备相关背景知识，请提前做好功课，仔细阅读<a href="http://std.samr.gov.cn/gb/search/gbDetailed?id=BD89DE8E079C3D08E05397BE0A0A4FAD">GB&#x2F;T 12241-2021《安全阀 一般要求》</a>和<a href="http://std.samr.gov.cn/gb/search/gbDetailed?id=C1A814733B2C7A48E05397BE0A0A1C8D">GB&#x2F;T 12243-2021 《弹簧直接载荷式安全阀》</a>两本规范。同时也不会站在制造商的角度，阐述安全阀该如何设计、制造、检验。本文只针对<strong>蒸汽用弹簧直接荷载式安全阀</strong>，谈谈排放面积、出口压力及排放反力的计算[^1]。</p><h2 id="手工计算"><a href="#手工计算" class="headerlink" title="手工计算"></a>手工计算</h2><p>国内涉及安全阀相关计算的规范主要有两本：HG&#x2F;T 20570.02-1995《安全阀的设置和选用》及DL&#x2F;T 5054-2016 《火力发电厂汽水管道设计规范》，GB&#x2F;T 12243-2021附录B也介绍了排放面积的计算。另外，强烈推荐读读ASME规范、API规范，顺便还提高英语水平。</p><h3 id="排放面积计算"><a href="#排放面积计算" class="headerlink" title="排放面积计算"></a>排放面积计算</h3><p>经过收集对比，排放面积（也称喉部面积）计算公式无一例外如下：<br>$$<br>A_c &#x3D; \frac {W_r}  {5.25 \times  P_{dr} \times K_{dr} \times K_{sh} \times K_n \times K_b \times K_c}<br>$$</p><p>式中：</p><ul><li><p>A<sub>c</sub>—计算排放面积，mm<sup>2</sup>；</p></li><li><p>W<sub>r</sub> —需要排放量，kg&#x2F;h；</p></li><li><p>P<sub>dr</sub>—额定排放压力，MPaA(绝对压力)；</p></li><li><p>K<sub>dr</sub>—额定排量系数，其实就是裕度系数，全启式安全阀取值范围为0.6~0.7，制造商数据一般不低于0.75；</p></li><li><p>K<sub>sh</sub>—过热修正系数，查GB&#x2F;T 12243-2021附表B.1；</p></li><li><p>K<sub>n</sub>—Napier修正系数（也称高压系数），当P<sub>dr</sub>≤10.44时，K<sub>n</sub>&#x3D;1；当10.44Mpa&lt;P≤22.17时，<br>$$<br>K_n &#x3D; \frac {27.637-1000} {33.234P_{dr}-1061}<br>$$</p></li><li><p>K<sub>b</sub>—背压修正系数，该系数仅用于波纹管平衡式安全阀，对于弹簧直接荷载式安全阀，K<sub>b</sub>&#x3D;1；</p></li><li><p>K<sub>c</sub>—爆破片修正系数，不带爆破片时，K<sub>c</sub>&#x3D;1  。</p></li></ul><p>上述参数中，除额定排放压力外，其余参数要么用户给定，要么取默认值，要么查表。仅额定排放压力需单独计算，计算公式如下：<br>$$<br>P_{dr} &#x3D; P_s \times (1+\Delta P_o) + P_{atm}<br>$$<br>式中：</p><ul><li><p>P<sub>s</sub>—整定压力，MPag；</p></li><li><p>ΔP<sub>o</sub> —允许超压百分比，查GB&#x2F;T 12243-2021表6；</p></li></ul><table><thead><tr><th align="center">蒸汽锅炉用</th><th align="center">其它蒸汽设备用</th><th align="center">气体用</th><th align="center">液体用</th></tr></thead><tbody><tr><td align="center">3%</td><td align="center">10%</td><td align="center">10%</td><td align="center">10%</td></tr></tbody></table><ul><li>P<sub>atm</sub>—当地大气压，平原地区可取0.101</li></ul><p>下面将某项目真实数据依次代入上述两个公式，求解排放面积 。此安全阀位于减温减压器二次蒸汽管道，选用弹簧直接荷载式，设计输入如下：</p><table><thead><tr><th>参数</th><th align="center">单位</th><th align="center">数值</th></tr></thead><tbody><tr><td>需要排放量</td><td align="center">kg&#x2F;h</td><td align="center">10000</td></tr><tr><td>整定压力</td><td align="center">MPag</td><td align="center">1.7</td></tr><tr><td>排放温度</td><td align="center">℃</td><td align="center">250</td></tr></tbody></table><ol><li><p>排放压力<br>$$<br>P_{dr} &#x3D; P_s \times (1+\Delta P_o) + P_{atm} &#x3D; 1.7 \times {(1+0.1)} + 0.101 &#x3D;1.971  MPaA<br>$$</p></li><li><p>排放面积 </p><p>查表得到过热蒸汽修正系数为0.963，代入数据：<br>$$<br>A_c &#x3D; \frac {W_r}  {5.25 \times  P_{dr} \times K_{dr} \times K_{sh} \times K_b \times K_c \times K_n} &#x3D; \frac {10000}  {5.25 \times  1.971 \times 0.87 \times 0.963 \times 1 \times 1 \times 1} &#x3D; 1153.5mm^2<br>$$</p></li></ol><p>得到计算面积后就可以选择具体型号，保证流道面积满足要求，流道系列详下表。选型完成后，再根据实际排放面积反算额定排放量，以校核排放能力是否满足要求。</p><center>国标安全阀流道直径—流道面积对应表</center><table><thead><tr><th align="center">流道直径(mm)</th><th align="center">流道面积(mm<sup>2</sup>)</th><th align="center">全启式进口公称直径</th></tr></thead><tbody><tr><td align="center">12</td><td align="center">113.1</td><td align="center"></td></tr><tr><td align="center">16</td><td align="center">201.1</td><td align="center"></td></tr><tr><td align="center">20</td><td align="center">314.2</td><td align="center">32</td></tr><tr><td align="center">25</td><td align="center">490.9</td><td align="center">40</td></tr><tr><td align="center">32</td><td align="center">804.2</td><td align="center">50</td></tr><tr><td align="center">40</td><td align="center">1256.6</td><td align="center">65</td></tr><tr><td align="center">50</td><td align="center">1963.5</td><td align="center">80</td></tr><tr><td align="center">65</td><td align="center">3318.3</td><td align="center">100</td></tr><tr><td align="center">80</td><td align="center">5026.5</td><td align="center"></td></tr><tr><td align="center">100</td><td align="center">7854.0</td><td align="center">150</td></tr><tr><td align="center">125</td><td align="center">12271.8</td><td align="center">200</td></tr></tbody></table><center>美标安全阀流道直径—流道面积对应表</center><table><thead><tr><th align="center">流道代号</th><th align="center">流道直径(mm)</th><th align="center">流道面积(mm<sup>2</sup>)</th></tr></thead><tbody><tr><td align="center">D</td><td align="center">9.5</td><td align="center">70.9</td></tr><tr><td align="center">E</td><td align="center">12.7</td><td align="center">126.7</td></tr><tr><td align="center">F</td><td align="center">15.9</td><td align="center">198.6</td></tr><tr><td align="center">G</td><td align="center">20.3</td><td align="center">323.7</td></tr><tr><td align="center">H</td><td align="center">25.4</td><td align="center">506.7</td></tr><tr><td align="center">J</td><td align="center">32.5</td><td align="center">829.6</td></tr><tr><td align="center">K</td><td align="center">38.9</td><td align="center">1188.5</td></tr><tr><td align="center">L</td><td align="center">48.4</td><td align="center">1839.8</td></tr><tr><td align="center">M</td><td align="center">54.4</td><td align="center">2324.3</td></tr><tr><td align="center">N</td><td align="center">59.7</td><td align="center">2799.2</td></tr><tr><td align="center">P</td><td align="center">72.4</td><td align="center">4116.9</td></tr><tr><td align="center">Q</td><td align="center">95.3</td><td align="center">7133.1</td></tr><tr><td align="center">R</td><td align="center">114.6</td><td align="center">10386.9</td></tr><tr><td align="center">T</td><td align="center">146</td><td align="center">16741.5</td></tr></tbody></table><h3 id="出口压力计算"><a href="#出口压力计算" class="headerlink" title="出口压力计算"></a>出口压力计算</h3><p>安全阀出口排放压力影响排放管壁厚的计算，目前国内涉及的规范唯有DL&#x2F;T 5054-2016 《火力发电厂汽水管道设计规范》，但有研究显示其中的计算方法存在瑕疵，饱和蒸汽计算误差较大。笔者推荐几篇论文供大家赏析：</p><ol><li><a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2003&filename=RLFD200301006&uniplatform=NZKPT&v=%25mmd2BytLHo8%25mmd2Bl%25mmd2FwXd0Dd%25mmd2BtPmSi%25mmd2FuTvmorcycCbGeHF5M4f60FJ7YdsFk7g9YC2M2MpRC">火电厂安全阀排汽管道参数计算方法的讨论</a></li><li><a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2009&filename=GXDL200905028&uniplatform=NZKPT&v=cYQg794Gra%25mmd2BWG3KT1jDR4HXlFvjBswsk5efZJSSM98B7nosX8WB%25mmd2BN8qjcEqAa4d%25mmd2B">330MW机组锅炉安全阀排汽管道强度核算及探讨</a></li><li><a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&dbname=CJFD2011&filename=SLDL201111005&uniplatform=NZKPT&v=IAA00VzThx10FU446oGtY5RAwiCWPDqxrJGGvuB1gZAV1JYwdITLBDnoutXnkyB%25mmd2B">电厂安全阀排汽管道热力计算及应用</a></li></ol><p>ASME B31.1《POWER PIPING》非强制附录II提供的计算方法按<strong>滞止焓</strong>计算，被认为适用性更广、计算精度更高。该规范中安全阀出口排放管压力计算公式如下：<br>$$<br>P &#x3D; \frac {G} {A} \cdot \frac {b-1}{b} \cdot \sqrt \frac {2(h_o-a)}{2b-1}<br>$$<br>式中：</p><ul><li>G—排放管流量，可取1.11倍安全阀额定排放量，kg&#x2F;s；</li><li>A —排放管面积，m<sup>2</sup>；</li><li>h<sub>0</sub>—安全阀进口滞止焓，J&#x2F;kg；</li><li>a—蒸汽状态系数；</li><li>b—蒸汽状态系数。</li></ul><ol><li><p>滞止焓</p><p>安全阀内达到稳定流动时的实际压力是排放压力，不是整定压力，因此滞止压力应取排放压力。滞止温度取蒸汽最高操作温度。根据滞止压力和滞止温度可计算得到滞止焓，常规计算公式为<a href="https://web1.hszg.de/thermo_fpc/">IAPWS-IF97</a>。</p></li><li><p>蒸汽状态参数</p></li></ol><table><thead><tr><th>排汽终态</th><th align="center">a(j&#x2F;kg)</th><th align="center">b</th></tr></thead><tbody><tr><td>湿蒸汽，干度&lt;90%</td><td align="center">677000</td><td align="center">11</td></tr><tr><td>饱和蒸汽，干度≥90%<br />0.15MPaA ≤ P ≤ 6.89MPaA</td><td align="center">1913000</td><td align="center">4.33</td></tr><tr><td>过热蒸汽，干度≥90%<br />6.89MPaA ≤ P ≤ 13.79MPaA</td><td align="center">1933000</td><td align="center">4.33</td></tr></tbody></table><p>结合下节安全阀实际数据得到：排放管流量为3.513kg&#x2F;s，排放管面积为0.00456㎡；1.971MPaA&#x2F;265℃蒸汽滞止焓为2941.94 kJ&#x2F;kg，代入上述公式：<br>$$<br>P &#x3D; \frac {G} {A} \cdot \frac {b-1}{b} \cdot \sqrt \frac {2(h_o-a)}{2b-1}&#x3D;\frac {3.513} {0.00456} \cdot \frac {4.33-1}{4.33} \cdot \sqrt \frac {2\times(2941.94-1933)\times1000}{2\times4.33-1}&#x3D;0.305MPaA<br>$$<br>在安全阀排放的刹那，管道内可能形成冲击波，因此<strong>B31.1规范要求管道设计压力取两倍计算值。</strong></p><p>出口流速计算如下：<br>$$<br>W &#x3D; \sqrt \frac {2(h_o-a)}{2b-1}&#x3D;\sqrt \frac {2\times(2941.94-1933)\times1000}{2\times4.33-1}&#x3D;513.255m&#x2F;s<br>$$</p><h3 id="排放反力计算"><a href="#排放反力计算" class="headerlink" title="排放反力计算"></a>排放反力计算</h3><p>尽管安全阀通常都是偶然、短暂排放，排放形成的反作用力对管系造成的不利影响却不容小觑，因此管道应力分析需要考虑安全阀排放工况。得到出口压力和出口流速后，即可计算出口反力，公式如下：<br>$$<br>F&#x3D;GW+1000\times({P-P_{atm}})A<br>$$<br>代入数据：<br>$$<br>F&#x3D;3.513\times513.255+({0.305-0.101})\times1000000\times0.00456&#x3D;2733N<br>$$</p><h2 id="软件计算"><a href="#软件计算" class="headerlink" title="软件计算"></a>软件计算</h2><h3 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h3><p>艾默生是一家跨国电气公司，其旗下的Fisher调节阀、Crosby安全阀、DCS系统、各种仪表等在石化、电力行业应用广泛。下面我们使用其免费提供的PRV<sup>2</sup>SIZE软件进行安全阀选型计算，<a href="https://valvesizing.emerson.com/Software/PRV2SIZEOverview.aspx">官方介绍</a>如下。软件具体包括哪些功能、怎么使用请参考官方<a href="https://valvesizing.emerson.com/ReferenceDocuments/PRV2SIZEQuickStartGuide.pdf">快速上手</a>，这里不再累述。</p><blockquote><p>PRV<sup>2</sup>SIZE software is an easy to use and comprehensive program that offers sizing, selection and configuration capabilities for Anderson Greenwood, Crosby and Varec brand Over Pressure Protection Valves and for Yarway brand Automatic Recirculation Control Valves</p><p>PRV<sup>2</sup>SIZE是一款功能全面且易于上手的阀门计算、选型软件，样本库包括了：Anderson Greenwood、Crosby 、Varec品牌安全阀和Yarway品牌最小流量阀。</p></blockquote><p>现在基于<strong>ASME Section VIII(API 520 Part I,9th edition)<strong>规范新建一个蒸汽安全阀计算实例，如果用于蒸汽锅炉，请选择</strong>ASME Section I</strong>规范。</p><h3 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h3><p>输入上节的排放温度、需要排放量、整定压力三个参数，运行后，软件很快给出了选型列表。我们选择列表第2项：Crosby的HSL系列安全阀，结构型式为常规式，阀盖型式为敞开式。对比发现，手算结果与软件计算结果差别很小。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/PRV2SIZE.png"></p><p><strong>其实计算方法都是公开统一的，唯一的区别就在于额定排放系数的取值，这对于选型有直接影响。在没有得到制造商数据的前提下，HG规范推荐取值0.6~0.7，DL规范推荐取值0.6，笔者认为都偏保守。当然最终应以制造商计算书为准。</strong></p><p>确定具体型号之后，接着要设置安全阀本体参数，包括材质、管口参数等。当红色警告消失，即可输出排汽反力。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/PRV2SIZE%25E6%258E%2592%25E6%25B1%25BD%25E5%258F%258D%25E5%258A%259B.png"></p><p>由于软件计算得到的出口压力与按B31.1手工计算结果出入较大，这里不再介绍此功能，读者可以自行发掘研究。</p>]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>管道应力分析</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E7%AE%A1%E9%81%93%E5%BA%94%E5%8A%9B%E5%88%86%E6%9E%90/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E7%AE%A1%E9%81%93%E5%BA%94%E5%8A%9B%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="应力分类"><a href="#应力分类" class="headerlink" title="应力分类"></a>应力分类</h3><p>取构件截面内一无限小微元体为研究对象。</p><ol><li>垂直于截面的应力分量称为正应力，用<code>σ</code>表示；</li><li>平行于截面的应力分量称为剪应力（也称切应力），用<code>τ</code>表示；</li><li>大多数截面上，正应力与剪应力同时存在，但在主平面上剪应力为零，此处的正应力被称为主应力。</li></ol><p>三维世界中的微元体由六个面组成，因此至多存在三对大小相同，方向相反的应力对。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210512093520226.png" alt="image-20210512093520226"></p><h3 id="应力状态"><a href="#应力状态" class="headerlink" title="应力状态"></a>应力状态</h3><ul><li>单向（简单）应力状态：三个主应力中只有一个不为零；</li><li>二向应力状态：三个主应力中有两个主应力不为零，剩下一个为零；</li><li>三向应力状态：三个主应力均不为零。</li></ul><h2 id="强度理论"><a href="#强度理论" class="headerlink" title="强度理论"></a>强度理论</h2><h3 id="理论定义"><a href="#理论定义" class="headerlink" title="理论定义"></a>理论定义</h3><ol><li><p>第一强度理论，即最大拉应力理论，仅适用于脆性材料受拉的情况，不包括单向压缩。</p></li><li><p>第二强度理论，即最大伸长线应变理论，主要适用于脆性材料受单向和双向压缩为主的情况。经实验验证，该理论误差很大，只有极少数的几种材料适用。</p></li><li><p>第三强度理论，即最大剪应力理论，主要适用于塑性材料单向和二向应力的情况，形式简单，计算方便，因此应用最广。</p></li><li><p>第四强度理论，即畸变能理论（von mises理论），主要适用于塑性材料单向和二向应力的情况，精度比第三强度理论要高，当然计算也麻烦些。</p></li></ol><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ol><li>第一、第二强度理论适用于铸铁、石料、混凝土、玻璃等，通常<strong>断裂失效</strong>的脆性材料。 　</li><li>第三、第四强度理论适用于碳钢、铜、铝等，通常<strong>屈服失效</strong>的塑性材料。由于第三强度理论结果较保守，实际工程中压力容器、压力管道、管道应力等计算采用第三强度理论，钢结构计算采用的是第四强度理论。</li></ol><h3 id="应力合成"><a href="#应力合成" class="headerlink" title="应力合成"></a>应力合成</h3><p>强度理论仅告诉我们所谓当量应力的合成方式，即将一次应力、二次应力、冷态应力、热态应力不同大小、方向的应力成份合成当量应力。<code>ASME B31.3</code>依据第三强度理论合成当量应力，<code>EN13941</code> 和<code>GOST55596</code>则采用了第四强度理论。</p><blockquote><p>In piping stress analysis, we deal mostly with tow-dimensional fields with the stess at the third dimensional either zero or insignificant.In this case,it is simple to calculate the stress intensity directly form the general stress field,without calculating the principal stress. </p></blockquote><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210512095029849.png" alt="image-20210512095029849"></p><h3 id="强度、刚度、稳定性"><a href="#强度、刚度、稳定性" class="headerlink" title="强度、刚度、稳定性"></a>强度、刚度、稳定性</h3><ul><li>强度：构件抵抗破坏的能力</li><li>刚度：构件抵抗变形的能力</li><li>稳定性：构件抵抗失稳而维持原平衡状态的能力</li></ul><h2 id="管道机械"><a href="#管道机械" class="headerlink" title="管道机械"></a>管道机械</h2><h3 id="管道荷载分类"><a href="#管道荷载分类" class="headerlink" title="管道荷载分类"></a>管道荷载分类</h3><ol><li><p>持续荷载</p><p>此类荷载由重力、内压、支架摩擦反力、盲板力等引起，特点是荷载大小不随管道变形改变。</p></li></ol><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210512094747622.png" alt="image-20210512094747622"></p><ol start="2"><li><p>位移荷载</p><p>管道热胀冷缩、端点附加位移引起管道发生变形。如果变形受到限制就会产生位移荷载；<strong>而变形一旦被放开，位移荷载将大幅降低甚至消失</strong>此特征称为自限性。</p></li></ol><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/38930.png" alt="38930"></p><ol start="3"><li><p>偶然荷载 </p><p>通常指安全阀排放反力、风、雪、地震等荷载，与持续荷载特征一致，但这种荷载不会持续出现。</p></li></ol><h3 id="管道失效形式"><a href="#管道失效形式" class="headerlink" title="管道失效形式"></a>管道失效形式</h3><ol><li><p>破裂：管道内压使管道产生环向应力，而过大的环向应力会造成管道破裂。环向应力计算公式为<code>P*D/2t</code>，增加壁厚可降低环向应力。</p></li><li><p>腐蚀：材料耐腐蚀性不够</p></li><li><p>垮塌：支架过载导致</p></li><li><p>疲劳：加载次数过多、频繁开停车、反复热胀冷缩就会导致疲劳破坏，焊缝开裂就是典型疲劳破坏。</p></li><li><p>碰撞：大变形导致</p></li><li><p>管口过载：管口焊口处或法兰密封面将发生泄漏</p></li></ol><h3 id="管道力学模型"><a href="#管道力学模型" class="headerlink" title="管道力学模型"></a>管道力学模型</h3><p>实际工程中管道会被弯曲（主要形式）、被扭转、被剪切，类似于材料力学的简单梁单元，因此可以将管道当作梁进行分析。梁的力学行为一般通过端点来描述，因此CaesarII软件算的都是梁端部节点的应力。计算梁单元模型管道应力需下述参数：外径、壁厚、密度、弹性模量、泊松比、线胀系数、刚度等。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210512093552072.png" alt="image-20210512093552072"></p><h3 id="管道基本应力"><a href="#管道基本应力" class="headerlink" title="管道基本应力"></a>管道基本应力</h3><ul><li><strong>轴向应力（重点）</strong>：轴向应力比其它方向应力都大，主要由轴向集中力（盲板力、摩擦力）、内压、重力、温度引发的弯矩（管截面外侧拉力&gt;内侧压力）导致。</li><li>环向应力：第2节已描述</li><li>径向应力：一般不超管道内压，基本无需校核。</li><li>剪应力：只有在管道受扭的情况下才会产生剪应力。动力管道支架大量采用弹簧吊，而弹簧的横向刚度几乎为零，因此即使管道本身受扭，管系也不会大幅扭转变形。工艺管道则会考虑扭转变形。</li></ul><h3 id="管道规范应力"><a href="#管道规范应力" class="headerlink" title="管道规范应力"></a>管道规范应力</h3><p>规范定义的应力不是真实应力，且规范只规定校核轴向应力。根据荷载不同分为三类：</p><ul><li>一次应力（sustain stress）：由持续性荷载产生，从变形和破坏两个角度分析；</li><li>二次应力（expansion stress）：由温差、沉降等带来的位移荷载产生，仅从疲劳一个角度分析；</li><li>偶然应力（occasional stress）：由偶然荷载产生</li></ul><h4 id="一次应力"><a href="#一次应力" class="headerlink" title="一次应力"></a>一次应力</h4><p>一次应力计算公式：  </p><p>$$<br>\frac{F}{A}+\frac{P\ast D_i^2}{D_o^2-D_i^2}+i\frac{M}{Z}\leq S_h<br>$$</p><p>其中：F为轴向集中力，i为应力增大系数，M为重力产生的弯矩，Z为抗弯截面模量，S<del>h</del>为材料热态许用应力。结合公式与工程实际可知，降低一次应力的最有效途径是减小弯矩M，即减小支吊架跨距。CaesarII一次应力校核公式如下：  </p><p>$$<br>\sigma_{sus}&#x3D;\sigma_1&#x3D;0.75i\frac{M_A}{Z}+\frac{PD_o}{4t}\leq \sigma_h<br>$$</p><p>重力为均布荷载，其弯矩近似认为介于受均布荷载作用的简支梁（端部为铰接，可以自由转动）与固支梁之间。通过反算得到管道跨距公式：</p><p>$$<br>L\leq \sqrt{(S_h-\frac{PD }{4t})(\frac{10Z}{iw})}<br>$$</p><p>因此一次应力的校核实际就是校核管道跨距。考虑动力管道常选用吊架且极少使用补偿器，因此B31.1忽略了<code>F/A</code>这一项，但B31.3规范仍有考虑。</p><h4 id="二次应力"><a href="#二次应力" class="headerlink" title="二次应力"></a>二次应力</h4><h5 id="二次应力计算"><a href="#二次应力计算" class="headerlink" title="二次应力计算"></a>二次应力计算</h5><p>二次应力是位移荷载在管道轴向产生的应力，如果管道能够自由变形就不会产生位移荷载，也无需校核二次应力。位移的主要来源为：设备本体的热胀冷缩作用于管口、基础沉降作用于管口、主管的位移作用于支管。</p><p>首先分析下两端固支直管对支架的推力，推导过程如下：</p><p>$$<br>F&#x3D;\sigma\ast A&#x3D;E\frac{\Delta L}{L}&#x3D;E\frac{\alpha\Delta TL}{L}&#x3D;E\alpha\Delta T<br>$$</p><p>其中，E为弹性模量，α为线胀系数，ΔT为温差；由此可见，推力与管道的长度无关。</p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210225162831717.png" alt="image-20210225162831717" style="zoom:50%;" /><p>假设上图AB段为主管，BC段为补偿臂（非约束段），二次应力推导过程如下：</p><p>$$<br>\Delta &#x3D; \frac{FL^3}{12EI}\Rightarrow F&#x3D;\frac{12EI}{L^3}\Delta<br>$$</p><p>假定B端转角$\theta$为零，则合成弯矩</p><p>$$<br>M&#x3D;\frac{FL}{2}&#x3D;\frac{6EI}{L^2}\Delta<br>$$</p><p>$$<br>S&#x3D;\frac{M}{Z}&#x3D;\frac{1}{Z}\frac{6EI}{L^2}\Delta&#x3D;\frac{1}{\pi r^2t}\frac{6E\pi r^3t}{L^2}\Delta &#x3D; \frac{6Er}{L^2}\Delta&#x3D;\frac{3ED_o}{L^2}\Delta<br>$$</p><p>$$<br>S_h&#x3D;i\frac{3ED_o}{L^2}\Delta\leq S_a<br>$$</p><p>其中，E为材料热态弹性模量，D<del>o</del>为管道外径，L为补偿臂长度，Δ为主管热胀量，i为应力增大系数。</p><h3 id="安定性准则"><a href="#安定性准则" class="headerlink" title="安定性准则"></a>安定性准则</h3><p>二次应力是根据安定性原则进行校核，即一次应力和二次应力之和不超过2倍屈服极限σ<del>s</del>，校核公式如下：</p><p>$$<br>\sigma_{exp}&#x3D;\sigma_2\leq f(1.25[\sigma]_c+1.25[\sigma]_h-\sigma_1)<br>$$</p><h3 id="应力增大系数"><a href="#应力增大系数" class="headerlink" title="应力增大系数"></a>应力增大系数</h3><p>表征管件局部应力集中的程度，早期通过实验获得该值。</p><h2 id="计算软件"><a href="#计算软件" class="headerlink" title="计算软件"></a>计算软件</h2><p>市面有多种应力计算软件，依托理论无非<code>有限元</code>和<code>梁单元</code>两种。有限元计算结果更精确，但计算量很大、计算速度偏慢，可将其理解成是一种硬刚的方式。CaesarII软件采用简单梁单元计算方法，在精度和速度之间平衡较好，目前广泛应用于石化、电力等行业。</p><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><p>CaesarII软件全部分析功能可分为管道、元件、设备三大类别，其中管道静态分析最常用。管道动态分析适用于管系振动、安全阀排放、地震等工况。NEMA SM23功能依据美国NEMA协会SM23规范校核工业透平管嘴及设备整体承受的作用力、作用力矩是否满足要求。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/CAESARII%25E5%258A%259F%25E8%2583%25BD%25E6%25A8%25A1%25E5%259D%2597.png" alt="CAESARII功能模块"></p><h3 id="软件设置"><a href="#软件设置" class="headerlink" title="软件设置"></a>软件设置</h3><ol><li><p>默认单位制</p><p>CaesarII内置多种单位制，用户可根据自身需求设置默认单位制。光标在输入框中短暂停留，将提示当前物理量单位。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210605202520410.png" alt="当前单位"></p><p>某选型具体的单位制：</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210605194455378.png" alt="Japan单位制"></p><p>点击软件主界面左上角<strong>配置快捷按钮</strong>进行配置，此处配置均为全局配置，即再次运行软件后配置仍有效。通常需调整<code>Database Definitions </code>配置页下的弹簧表和默认单位制，用户修改过的配置将以加粗黑体展现。<strong>注意：设置完成后必须点击保存，否则不生效。</strong></p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210605195730734.png" alt="image-20210605195730734"></p></li><li><p>默认弹簧表</p><p>CaesarII提供了极其丰富的弹簧表选项，涉及多个国家的不同行业，国内项目一般采用电力标弹簧（<code>China Power</code>）或者石化标弹簧（<code>SINOPEC (China)</code>）。</p></li><li><p>最大允许内存</p><p>21世纪的今天个人电脑的内存都动辄4GB、8GB，更别谈专用工作站，因此有必要将软件最大允许使用内存值放宽点，以使运行更流畅。建议修改<code>Miscellanelous Options </code>配置页下<code>Memory Allocated (Mb)</code>数值在512MB以上。</p></li><li><p>默认数据目录</p><p>默认数据目录极其重要，上述自定义配置及计算文件默认存放位置都在该目录下。除非特殊需求，一般<strong>强烈不建议修改</strong>。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210605202108668.png" alt="默认数据目录"></p></li></ol><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>&#x2F;&#x2F; TODO</p>]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>热电装置安全隔离</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E7%83%AD%E7%94%B5%E8%A3%85%E7%BD%AE%E5%AE%89%E5%85%A8%E9%9A%94%E7%A6%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/%E7%83%AD%E7%94%B5%E8%A3%85%E7%BD%AE%E5%AE%89%E5%85%A8%E9%9A%94%E7%A6%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9af829d90f873a41077331eafc5b939ee2bfba8249fbbe3e5b303891bea1fd5f">3e783bf581234c3e6af30920cb4d826c805ea494952766c76b21befe963a39081ea1e705cb523fec077335ee202ee782a1deb7f20905fb9e478f7086177e51f1ed5b142a48b11c901eb6ddd288e88c85631bebba66fb4a1241f3675f19c26751edcd19e2df2cdff61f09f3cedfa906ac06646ca938047941324753ad5289c2bcb83e77686dc9b5a17dd35cfbd3cadabcaf6f58b53c6fb4a666532650e453d93224a9526b7f7bd8e5bd8aeca1cd0a9871988a52b01f8625fca2c26700017edbcda507d59193a75075503e5b7deb07fbd5303372e7edca3ad562cfb63d44c53e8ff6a3517e7db4ee79f8f310d2c5468e5d9f998711745fe7e82346a3faff491f34b7764773dbb4b6485bdab6b6418583993a05bd276611eac14a458f10bdcdbbb4f5ad7fbd299e2bf489808dc78d902444df914e557dfd16669a54a92d84dea455d6f26595209dc475c3c900c3efa475c662f64320468a5b41b43212a55b2c2efab88a9b3e42b9edd491050023709dde1520693c0217b6527f23b9f7d650680e8c92767bb82429d9a813ed0e4d3b4f6e92b3605c00c3341611afb19c57fc2501fad03759fd7fcd7d95d0e636e2030568595d2fd9a025630f92f5e31b36b9a09d5aeac74acf11ef6073fc563c66d6c77ec7725ec79fd748058dbb66a2603447c3b005ea8f8bf9d963cd95a9565436a2687f4c71a13d911ed67f373460a73c23697e7d56ba3b2bf81365c0b95304095ecd3b81d70ce2c02cf64104c0e89aee09e390ee1374af91e7793441e627c4c1772f9554d052c7cff3d2f203f3f40405c5ef18f6d8c3f1a1ada75deecae98a097612a4dc19ed7522e803903befeae6a110d341c240986f69eff5ab4196ebbbe1d6b30412c3dfd8de4d78cb3820d6ce1bc7825685b6aef36ceb15f246b3d8f3a957382be81466f4fc98c4a64d44b1999cfba37e3478d6da43487436c97ee0a74a8b1c3aefc966d6ac33bd3bec3eacff9e49b23fcbd20fd472a8d09f68dc5d927c7ef63eb6261b461ebdf7ed59137c0171c6fb20be270fe7fe40e4f3dfb8e4a4357de5f9efc84deaa1d5f1bbe46a3dbf630d63f0a04946ab3db82fd67d40eec64f5884d791553fd51c6f49550e1a59ee521b69077e3b37468575ec84dd4789524491c1916345a13d5a5f9ca4da3f5975bf4b4d6065e0db273a56b8e0dd91625ab23a7fcf555a327c086777dbac91470f908b6271fe15710493c0f1bc958f28098106b4ec7bbfee2fc062f42b75b0397c1d40db4ff8ec28b33d01ce4223f479ea5c415cdcf513522b1c2dac8c7064b76ab901bfa6110af13a6d440fc061d2674a71d6a0138afce1c6ee2f020b5207c63d1dcf3ab451794f3e78512809784de0f9425d4bc7b6003639ff313ce3818db05a58721641cb47279a33716bac4ee385a663cd81d6fac8d28b59c9b59f7d4baa459bc0f6b3a9ac009dbcbd9bc3ed227477f590a100b359639b3b354abbc18043b46e684725262c5e506fc1e6b3627aa2c268cdcf1e11958b2c026fdb573a8e4ab2973f831bba2b5d50a7c3349507870e4f6bcda8e819b540ef7096968df08bfd4ab7c8876b330d933b65a3546085080fa34ad2cfbf254ca3121522ce9b4e533c50d6ce64feaa54c622f2abfa8a1bcb4039c796cd431ae0d351417dfc2811c359295b33908e276edbb65f82c68b0ff630373e038b671afc8b34bfa7e4dc0c526796a31c5d299ce0c8aae06f14ebf4baff5eb0fd899dcf4780ddf33573651191cb265fca4d18664237cae20d3eb1eeae4daa39c51883e16271b8279423ae9bcc173b740daddf4a10001aa0ee7d05d0c9d2a65563b8dec20445bf1b0a34fd454fdf29b6be01b7040a814bdd3ec724a99e02d0fa1d0132245f60f5503c5245c25093d2a1d309ad73c7e44cbb818ee996a7ff0eac75216eb79ebc08f6642e6c46411e030f4173eae3fff2282f9bc67dd866ea9f646092bd1add463df6d0c7c7d9800e8a05b7058c0995581730db84bcdfa91e915c35f673e4efa82be260c65292bbda70c80a5564144fda698d93ebb2d5f37ecb393d559f7180a22d340d386d2101208158314112cbe6e98d4761b693a9a6f63fc84fdf8df94eaac9d838b056b4b26093da1951029b51b611f16506a6b7075ff46d9f524e8d96d184f16bbd90bf9f8e691670a55d6cd16c30d97aedb8c1eee02ff4453208239861b332d5a25e7a687a6aaa96cc0830a3685ccbe380fd057229fdfb6519c7a2d89edc79dcd3cbede94060e1cdec0f04a157ff3f8e787389c531c469c7e89ada2ffe6e643095f148a34976ac9032ac015333589f9e9ab997971e72dc77f5eff34ecd4356f13527e417b0634e13205c73c48e7e66323c016dfb72ce6f42835d516e7af24ad1ff66dd9544245ea934947816087d630199b3a46c6368912076474334dca3a7bc4441513715c8dce46a4be8e331d8fa088ae339f5d7af842bb8811c97a47041d8a84769edadfa1a74bb2594bc36d08b5bd7442991c043b6e9808c7d3535247e3b62d2999ba022b4fab38ca90d8053227c5a4b5d0ba251a8f8b41a9c5c1e9fcfcdb1a0b1ad79164c0a5840e0641e8dab538be40b857ed1ec172102a30275d7bba684ffca4e96370f7683235656545719231d189f506f11b3622ff23f2de4785f345faf211aae35a19bf1e48104cc4cdf0a1121d7ca74aaae8fa26a0e301e430d435661ed42df9d608a10d62fd4369bfa0e476a5df8c8a778ed847c9deacac70b90aff9dd3223581496ce457aeff805089b114c3d96552bfd41164ea474b0c376530ba7e9396ce21a68a2dd71fedf2f27a68a091b595b22722ee3830f99f9a35c4a10ddbcff9d9c2d59737de0aca3891487a178d1d19bfd50a0856fc89728cd0349895e7f505df382a57ccf4e678f0b0c1ff8ea1b4ba2924de52eb1a2958adaf2354937224d85c0408307d18ee0572ee86a2e988fd36046a59777a01accaa16643a23f5b7af196e8813870d88671b14dddc6356931f958bad5f7e585daaa2e3d9583e9447fe1dce7f939ffdbe3bb700d583738ac67bd5ba7485c17087abe4d2781c75c164a751a98a6823068823e6882248b88d1b29522e4c4c87bbc0e2d2f7c230a30b743be149f73f58426c97ec28b7df1600eaa1a43089d2b62aa60bd0eb2454eccf1568ed2e5646dd2485b11719955404a4af731498e4e25e08ec4f42fcd4ebbdcecebcd10c31437783c63383120b63a6d0b0256595d36ff671db9b4f7fc1a2c4f93518eb1a4f6050d6273d69fd38edae251d25394ef72465cf08439059e19c9dc8f1a718f2f9f0b8068b3cbfdebb2705b833aec95fa1c8f7dd82aed229ee90fb8d467f96137fa06cd7b78521b27a1bc708d532545adbeeb23544ae2aca06fe6495405c2ae05379953694664dca8545d1ee4129130dd5e845bc1f133b0357961702574bdeebb070cfd24872017272bba06b9e41eb013705c291ef6fce2810c6e353a75abd33bd782789c38b8ea75d664fd1c82bdeccf7afc560b8f1c73177b8e52feb3172c4696827ed08f2d9bf301c846a36bd57fc4eb3a301968b9d8749a9a1651ce1248724a186050d3d15973a0ee05024185896afa641f17d8e301a0efa42ae1424105b78f67cffe032af33487b860fafdc9ea5f109ae01d35643dbcc9a3536ac3836df259856f7f69fd316b8813d0593194dad289d27e2e448de81c129c897e0d7041354371c545d527997f44ef67abe64b0e576a1f9836fb69e01e46f11442d8f603bb4f3043bcf4224591fd5d3c91f6750be8d2a6e8632cfb5675f3500e4ac405088da1ca8dca28d573fee78d2b5d1051cd7514a38034487d23b26dd8c5375abbce6365ccc4fb56a0687197185de2a5c7ee8681d77be9f4284f64de2e7ac4b721738aac9286880cb216885df6005d0867eb462c3ed1241cf4053e95eb3aa8e902106fb58495693df70b4e2a8d2d9021ce35449d3a0ed0fc1994cec64c1804c9d02f042fb4765cc5e773f1ad65ccc8de08d37a7d40f0ca50e968bd10a1e2904a42d4f9c13abffc52d29963a6e5c70e2a0a12dfcda348b264df3526777b6d0bdf29c649f5c7853010b184ae1f9b4f9b0eeb308bfb0e350495beb7f6ff4c6eccb2215b993469a874960541a536c4b41268bbb768718982827dcfc82b399b97de70b1d0d9872469c727475b16bae3fb69c7753cc76bfd0e8fa53f572dd219272c09fa44b99f98708a585809ca6bfc76a1836aee740f1994ec638dae433d14c7926e64b981f8ec5b214ab2c855fe9771248adb26872eea803b3ddfb76725da342f08e7db2d072cea1d5d135a030dda2b05037c10ac51c5a97c88e994bfc01bd99573d90f039b86603090a076c61ba21c7eb5c693b89bed9cad753efd746703cea5a6bcef7037ca7d25e51622da253b78c2ca21a434a1d322badf41cbbb49465f62e27b566d1b77b540767b71ad0b625bd4141fe8cf2e34748ab14e982742cfd1577ccfff137f5e396da193d2d8bf39ec0efbff66a9e85b77034493a0f65055c7a19031f5b2253342c83b054e7c8c4889bc733ed67c8479869d5ac8607ecf182b816b4672ed69af4e171737aefe514824fe8d1eb0ec358deabaa2d7ca7c14eff98ce41bb9879911142b874972e6d9944f11318cb9235d8507d99d4c885cd1a454703b6127d0172d08cd9bde5fa06f6a84ffe84cfac5182fc474a49fa954a8930abc9e38d77586e77105f352d56da48bbf0e2c35733eec2645616698639d87b63742f71e2b71e0edc5ab02e3887c32d04a07a055e0681663ecea5483642b4b1342f59f0f2b0ed7309a7bd31b1929500ec783b0629d600bab675c30dd65f1b3c877baf809a5760c474fe85d803f73d4b90094496d9b6030eb1c5823c96cf796067f6a4eab0b7620d4b2677d498265f9a00f6d4875e35920c57ded5dd2018fff201f2203a6833ab7aa8fa0cdb28e9696aaf8b8cebea0a01258b5b109047d1cf501866ed090e3711c53cc1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPPID 学习笔记</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/SPPID%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/SPPID%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7d62323873e308a95e0efc87cc207f51993a68d9bb535e180930f701ebf3cc89">3e783bf581234c3e6af30920cb4d826c805ea494952766c76b21befe963a3908e96f89e40f381080596f0a9b04404ad200acc9032ba60d8541313cd19a9bf6d2ad78933cee5feede604d01057d8f1ed5a4bb55152e38b19888d0da18097259d155607d6ad14d3f5ae934f4c218ac7c26da9b8334b0f51390a23e00d251f6167d163db50f5528a04bfcc05bbd9bb1e4417b57b21389d7541abe7426e0609ecaac76df66cd249b32c7839cd078c97d04074fea95aa5267a1a9f4779b7b634a2572500420ff6d303b6480874f9cdf44afaac1ea388cc639382ff25f4071033fd010472e55fb590b9d13ae7eefaaa6c565c74e6e884cd208c29d9f14350eb2df08d985354c6df099b401cda3a1b94fcdac304df5caaa52a37b4d90eb34b4512f3d027b084784121f3d015bbe284e8640444c406518bad6b4cfd2019b808a2d666a5290dbc06bfe2247269c835d3c09ce376e8b7c15cd1f434b02b10a399210b26814a4d2fe72ed9db6feb3ce828190241eb82170e4d199357697c591b131e7acc8c2014d47179d99bd0e88c32c301f4d347e057225f0e50b353e859a3c3ceb8f12fd6413d14de4feff2879572f271a86b23df02efb37c2781fda4069022932723e02fb02df3410164bc9533c57815b0430b179abeceb0dbce393e3abee5f113e33e6b96846afaeb042d17600bd5e3c00a6fb4308677c0a302cad33269b288c8c110862d72bc5bf393630245633a6fd08491e8a072f2eb2c35f084f3d89e17ce90e9a5911e7290bf3f4e88eefb3cb3c1fe60058365dce22a8fe4174ff9d97889e2141fc138baaea3b8340d4e068f970d72bdd0da1a78f12b1940aae90294285c8e51d6f62ef09d22da3fafbe50411e67937ad695119fb623e91a168e745eeb021122eca77c9736f4f4329ee9ffacbfefda8ebcd2d8effed738e1f5eb2a40661ad1fa59fc62ff3b2e8f8e6689926df1fbd6d548ed6f507751e5d958e925d47684f9c6a781c960e213c9c63ebd5b5278dd4542975123c961356a00cb63fd74445c19c8eca41be2a621d08e2ef82ba755f2e5e3c1704444553f4a504689f7aec77f800d49efe654e3a1a309df6e8574e79c773508bd4d35fcf281d2626629f5050e17dfbf9ab2bf8e316fc2979e0c91f8b8eb8769d66c3ea7e85f2bab6ff9181e4316d6dc15b4cd102cb4da271b3324166183d4363271644d42496e6174f07edc27d66a6381849d4846c971452ed44b95002c280068bd89c0a50923dc928c707e3dbc50248d431215f4a35cf3ce100a086a0ce13f9551de76c4042a7b71bd1aa93dd215519a3ebec6958f57a62764ffa95b47f7150a0a4f7ab6af84c9eb2eb115ae1eb9a4d4d885b2c01a718de83cf7b8221ce8216cf5b3db7fa1db6dba58f305e8f6b179a8b13dfae0bd8f5110ae18a081f5f3787ac72f588c430f850ad07594d0231d1984c4d16b9f7d8064784ecebb8c6f75c71f1553b0a3b41ded23f069d54f73e9346b60c25aab7885b51c351fda6f32d9d3ad709a432e9a26fbd12a7495c44fd4a1b780ded42a5001b247dbe0904e2e14e7073ef47244b5d55c55c242ef0b089c2f24a4e8536fade7cf474405508e122189c947c04b687b6abd1086d41ed7e6d8d20eff157404da3b0f90db23432b3ec5d5480eff53fbb9e2f56b651ebe690493e38ac49ed9364b74f2f20c732a89eb1ef039ed071d4d4c8252d3403e48bc445ac118d663920610050d2f1200309949b5ec2448fda01a7090eaa22223b2f75be843bc329d3dcd33c4e95295d713ea8292d47fc8c18571287dbbc7d70f7d9a971584f089bd9b0114846db12234a9c4cdaed65a1469a78803633084ab8a0bd5dce8bfb349e37b4199db0508bff14dfd1f8304ee5863385dcc60d3b7ede24f2a167bec3e8858ef621b12fd60c91a1b794eeef67a777a5cfa3b4f597d2d64bf70eee5794787dbeeb466b2f33bc566d38e2635abcea811ff032de5761f9c4185c5fbdeda443d64bed4c5b28d6c4c86993f301c60f5a2535bd302c38083f79d2a4799af0ee74e92e13959d403f5061fc88f392c451f1717163970fc26228b8831231f22885ef1444b26f26a81ac2f4a1bf0207049bd7a0ec85c6160057d8e3b633617f3d2fff0110eea87342b6c0556cca2985f90ebd81ba6434e3937e5e5d86276383060ce96fbd479c8141ee55dbbed12020eab3c1e77a7beb3d5296f3084aa0b5b487e65b80b9dd2ed17ba4e038852c8cc4f16cc72eb0b0db24377d323ee008b543027a2635b735a2a37be8c0bd06589030dbd71980bddfb842a5a3538e91a5c3c7c9e4d7d78bb30ac91592581f1dc776097ad25be2a5df603204ecda0dd6aa13987a88f51977c922898696c7dd1a06151f2fcc5dbef118c5cdfaa51b63688de3adc87fe4b2f36513244bf065d7f726db1e2a9767efd55b82e28d4bc6ab11299a8843582982dad437e5b70a3c8f91767b902500b05b9110ea38a742e89111ec6f36c176e1d730c433a2cb8aeb81284566e63fc0b309061e3b0d5ed3290538c315c614a3afd11c9736077b199817fc69d5d32db99be0f2878171c6bd7d6583991a48558395169079810ecb8bf287cc8fb72716c56c9ba4e3c599a6c24a41488e85355bbc4a07786292c1a1972eb55744174142526e3d2b70684fb7ef72495ecf156780a21312d52dee2a3fe1009fb5713ec02bf46cdbe235c06b11f0e4f152ab9935b9f3e12ba6feb6a18275ae49895246067e6b820cc8f129f0183ed0c0e074e681ce3d106ff1199559aed1d7934075099534af3032983c4f108402aecd133d0d15dc4e56fcb380696ecaa50bde8ce425eb8262b5f3ee1895a15d8dc94b4dacb76173db62da8dde829998a972d2e8eebd38c4a5251e0b779b0590567cbcafc05abcd10e687475c739e95b420d0bc427563588f6daf47b3e3409d19a084720f5397acbfacc17b7d9b73accfa7949d662773fdd02371ed1a8df7bab20d48fe18e0110f1aa0e8b41d733a36ad9a3ca61cb45d05e8704a1aca40d5068d7e8d690e37c34c78fafeb75b82604d7cc89392f4d3993c3e401f1d80480707657af1ee79aee9c91ae7c82346cffd5d7ccc2125b49afb9e451c125928220d60506ea66f991e018e69b3b0706a32c90fb321b65faa29a9fc0a7e65776b101aa52415b23edd65c5fb6176e8a8a32cc7b8286165f57717a26f1dc0768922612ba71f9aef859fdbb188078da5498ad755b492d64164b79ee20ebff5c50c29cffd31fc88b0065975843e42399409e14c0845d92dfe4a0a168c313c4dbe404596767d05577714ab309f82da53dcefe353f5094d3c1cba26569203c32d14204606ff52688e6bf0551ea7f30bad3bd2b12f2689aed5b521ea2288936609b780f963fd8d97807d330fa85377b4fe5774668b16f5dfe2099a31f8617a75079625b0c72dcc67043d7e034bf5a43c496b7c762eb46bedadcbb4b6d1118eaf2c067e53cec856aa2745af29b076a321e8684e4d468096fe9ba365b96bff9988b270393e5921aebd60a5ef7097a8062bc90318bbe3a949d16d002b1e4dbcbb8290a0979dfc0feb31708af8c4e721fca47e4cae0c35a285907a52efa43e8b286148984c25fd59284b8b507b8af8fc63217caaa105b580e7acdbff0c927bd7aa883d559cf84882b9b43bc31f3461972ce91ac777ce6a22c08cecf24970108e11c09cb0a0bffb37bea450d2338137b2c1709eac6d7ae2d2bd2a0bce8db408a0f5d10a302a17fb68d8c0514a31cbab598585af23c4176afade7f83e6f0d0adc6074fa013744c002a47bcc94fdff19faedca59addaf95b588caabcbb8eae8a917df191e44d591719e4741bb8604902c3c93205dfaefa79208d82db70faba589dd3494a0ea31f5f89ed0731162f436661bb1d23901f835fa81cef08f54d74cfdd0867411d5d2582d9e5b98664793a0308ce68813dbc78e81c30965058c84b14a145267377845de34189256c018033b91594beca0e1f04eb5b53011ce38202ad910329571bea6c8df3d57f277afd43d2b6cbaced54fc39cbe547fa40fd3dd9e9e86ac25f5bf09b4cede5e7c1d38e016a4662c4749de8b5adb577a44e495bd9878b47a5d65e9fd26cdf95407a29dacefd212d6d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
      <tag>善用佳软</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SP3D学习笔记</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/SP3D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/SP3D%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4cdc93d583177e28cfcecf27295a083f79f63efe1b84f39b91ee50e2d2b34731"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
      <tag>善用佳软</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AutoCAD 葵花宝典</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/AutoCAD%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/AutoCAD%E8%91%B5%E8%8A%B1%E5%AE%9D%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="优化设置"><a href="#优化设置" class="headerlink" title="优化设置"></a>优化设置</h2><h3 id="关闭信息中心、FTPSites"><a href="#关闭信息中心、FTPSites" class="headerlink" title="关闭信息中心、FTPSites"></a>关闭信息中心、FTPSites</h3><p>将注册表<code>HKEY_CURRENT_USER\SOFTWARE\Autodesk\AutoCAD\R18.2\ACAD-A001:804\InfoCenter</code>项下键<code>InfoCenterOn</code>键的值改为1，如此界面右上角信息中心就会消失；</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/CAD%25E4%25BF%25A1%25E6%2581%25AF%25E4%25B8%25AD%25E5%25BF%2583.png"></p><p>删除注册表<code>HKEY_CURRENT_USER\SOFTWARE\Autodesk\AutoCAD\R18.2\ACAD-A001:804\FileNavExtensions</code>项下的<code>ACPROJECT</code>和<code>FTPSites</code>键值对。</p><h2 id="清理图层"><a href="#清理图层" class="headerlink" title="清理图层"></a>清理图层</h2><p>将多个图层合并成到一个图层，成功合并后自动删除原图层。</p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/%25E5%2590%2588%25E5%25B9%25B6%25E5%259B%25BE%25E5%25B1%2582.gif" alt="合并图层" style="zoom:67%;" /><h2 id="清理图纸"><a href="#清理图纸" class="headerlink" title="清理图纸"></a>清理图纸</h2><p>常规方法为<code>PU</code>大法或者网上介绍的另存<code>DXF</code>后再存回<code>DWG</code>；对于图层还可采用<code>LAYDEL</code>强制删除或<code>LAYMRG</code>合并到0层。但碰到顽固对象时，上述方法要么无法清理，要么存在丢失图元的风险。AutoCAD2020及以上版本强化了清理功能，新增支持查看对象关联关系，现在可通过处理关联对象的方法间接清理顽固对象，不失为一剂<strong>治标治本</strong>的良药。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/%25E6%25B8%2585%25E7%2590%2586%25E5%258A%25A0%25E5%25BC%25BA%25E7%2589%2588.png" alt="清理加强版"></p><h2 id="动态块"><a href="#动态块" class="headerlink" title="动态块"></a>动态块</h2><p>双击参数可以快速调出动作</p><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>可根据需要选择缩放动作的基准类型：依赖（参数的起点或终点）、独立（x、y坐标确定的具体点）。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/%E7%BC%A9%E6%94%BE.gif"></p>]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
      <tag>善用佳软</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AUP 学习笔记</title>
    <link href="/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/AUP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/09/%E7%B3%8A%E5%8F%A3%E7%94%9F%E8%AE%A1/AUP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="57167777028605e479a3596426b5fffab93a58e45029e74af8389843b670dc13"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>糊口生计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>糊口生计</tag>
      
      <tag>善用佳软</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本站文章写作规范</title>
    <link href="/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/%E6%9C%AC%E7%AB%99%E6%96%87%E7%AB%A0%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
    <url>/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/%E6%9C%AC%E7%AB%99%E6%96%87%E7%AB%A0%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>参照阮一峰大神的<a href="https://github.com/ruanyf/document-style-guide">《中文技术文档的写作规范》</a>一文，结合个人写作习惯，制定了本站文章的写作规范，具体如下。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h3><p>文章按篇、章、节、段的架构，对应标题可分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：大标题</li><li>三级标题：小标题</li><li>四级标题：三级标题下的小标题</li></ul><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li><p>取消一级标题</p><p>为了使用 hexo 自动生成文章信息，每篇文章的顶部都已采用YAML专门标记了文章的标题、分类等，因此正文中不再出现一级标题。</p></li><li><p>慎重使用四级标题</p><p>除非特别长的文章，正常使用二级、三级标题即可满足需求。若有需要，应优先采用有序列表划分后续内容。</p></li><li><p>杜绝单独的某级标题</p></li></ul><h2 id="行文"><a href="#行文" class="headerlink" title="行文"></a>行文</h2><h3 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h3><p>为了方便阅读和识别，句子应遵循下列原则：</p><ul><li><p>英文单词前后各留一个半角空格</p><blockquote><p>很多人用过的第一个 ssh 客户端是 putty 软件。</p></blockquote></li><li><p>将长句子拆分成短句子</p></li></ul><h3 id="写作风格"><a href="#写作风格" class="headerlink" title="写作风格"></a>写作风格</h3><p>技术类文章一般陈述的是观点和事实，尽量少体现作者的态度和感情，因此行文风格应直接、简单、精炼。</p><ul><li><p>使用主动句式，不使用被动句式</p><blockquote><p>不好：此软件被删除后</p><p>好：删除此软件后</p></blockquote></li><li><p>使用肯定句式，不使用否定句式</p><blockquote><p>不好：确认没有用户在线</p><p>好：确认所有用户已退出</p></blockquote></li><li><p>名词前不要使用过多的形容词。</p><blockquote><p>不好：这是一个阳光明媚且从未如此快乐过的难忘的午后。</p><p>不好：这是一个阳光明媚且从未如此快乐过的午后，这个午后真难忘！</p></blockquote></li></ul><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><ul><li>段落不需要首行缩进</li><li>一个段落应该只有一个主旨</li><li>段落的第一句话尽量体现本段落的主旨</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂货铺</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>探秘注册表 HKCR 根键</title>
    <link href="/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/%E6%8E%A2%E7%A7%98%E6%B3%A8%E5%86%8C%E8%A1%A8HKCR%E6%A0%B9%E9%94%AE/"/>
    <url>/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/%E6%8E%A2%E7%A7%98%E6%B3%A8%E5%86%8C%E8%A1%A8HKCR%E6%A0%B9%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>无论是计算机老鸟还是小白，多少都接触过点注册表，这里俨然就是 Windows 操作系统的藏宝库。注册表由单词<code>Registry</code>直译而来，不过笔者认为译作<strong>配置信息数据库</strong>更加贴切。注册表是一种集中存储方式，linux 系统采用配置文件存储配置信息，比如<code>bash.rc</code>、<code>my.cnf</code>等等，这种方式是松散的。</p><p>注册表包含五个根键，根键、子健、键值对的概念这里不再累述。排在第一个的根键为<code>HKEY_CLASSES_ROOT</code>，它是<code>HKEY_LOCAL_MACHINE\Software\Classes</code>子健和<code>HKEY_CURRENT_USER\Software\Classes</code>子健的合并视图，主要存储了文件类型、右键菜单和COM组件等信息。展开该根键后，出现一大堆后缀名和 GUID 序列，下面将谈谈这些内容的用途。</p><h2 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h2><h3 id="剖析注册表"><a href="#剖析注册表" class="headerlink" title="剖析注册表"></a>剖析注册表</h3><p>双击一个文本文件后，为什么张三电脑上打开的是记事本程序，而李四的电脑上确是 sublime？想要直接弄清楚注册表中的端倪，有点难度。不妨换个思路，将刚才的文本文件重命名为<code>test.abcd</code>，操作系统现在不知道该如何打开这个文件了，文件图标也变成了白色。使用 <a href="http://www.torchsoft.com/download/RegistryWorkshop.exe">Registry Workshop</a> 工具给当前注册表拍个快照，然后双击打开<code>test.abcd</code>，选择<strong>始终用</strong>记事本打开，接着对比当前注册表和刚生成的快照。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210928224718742.png" alt="image-20210928224718742"></p><p>对比结果显示，新增了<code>HKEY_CLASSES_ROOT\.abcd</code>和<code>HKEY_CLASSES_ROOT\abcd_auto_file</code>两个子项；<code>.abcd</code>子项默认键值对描述了该后缀名对应的文件类型<code>abcd_auto_file</code>；而文件类型子项才真正记录了打开、编辑该类型文件的程序。您可以依葫芦画瓢，给任何已知、未知的程序设置默认打开方式，这也是很多病毒的惯用伎俩。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210928232620565.png" alt="image-20210928232620565"></p><h3 id="ShellExecute-函数"><a href="#ShellExecute-函数" class="headerlink" title="ShellExecute 函数"></a>ShellExecute 函数</h3><p>ShellExecute 的功能是对一个指定的文件执行某操作，函数原型如下：</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">HINSTANCE ShellExecuteA(  HWND   hwnd, &#x2F;&#x2F; 父窗口句柄  LPCSTR lpOperation, &#x2F;&#x2F; 指定操作：open、edit、print...  LPCSTR lpFile, &#x2F;&#x2F; 待操作的文件或程序  LPCSTR lpParameters, &#x2F;&#x2F; 操作参数，如果打开的是文件，该参数设为NULL  LPCSTR lpDirectory, &#x2F;&#x2F; 操作的工作目录  INT    nShowCmd &#x2F;&#x2F; 窗口显示方式);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>其中，lpFile 待操作文件的默认程序通过查询以上注册表项获得，lpOperation 指定的具体操作与注册表 shell 项下的子项名称对应。</p><p>做个小试验，先将<code>HKEY_CLASSES_ROOT\txtfile\shell\print\command</code>默认键值改为 calc.exe，然后编写一个非常简单的C++命令行程序，代码如下。在生成目录下新建 test.txt 文本文件，运行程序后不出意外将弹出计算器。当然，在文件上右键打印也会弹出计算器，ShellExecute 函数其实就是实现了诸如打开、编辑和打印等文件交互式操作。</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;Windows.h&gt;void main()&#123;    &#x2F;&#x2F; 调用系统默认程序打印文本文件    ShellExecute(NULL, L&quot;print&quot;, L&quot;test.txt&quot;, NULL, NULL, 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h2><p>注册表项<code>shell</code>和<code>shellex</code>都与右键菜单相关联。<code>shell</code>子项对应普通右键菜单，通常用于选择某个程序打开文件；<code>shellex</code>对应级联菜单，功能相对复杂，一般只是记录了对某个 COM 组件的引用。</p><p>按作用位置不同，右键菜单至少分文件右键菜单、文件夹右键菜单、文件夹空白处右处键菜单三类，下面将逐一介绍。</p><p>&#x2F;&#x2F; TODO</p><h3 id="文件右键菜单"><a href="#文件右键菜单" class="headerlink" title="文件右键菜单"></a>文件右键菜单</h3><h3 id="文件夹右键菜单"><a href="#文件夹右键菜单" class="headerlink" title="文件夹右键菜单"></a>文件夹右键菜单</h3><h3 id="文件夹空白右键菜单"><a href="#文件夹空白右键菜单" class="headerlink" title="文件夹空白右键菜单"></a>文件夹空白右键菜单</h3><h2 id="COM-组件"><a href="#COM-组件" class="headerlink" title="COM 组件"></a>COM 组件</h2>]]></content>
    
    
    <categories>
      
      <category>杂货铺</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用注册表项</title>
    <link href="/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/%E5%B8%B8%E7%94%A8%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%A1%B9/"/>
    <url>/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/%E5%B8%B8%E7%94%A8%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="AutoCAD"><a href="#AutoCAD" class="headerlink" title="AutoCAD"></a>AutoCAD</h2><h3 id="版本代号"><a href="#版本代号" class="headerlink" title="版本代号"></a>版本代号</h3><table><thead><tr><th align="left">版本号</th><th align="left">版本名</th></tr></thead><tbody><tr><td align="left">R15.0</td><td align="left">AutoCAD2002</td></tr><tr><td align="left">R16.0</td><td align="left">AutoCAD2004</td></tr><tr><td align="left">R16.1</td><td align="left">AutoCAD2005</td></tr><tr><td align="left">R16.1</td><td align="left">AutoCAD2006</td></tr><tr><td align="left">R17.0</td><td align="left">AutoCAD2007</td></tr><tr><td align="left">R17.1</td><td align="left">AutoCAD2008</td></tr><tr><td align="left">R17.2</td><td align="left">AutoCAD2009</td></tr><tr><td align="left">R18.0</td><td align="left">AutoCAD2010</td></tr><tr><td align="left">R18.1</td><td align="left">AutoCAD2011</td></tr><tr><td align="left">R18.2</td><td align="left">AutoCAD2012</td></tr><tr><td align="left">R19.0</td><td align="left">AutoCAD2013</td></tr><tr><td align="left">R19.1</td><td align="left">AutoCAD2014</td></tr><tr><td align="left">R20.0</td><td align="left">AutoCAD2015</td></tr><tr><td align="left">R20.1</td><td align="left">AutoCAD2016</td></tr><tr><td align="left">R21.0</td><td align="left">AutoCAD2017</td></tr><tr><td align="left">R22.0</td><td align="left">AutoCAD2018</td></tr><tr><td align="left">R23.0</td><td align="left">AutoCAD2019</td></tr><tr><td align="left">R23.1</td><td align="left">AutoCAD2020</td></tr></tbody></table><h3 id="产品代号"><a href="#产品代号" class="headerlink" title="产品代号"></a>产品代号</h3><ul><li>8001 AutoCAD2010</li></ul><p>针对不同行业，CAD有多个版本：机械版、建筑版、电气版、LT版等，<a href="https://www.cadforum.cz/en/product-codes-registry-of-autodesk-cad-applications-tip6922">这里有详细介绍。</a></p><h3 id="语言代号"><a href="#语言代号" class="headerlink" title="语言代号"></a>语言代号</h3><ul><li>409 英文版</li><li>804 简体中文版</li></ul><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/CAD%25E6%25B3%25A8%25E5%2586%258C%25E8%25A1%25A8%25E8%25AF%25AD%25E8%25A8%2580%25E4%25BB%25A3%25E5%258F%25B7.png"></p><h3 id="DLL插件加载设置"><a href="#DLL插件加载设置" class="headerlink" title="DLL插件加载设置"></a>DLL插件加载设置</h3><blockquote><p>HKEY_LOCAL_MACHINE\SOFTWARE\Autodesk\AutoCAD\R18.0\ACAD-8001:804\Applications\</p></blockquote><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/CAD%25E5%258A%25A0%25E8%25BD%25BD%25E6%25B3%25A8%25E5%2586%258C%25E8%25A1%25A8%25E9%25A1%25B9.png" alt="CAD加载注册表项"></p><ul><li><p><code>LOADCTRLS</code>：控制程序随CAD加载的方式，<code>0x02</code>代表随CAD启动一起加载，详细说明如下：</p><ul><li>0x01：Load the application upon detection of proxy object.</li></ul><blockquote><p>当检测到代理对象时加载程序</p></blockquote><ul><li>0x02：Load the application upon AutoCAD startup.</li></ul><blockquote><p>随CAD启动一起加载程序</p></blockquote><ul><li>0x04：Load the application upon invocation of a command.</li></ul><blockquote><p>以命令方式手动加载程序</p></blockquote><ul><li>0x08：Load the application upon request by the user or another application.</li></ul><blockquote><p>当用户或别的程序主动请求时加载程序</p></blockquote><ul><li>0x10：Do not load the application.</li></ul><blockquote><p>从不加载程序</p></blockquote><ul><li>0x20：Load the application transparently.</li></ul><p>　　　&gt; 透明加载程序</p></li><li><p><code>LOADER</code>：加载程序路径；</p></li><li><p><code>MANAGED</code>：加载程序类型，<code>0x01</code>代表托管程序。</p></li></ul><h2 id="软件安装信息"><a href="#软件安装信息" class="headerlink" title="软件安装信息"></a>软件安装信息</h2><blockquote><p> HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Installer\Products</p></blockquote><h2 id="类型打开方式"><a href="#类型打开方式" class="headerlink" title="类型打开方式"></a>类型打开方式</h2><blockquote><p>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts</p></blockquote><p>其中<code>MRUList</code>明确了打开程序的显示次序</p><h2 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h2><h3 id="资源管理器空白处"><a href="#资源管理器空白处" class="headerlink" title="资源管理器空白处"></a>资源管理器空白处</h3><blockquote><p>HKEY_CLASSES_ROOT\Directory\</p><p>HKEY_CURRENT_USER\SOFTWARE\Classes\Directory\Background\shell</p></blockquote><h3 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h3><blockquote><p>HKEY_CLASSES_ROOT\Directory\shell</p><p>HKEY_CURRENT_USER\SOFTWARE\Classes\Directory\shell</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>杂货铺</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>emoji表情用于 github 信息提交</title>
    <link href="/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/emoji%E8%A1%A8%E6%83%85%E7%94%A8%E4%BA%8Egithub%E4%BF%A1%E6%81%AF%E6%8F%90%E4%BA%A4/"/>
    <url>/2022/04/09/%E6%9D%82%E8%B4%A7%E9%93%BA/emoji%E8%A1%A8%E6%83%85%E7%94%A8%E4%BA%8Egithub%E4%BF%A1%E6%81%AF%E6%8F%90%E4%BA%A4/</url>
    
    <content type="html"><![CDATA[<p>github提交信息支持<code>emoji</code>表情，<code>commit</code>时添加合适的表情既能丰富提交信息又能方便后续识别提交类型。windows平台下开发时的<code>emoji</code>表情常见用法如下：</p><table><thead><tr><th align="center"><strong>emoji</strong></th><th align="center"><strong>emoji代码</strong></th><th><strong>commit 说明</strong></th></tr></thead><tbody><tr><td align="center">:tada:庆祝</td><td align="center">: tada:</td><td>首次提交</td></tr><tr><td align="center">:new:全新</td><td align="center">: new:</td><td>引入新功能</td></tr><tr><td align="center">:bug:bug</td><td align="center">: bug:</td><td>修复bug</td></tr><tr><td align="center">:lipstick:口红</td><td align="center">: lipstick:</td><td>更新UI或样式文件</td></tr><tr><td align="center">:zap:闪电</td><td align="center">: zap:</td><td>提升性能</td></tr><tr><td align="center">:book:书</td><td align="center">: book:</td><td>撰写文档</td></tr><tr><td align="center">:construction:施工</td><td align="center">: construction:</td><td>工作进行中</td></tr><tr><td align="center">:hammer:锤子</td><td align="center">: hammer:</td><td>重大重构</td></tr><tr><td align="center">:art:花板</td><td align="center">: art:</td><td>改进代码结构或格式</td></tr><tr><td align="center">:fire:火焰</td><td align="center">: fire:</td><td>移除代码或文件</td></tr><tr><td align="center">:pencil2:铅笔</td><td align="center">: pencil2:</td><td>修复typo</td></tr><tr><td align="center">:heavy_plus_sign:</td><td align="center">: heavy_plus_sign:</td><td>增加依赖</td></tr><tr><td align="center">:heavy_minus_sign:</td><td align="center">: heavy_minus_sign:</td><td>减少依赖</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>遨游码海</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>玩转树莓派</title>
    <link href="/2022/04/09/Linux/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <url>/2022/04/09/Linux/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>使用树莓派官方<a href="https://www.raspberrypi.org/software/">Raspberry Pi Imager</a>工具安装系统非常简单。下载安装该软件后将SD卡（建议容量在32GB以上）插入读卡器，再来到我的电脑查看SD卡盘符。运行软件，先选择操作系统再选择SD卡（注意盘符是否对应），最后点击<strong>WRITE</strong>按钮自动下载安装。</p><p>由于国内网络环境问题，从官网下载镜像非常慢，建议用IDM等下载工具将<a href="https://www.raspberrypi.org/software/operating-systems/">镜像文件</a>单独下载下来。第一步操作系统选择自定义操作系统，然后找到下载、解压好的<strong>img</strong>文件。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210912151200974.png" alt="image-20210912151200974"></p><p>系统安装完成后可能需要设置无线网络、开启SSH服务等等。在点击<strong>Write</strong>按钮之前，按下<strong>Ctrl+Shift+X</strong>快捷键进行相关设置。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20210912151834329.png" alt="image-20210912151834329"></p><h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><h3 id="无线网络-amp-SSH"><a href="#无线网络-amp-SSH" class="headerlink" title="无线网络&amp;SSH"></a>无线网络&amp;SSH</h3><p>如果上一步忘记设置无线网络和ssh，刷完系统后再弄也不迟。我的电脑中打开<code>boot</code>分区（其它分区不会出现），在该分区下新建名为<code>ssh</code>的文件，注意无后缀名。接着再新建配置文件<code>wpa_supplicant.conf</code>，内容如下。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">country</span><span class="token operator">=</span>CN<span class="token assign-left variable">ctrl_interface</span><span class="token operator">=</span>DIR<span class="token operator">=</span>/var/run/wpa_supplicant <span class="token assign-left variable">GROUP</span><span class="token operator">=</span>netdev<span class="token assign-left variable">update_config</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">network</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token assign-left variable">ssid</span><span class="token operator">=</span><span class="token string">"无线网络名称"</span><span class="token assign-left variable">psk</span><span class="token operator">=</span><span class="token string">"无线网络密码"</span><span class="token assign-left variable">key_mgmt</span><span class="token operator">=</span>WPA-PSK<span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>从读卡器中拔出SD卡，插入树莓派插槽，上电启动。打开路由器web管理页面查找树莓派ip地址，找到后直接登录ssh，用户名和密码为<code>pi/raspberry</code>。but，以上设置重启后将失效，因此登录后的第一件事就是使用<code>raspi-config</code>工具永久配置无线网络和ssh。必须以root权限执行：</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="扩展分区空间"><a href="#扩展分区空间" class="headerlink" title="扩展分区空间"></a>扩展分区空间</h3><p>树莓派系统大都安装在<code>/dev/root</code>分区下，但是默认分配给该分区的空间不够，导致后续无法正常安装软件、升级系统。<code>raspi-config</code>是树莓派命令行配置工具，选择该工具的第6项<strong>advanced options</strong>，再选择第1项<strong>Expand Filesystem</strong>即可将未分配空间全部分配给root分区。</p><h3 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h3><p>使用官方软件源安装软件非常缓慢，建议替换成清华源。</p><ul><li>编辑 <code>/etc/apt/sources.list </code>文件，删除原文件所有内容，用以下内容取代：</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>编辑 <code>/etc/apt/sources.list.d/raspi.list </code>文件，删除原文件所有内容，用以下内容取代：</li></ul><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>注意：网址末尾的<code>raspbian</code>重复两次是必须的。因为raspbian的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在<code>raspbian/</code>子目录下。编辑镜像站后，请使用<code>sudo apt-get update</code>命令，更新软件源列表，同时检查您的编辑是否正确。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免密码登录 ssh</title>
    <link href="/2022/04/09/Linux/%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95ssh/"/>
    <url>/2022/04/09/Linux/%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95ssh/</url>
    
    <content type="html"><![CDATA[<p>SSH 是一种加密的网络传输协议，主要用途是远程登录系统，并提供一个交互式的虚拟终端或者直接远程执行命令。SSH 还能扮演类似 SSL 的角色，通过在网络中创建安全隧道，实现对客户端与服务端之间的数据加密。</p><p><a href="https://www.openssh.com/">OpenSSH</a> 是 SSH 的开源实现，Windows 10 1803及后续版本都默认启用了 OpenSSH，相关命令行工具存储于<code>C:\Windows\System32\OpenSSH</code>目录。工具可分为三类，简介如下：</p><ol><li><p>远程操作类</p><ul><li>ssh—OpenSSH 终端连接工具</li><li>scp—文件远程拷贝工具</li><li>sftp—OpenSSH 版 FTP</li></ul></li><li><p>密钥管理类</p><ul><li>ssh-add—将私钥添加到 ssh-agent 的代理缓存</li><li>ssh-keygen—生成、管理和转换密钥</li><li>ssh-keyscan—获取远程主机的 OpenSSH 公钥</li></ul></li><li><p>服务类</p><ul><li><p>sshd—OpenSSH 服务守护进程</p></li><li><p>ssh-agent—OpenSSH 私钥管理工具</p></li></ul></li></ol><p><strong>以下部分操作只适用于 Windows 系统登录 Linux 系统 ssh 的场景！！！</strong></p><h2 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h2><p>ssh 密钥登录无需输入密码，更加方便且杜绝了暴力破解的风险。命令行中使用 ssh-keygen 工具生成公钥&#x2F;私钥对，一路回车使用缺省参数即可，Windows 中生成的密钥默认保存到<code>C:\Users\[用户名]\.ssh</code>目录。生成的私钥文件是<code>id_rsa</code>，公钥文件是<code>id_rsa.pub</code>，pub即 public，公开的、公用的意思。</p><h2 id="部署公钥"><a href="#部署公钥" class="headerlink" title="部署公钥"></a>部署公钥</h2><p>在 .ssh 目录下打开命令行，然后执行下列组合命令将刚生成的公钥文件上传到服务器登录用户的家目录。完成上述操作后，重新登录 ssh 就无需输入密码了。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>apple<span class="token punctuation">\</span>.ssh<span class="token operator">></span> <span class="token builtin class-name">type</span> id_rsa.pub <span class="token operator">|</span> <span class="token function">ssh</span> dog@192.168.0.5 <span class="token string">"mkdir -p .ssh &amp;&amp; cat >> .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="其它设置"><a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h2><h3 id="免用户名登录"><a href="#免用户名登录" class="headerlink" title="免用户名登录"></a>免用户名登录</h3><p>如果想进一步发扬程序员的三大美德，登录时连用户名都省掉，岂不更美哉？</p><p>首先在服务端新建一个与客户端同名的账户<code>useradd -m -s /bin/bash apple &amp;&amp; passwd apple</code>，然后再将其它账户的<code>.ssh</code>文件夹拷贝到新账户的家目录<code>cp -r /home/dog/.ssh /home/apple</code>。出于安全考虑，建议重新生成秘钥，这里只是演示下过程。上述操作用 root 账户完成，拷贝过来的文件夹的所有者自然也是 root，还需将所有者变更为新账户<code>chown -hR apple /home/apple/.ssh</code>。好了，现在可以直接用主机地址登录了<code>ssh 192.168.0.5</code>。</p><h3 id="putty自动登录"><a href="#putty自动登录" class="headerlink" title="putty自动登录"></a>putty自动登录</h3><p>虽然中文版 putty 出现过严重的后门事件，且 Windows Terminal 用起来也很舒服，但是putty仍有相当部分的拥趸。使用以上生成并部署完的密钥对，只需两步即可实现 putty 免密码登录。</p><ol><li><p>转换公钥</p><p>OpenSSH 与 putty 的密钥格式不同，使用 puttygen工具将 ssh-keygen 生成的私钥转成 putty 格式。点击<code>Load</code>按钮，选择私钥文件<code>id_rsa</code>，然后再保存成新的私钥文件。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20211009222032353.png" alt="image-20211009222032353"></p></li><li><p>加载公钥</p><p>putty 设置窗口的 Auth 标签页中选择转换好的 ppk 私钥文件，再填写默认登录账户、主机地址等信息，最后将当前设置保存成一个会话，下次双击会话名即可自动登录。</p><p><img src="https://raw.githubusercontent.com/3roman/PicBed/master/hexo/image-20211009222400149.png" alt="image-20211009222400149"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
